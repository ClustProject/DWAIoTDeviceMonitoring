{
  "title": "Device Management",
  "image": null,
  "mobileHide": false,
  "mobileOrder": null,
  "configuration": {
    "description": "",
    "widgets": {
      "00a0cf76-9330-111a-ce12-e7be4405c77b": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_maintain_widgets",
        "typeAlias": "maintain_entity_two_rows",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 7.5,
        "sizeY": 3,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "979a4eba-cc79-33a5-d5d1-d76037f21b2b",
              "filterId": null,
              "dataKeys": []
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "23c2e823-d689-a1fc-3554-98e7c4136393",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "customerL1Name",
                  "type": "attribute",
                  "label": "thingplus.label.customerL1-name",
                  "color": "#2196f3",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false
                  },
                  "_hash": 0.2445482492613411,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "customerL2Name",
                  "type": "attribute",
                  "label": "thingplus.label.customerL2-name",
                  "color": "#4caf50",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false
                  },
                  "_hash": 0.1521907603510162,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "label",
                  "type": "entityField",
                  "label": "thingplus.label.device-name",
                  "color": "#f44336",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false
                  },
                  "_hash": 0.1647402605720012,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "name",
                  "type": "entityField",
                  "label": "thingplus.label.device-id",
                  "color": "#ffc107",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false
                  },
                  "_hash": 0.08077314770811506,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "model",
                  "type": "attribute",
                  "label": "thingplus.label.device-model",
                  "color": "#607d8b",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "return value + ' (' + ctx.custom.t('thingplus.device-model.' + value + '.summary') + ')'"
                  },
                  "_hash": 0.6471596284271872,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "trialConfig",
                  "type": "attribute",
                  "label": "thingplus.label.trial-time",
                  "color": "#795548",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if(value){\n    let target = JSON.parse(value)\n    if(target.isActive){\n        return target.trialMin + ' ~ ' + target.trialMax + ctx.custom.t('thingplus.time-format.minute')\n    }\n}\nreturn '-'"
                  },
                  "_hash": 0.18579700819177458,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "noWorkState",
                  "type": "attribute",
                  "label": "thingplus.label.no-work-state",
                  "color": "#00bcd4",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if(value == 'WAIT'){\n    return ctx.custom.t('thingplus.state.waiting');\n}\nif(value == 'STOP'){\n    return ctx.custom.t('thingplus.state.stopped');\n}\nreturn '-'"
                  },
                  "_hash": 0.27768081443060644,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "plannedOperationTime",
                  "type": "attribute",
                  "label": "thingplus.time-format.weekday-short.mon",
                  "color": "#9c27b0",
                  "settings": {
                    "hidden": true,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false
                  },
                  "_hash": 0.9711087315943872,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": false,
                  "postFuncBody": null
                },
                {
                  "name": "TP_ActivationState",
                  "type": "timeseries",
                  "label": "thingplus.action.activate",
                  "color": "#673ab7",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": true,
                    "useCellContentFunction": true,
                    "cellContentFunction": "if(value == 'true'){\n    return `<div class=\"activate-switch active\"><div class=\"ball\"></div></div>`\n}\nreturn `<div class=\"activate-switch\"><div class=\"ball\"></div></div>`",
                    "useCellActionFunction": true,
                    "cellActionFunction": "let descriptors = ctx.actionsApi.getActionDescriptors('customAction');\nlet targetIndex = descriptors.findIndex(x => x.name == 'Activate');\nif (targetIndex != -1) {\n  ctx.actionsApi.handleWidgetAction(\n    {},\n    descriptors[targetIndex],\n    ctx.custom.mainData[tr.index].id,\n    ctx.custom.mainData[tr.index].name,\n    ctx.custom.mainData[tr.index],\n    ctx.custom.mainData[tr.index].label\n  );\n}\n",
                    "cellStyleFunction": "return {\n    \"padding\": \"0em\",\n    \n}"
                  },
                  "_hash": 0.017793842123580372,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "stopPower",
                  "type": "attribute",
                  "label": "thingplus.parameter.stop-power",
                  "color": "#009688",
                  "settings": {
                    "hidden": true,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "useCellActionFunction": false
                  },
                  "_hash": 0.6465518158000092,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "TP_WaitPowerLimit",
                  "type": "timeseries",
                  "label": "thingplus.parameter.wait-power-limit",
                  "color": "#795548",
                  "settings": {
                    "hidden": true,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "useCellActionFunction": false
                  },
                  "_hash": 0.8285816622587046,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": false,
                  "postFuncBody": null
                },
                {
                  "name": "TP_WorkPowerLimit",
                  "type": "timeseries",
                  "label": "thingplus.parameter.work-power-limit",
                  "color": "#00bcd4",
                  "settings": {
                    "hidden": true,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "useCellActionFunction": false
                  },
                  "_hash": 0.9521755022900831,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "electricLimit",
                  "type": "attribute",
                  "label": "electricLimit",
                  "color": "#009688",
                  "settings": {
                    "hidden": true,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "useCellActionFunction": false
                  },
                  "_hash": 0.18239286076221695,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "user",
                  "type": "attribute",
                  "label": "user",
                  "color": "#673ab7",
                  "settings": {
                    "hidden": true,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "useCellActionFunction": false
                  },
                  "_hash": 0.49772313964503967,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "plannedOperationTime",
                  "type": "attribute",
                  "label": "plannedOperationTime",
                  "color": "#cddc39",
                  "settings": {
                    "hidden": true,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "useCellActionFunction": false
                  },
                  "_hash": 0.4720969625494251,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ]
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "var(--tb-service-background-0)",
          "color": "var(--tb-service-accent)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 1630,
              "filterLevel": 2,
              "mainHeader": "1,1,1,1,1,1,1,1",
              "subHeader": "0,0,0,0,0,0,0,0"
            }
          },
          "title": "thingplus.page.admin.device-list",
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": true,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default"
          },
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "1.6em",
            "font-weight": 500,
            "letter-spacing": "-0.04em",
            "color": "var(--tb-service-font-5)"
          },
          "noDataDisplayMessage": "",
          "showLegend": false,
          "actions": {
            "widgetHeaderButton": [
              {
                "name": "thingplus.action.new",
                "icon": "add",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"add-device-form\">\n  <form\n    #addEntityForm=\"ngForm\"\n    [formGroup]=\"addEntityFormGroup\"\n    (ngSubmit)=\"save()\"\n    style=\"font-size: {{calcFontSize()}}px;\"\n  >\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\" translate>thingplus.dialog.create-device-title</span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 0.4em\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div class=\"step-controller\" fxLayoutAlign=\"space-between center\">\n      <div\n        class=\"step\"\n        [ngClass]=\"{'prev': currentStep > 0, 'current': currentStep == 0, 'next': currentStep < 0}\"\n        (click)=\"selectStep($event, 0)\"\n        fxLayoutAlign=\"center center\"\n        [attr.data-label]=\"t('thingplus.label.step-basic')\"\n      >\n        <i class=\"material-icons\">check</i>\n      </div>\n      <div class=\"step-progress-line\" [ngClass]=\"{'prev': currentStep > 0, 'next': currentStep < 0}\"></div>\n      <div\n        class=\"step\"\n        [ngClass]=\"{'prev': currentStep > 1, 'current': currentStep == 1, 'next': currentStep < 1}\"\n        (click)=\"selectStep($event, 1)\"\n        fxLayoutAlign=\"center center\"\n        [attr.data-label]=\"t('thingplus.label.step-standard')\"\n      >\n        <i class=\"material-icons\">check</i>\n      </div>\n      <div class=\"step-progress-line\" [ngClass]=\"{'prev': currentStep > 1, 'next': currentStep < 1}\"></div>\n      <div\n        class=\"step\"\n        [ngClass]=\"{'prev': currentStep > 2, 'current': currentStep == 2, 'next': currentStep < 2}\"\n        (click)=\"selectStep($event, 2)\"\n        fxLayoutAlign=\"center center\"\n        [attr.data-label]=\"t('thingplus.label.step-work')\"\n      >\n        <i class=\"material-icons\">check</i>\n      </div>\n      <div class=\"step-progress-line\" [ngClass]=\"{'prev': currentStep > 2, 'next': currentStep < 2}\"></div>\n      <div\n        class=\"step\"\n        [ngClass]=\"{'prev': currentStep > 3, 'current': currentStep == 3, 'next': currentStep < 3}\"\n        (click)=\"selectStep($event, 3)\"\n        fxLayoutAlign=\"center center\"\n        [attr.data-label]=\"t('thingplus.label.step-parameter')\"\n      >\n        <i class=\"material-icons\">check</i>\n      </div>\n    </div>\n    <div mat-dialog-content fxFlex fxLayout=\"column\" fxLayoutGap=\"2em\">\n      <div class=\"step-content step-content-0\" *ngIf=\"currentStep == 0\" fxLayout=\"column\" fxLayoutGap=\"2em\">\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex=\"100\"\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{'disabled': ownerLevel != 0}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.customerL1</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select\n                formControlName=\"customerL1\"\n                (selectionChange)=\"setCustomerL1($event)\"\n                *ngIf=\"ownerLevel == 0\"\n              >\n                <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n                  {{customerL1.name}}\n                </mat-option>\n              </mat-select>\n              <input matInput formControlName=\"customerL1Name\" *ngIf=\"ownerLevel != 0\" readonly />\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex=\"100\"\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{'error': ownerLevel <= 1 && addEntityFormGroup.get('customerL2').hasError('required'), 'disabled': ownerLevel > 1}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.customerL2</label>\n              <span> * </span>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select formControlName=\"customerL2\" required *ngIf=\"ownerLevel <= 1\">\n                <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n                  {{customerL2.name}}\n                </mat-option>\n              </mat-select>\n              <input matInput formControlName=\"customerL2Name\" *ngIf=\"ownerLevel > 1\" readonly />\n            </div>\n            <div class=\"error-box\" translate>thingplus.help.error-required-customerL2</div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex=\"100\"\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{error: addEntityFormGroup.get('label').hasError('required') || addEntityFormGroup.get('label').hasError('maxlength')}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.device-name</label>\n              <span> * </span>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <input matInput formControlName=\"label\" required />\n            </div>\n            <div class=\"error-box\" *ngIf=\"addEntityFormGroup.get('label').hasError('required')\" translate>\n              thingplus.help.error-required-device-name\n            </div>\n            <div class=\"error-box\" *ngIf=\"addEntityFormGroup.get('label').hasError('maxlength')\" translate>\n              thingplus.help.error-max-length\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.device-id</label>\n              <span> * </span>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <input matInput formControlName=\"name\" required />\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex=\"100\"\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{'error': ownerLevel <= 1 && addEntityFormGroup.get('model').hasError('required')}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.device-model</label>\n              <span> * </span>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select formControlName=\"model\" required>\n                <mat-option *ngFor=\"let model of modelList\" [value]=\"model.value\"> {{model.name}} </mat-option>\n              </mat-select>\n            </div>\n            <div class=\"error-box\" translate>thingplus.help.error-required-device-model</div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start end\">\n          <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.manager</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select formControlName=\"user\" (selectionChange)=\"setUser($event)\">\n                <mat-option *ngFor=\"let user of userList\" [value]=\"user.value\"> {{user.name}} </mat-option>\n              </mat-select>\n            </div>\n          </div>\n          <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box disabled\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\"></div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <input matInput [value]=\"selectedPhone\" readonly />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"step-content step-content-1\" *ngIf=\"currentStep == 1\" fxLayout=\"column\" fxLayoutGap=\"2em\">\n        <div fxLayout=\"column\" fxLayoutAlign=\"start center\" formGroupName=\"plannedOperationTime\">\n          <div class=\"header-row\" fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                <label class=\"side-label\" translate>thingplus.label.divide-by-weekday</label>\n                <div class=\"switch-track\" [ngClass]=\"{'active': divideWeek}\" (click)=\"divideWeek = !divideWeek\">\n                  <div class=\"switch-ball\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"sub-row\" fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n            <div\n              fxFlex\n              class=\"sub-row-box\"\n              fxLayout=\"row\"\n              fxLayoutAlign=\"space-between center\"\n              fxLayoutGap=\"0.6em\"\n              *ngIf=\"!divideWeek\"\n            >\n              <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\" class=\"input-box\">\n                <label class=\"side-label\" translate>thingplus.label.everyday</label>\n                <div fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.6em\">\n                  <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.6em\">\n                    <input\n                      class=\"input-small\"\n                      type=\"number\"\n                      step=\"1\"\n                      min=\"0\"\n                      max=\"24\"\n                      maxlength=\"2\"\n                      matInput\n                      formControlName=\"everydayHour\"\n                    />\n                  </div>\n                  <span class=\"unit-label\" translate>thingplus.time-format.hours</span>\n                  <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.6em\">\n                    <input\n                      class=\"input-small\"\n                      type=\"number\"\n                      step=\"1\"\n                      min=\"0\"\n                      max=\"60\"\n                      maxlength=\"2\"\n                      matInput\n                      formControlName=\"everydayMin\"\n                    />\n                  </div>\n\n                  <span class=\"unit-label\" translate>thingplus.time-format.minute</span>\n                </div>\n              </div>\n            </div>\n            <div fxFlex formArrayName=\"week\" *ngIf=\"divideWeek\">\n              <div\n                fxFlex\n                class=\"sub-row-box\"\n                fxLayout=\"row\"\n                fxLayoutAlign=\"space-between center\"\n                fxLayoutGap=\"0.6em\"\n                *ngFor=\"let day of getWeek().controls; index as i\"\n              >\n                <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\" class=\"input-box\">\n                  <label class=\"side-label\" translate>{{'thingplus.time-format.weekday-long.' + dayList[i]}}</label>\n                  <div fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.6em\" [formGroupName]=\"i\">\n                    <div class=\"value-box\" fxLayoutAlign=\"center center\">\n                      <input\n                        class=\"input-small\"\n                        type=\"number\"\n                        step=\"1\"\n                        min=\"0\"\n                        max=\"24\"\n                        maxlength=\"2\"\n                        matInput\n                        formControlName=\"hour\"\n                      />\n                    </div>\n                    <span class=\"unit-label\" translate>thingplus.time-format.hours</span>\n                    <div class=\"value-box\" fxLayoutAlign=\"center center\">\n                      <input\n                        class=\"input-small\"\n                        type=\"number\"\n                        step=\"1\"\n                        min=\"0\"\n                        max=\"60\"\n                        maxlength=\"2\"\n                        matInput\n                        formControlName=\"min\"\n                      />\n                    </div>\n                    <span class=\"unit-label\" translate>thingplus.time-format.minute</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"column\" fxLayoutAlign=\"start center\" formGroupName=\"trialConfig\">\n          <div class=\"header-row\" fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                <label class=\"side-label\" translate>thingplus.label.is-active-trial</label>\n                <div\n                  class=\"switch-track\"\n                  [ngClass]=\"{'active': isActiveTrial}\"\n                  (click)=\"isActiveTrial = !isActiveTrial\"\n                >\n                  <div class=\"switch-ball\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"sub-row\" fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n            <div\n              fxFlex\n              class=\"sub-row-box\"\n              fxLayout=\"row\"\n              fxLayoutAlign=\"space-between center\"\n              fxLayoutGap=\"0.6em\"\n              *ngIf=\"isActiveTrial\"\n            >\n              <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\" class=\"input-box\">\n                <label class=\"side-label\" translate>thingplus.label.trial-time</label>\n                <div fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.6em\">\n                  <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.6em\">\n                    <input class=\"input-small\" type=\"number\" step=\"1\" matInput formControlName=\"trialMin\" />\n                  </div>\n                  <span class=\"unit-label\"> ~ </span>\n                  <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.6em\">\n                    <input class=\"input-small\" type=\"number\" step=\"1\" matInput formControlName=\"trialMax\" />\n                  </div>\n\n                  <span class=\"unit-label\" translate>thingplus.time-format.minute</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"column\" fxLayoutAlign=\"start center\">\n          <div class=\"header-row\" fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                <label class=\"side-label\" translate>thingplus.label.no-work-state</label>\n                <div fxLayoutAlign=\"end center\" fxLayoutGap=\"1.8em\">\n                  <div\n                    class=\"radio-box\"\n                    [ngClass]=\"{'active': noWorkState == 'STOP'}\"\n                    fxLayoutAlign=\"start center\"\n                    fxLayoutGap=\"0.6em\"\n                    (click)=\"noWorkState = 'STOP'\"\n                  >\n                    <div class=\"radio-circle\"></div>\n                    <div class=\"radio-label\" translate>thingplus.state.stopped</div>\n                  </div>\n                  <div\n                    class=\"radio-box\"\n                    [ngClass]=\"{'active': noWorkState == 'WAIT'}\"\n                    fxLayoutAlign=\"start center\"\n                    fxLayoutGap=\"0.6em\"\n                    (click)=\"noWorkState = 'WAIT'\"\n                  >\n                    <div class=\"radio-circle\"></div>\n                    <div class=\"radio-label\" translate>thingplus.state.waiting</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"step-content step-content-2\" *ngIf=\"currentStep == 2\" fxLayout=\"column\" fxLayoutGap=\"2em\">\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{'error': ownerLevel <= 1 && addEntityFormGroup.get('stopPower').hasError('required')}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.parameter.stop-power</label>\n              <span> * </span>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <input matInput type=\"number\" formControlName=\"stopPower\" required />\n            </div>\n            <div class=\"description-box\"><b>*</b> {{'thingplus.help.error-required-stop-power' | translate}}</div>\n            <div class=\"error-box\" translate>thingplus.help.error-required-stop-power</div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{'error': ownerLevel <= 1 && addEntityFormGroup.get('waitPowerLimit').hasError('required')}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.parameter.wait-power-limit</label>\n              <span> * </span>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <input matInput type=\"number\" formControlName=\"waitPowerLimit\" required />\n            </div>\n            <div class=\"description-box\"><b>*</b> {{'thingplus.help.error-required-wait-power-limit' | translate}}</div>\n            <div class=\"error-box\" translate>thingplus.help.error-required-wait-power-limit</div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{'error': ownerLevel <= 1 && addEntityFormGroup.get('workPowerLimit').hasError('required')}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.parameter.work-power-limit</label>\n              <span> * </span>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <input matInput type=\"number\" formControlName=\"workPowerLimit\" required />\n            </div>\n            <div class=\"description-box\"><b>*</b> {{'thingplus.help.error-required-work-power-limit' | translate}}</div>\n            <div class=\"error-box\" translate>thingplus.help.error-required-work-power-limit</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"step-content step-content-3\" *ngIf=\"currentStep == 3\" fxLayout=\"column\" fxLayoutGap=\"2em\">\n        <div fxLayout=\"column\" fxLayoutGap=\"2em\" formGroupName=\"electricLimit\">\n          <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n            <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n                <label>{{'thingplus.parameter.volt' | translate}} {{'thingplus.label.limit-high' | translate}}</label>\n              </div>\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n                <input matInput type=\"number\" formControlName=\"voltHigh\" />\n              </div>\n            </div>\n            <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n                <label>{{'thingplus.parameter.volt' | translate}} {{'thingplus.label.limit-low' | translate}}</label>\n              </div>\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n                <input matInput type=\"number\" formControlName=\"voltLow\" />\n              </div>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n            <div fxFlex=\"50\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n                <label>\n                  {{'thingplus.parameter.volt-imbal' | translate}} {{'thingplus.label.limit-high' | translate}}\n                </label>\n              </div>\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n                <input matInput type=\"number\" formControlName=\"voltImbal\" />\n              </div>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n            <div fxFlex=\"50\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n                <label>{{'thingplus.parameter.curr' | translate}} {{'thingplus.label.limit-high' | translate}}</label>\n              </div>\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n                <input matInput type=\"number\" formControlName=\"curr\" />\n              </div>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n            <div fxFlex=\"50\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n                <label\n                  >{{'thingplus.parameter.curr-imbal' | translate}} {{'thingplus.label.limit-high' | translate}}</label\n                >\n              </div>\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n                <input matInput type=\"number\" formControlName=\"currImbal\" />\n              </div>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n            <div fxFlex=\"50\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n                <label\n                  >{{'thingplus.parameter.power-factor' | translate}} {{'thingplus.label.limit-low' | translate}}</label\n                >\n              </div>\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n                <input matInput type=\"number\" formControlName=\"pf\" />\n              </div>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n            <div fxFlex=\"50\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n                <label>{{'thingplus.parameter.thd' | translate}} {{'thingplus.label.limit-high' | translate}}</label>\n              </div>\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n                <input matInput type=\"number\" formControlName=\"thd\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button prev-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"prevStep()\"\n        *ngIf=\"currentStep > 0\"\n        translate\n      >\n        thingplus.action.prev-step\n      </button>\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        *ngIf=\"currentStep == 0\"\n        translate\n      >\n        thingplus.action.close\n      </button>\n      <button\n        class=\"button next-button\"\n        type=\"button\"\n        (click)=\"nextStep()\"\n        [disabled]=\"(isLoading$ | async) || addEntityForm.invalid\"\n        *ngIf=\"currentStep < 3\"\n        translate\n      >\n        thingplus.action.next-step\n      </button>\n      <button\n        class=\"button save-button\"\n        type=\"submit\"\n        [disabled]=\"(isLoading$ | async) || addEntityForm.invalid\"\n        *ngIf=\"currentStep == 3\"\n        translate\n      >\n        thingplus.action.save\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#add-device-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  min-height: 70vh;\n}\n#add-device-form input[type='number']::-webkit-outer-spin-button,\n#add-device-form input[type='number']::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n#add-device-form input[type='number'] {\n  -moz-appearance: textfield;\n}\n#add-device-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#add-device-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#add-device-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-device-form .dialog-close i {\n  font-size: 1.4em;\n}\n#add-device-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#add-device-form .step-controller {\n  padding: 2em 4em;\n}\n#add-device-form .step {\n  position: relative;\n  display: inline-block;\n  padding: 0.3em;\n  background-color: var(--tb-service-border-1);\n  border: 1px solid var(--tb-service-border-1);\n  color: var(--tb-service-border-1);\n  transition-property: color, border-color, background-color;\n  transition-duration: var(--tb-config-color-duration);\n  border-radius: 50%;\n  cursor: pointer;\n}\n#add-device-form .step i {\n  font-size: 1.4em;\n}\n#add-device-form .step.prev {\n  background-color: var(--tb-service-accent);\n  border: 0.1em solid var(--tb-service-accent);\n  color: var(--tb-service-font-0);\n}\n#add-device-form .step.current {\n  background-color: var(--tb-service-font-0);\n  border: 0.3em solid var(--tb-service-accent);\n  color: var(--tb-service-font-0);\n}\n#add-device-form .step:after {\n  content: attr(data-label);\n  position: absolute;\n  top: 125%;\n  left: 50%;\n  transform: translateX(-50%);\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n  font-size: 1.2em;\n}\n#add-device-form .step.current:after {\n  color: var(--tb-service-font-5);\n}\n#add-device-form .step-progress-line {\n  width: 100%;\n  height: 0.2em;\n  background-color: var(--tb-service-border-1);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-device-form .step-progress-line.prev {\n  background-color: var(--tb-service-accent);\n}\n\n#add-device-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#add-device-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#add-device-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#add-device-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#add-device-form .header-row,\n#add-device-form .sub-row {\n  width: 100%;\n}\n\n#add-device-form .header-row {\n  background-color: var(--tb-service-background-1);\n  padding: 1.6em;\n  border: 1px solid var(--tb-service-border-0);\n}\n\n#add-device-form .sub-row-box {\n  padding: 1.6em;\n  border: 1px solid var(--tb-service-border-0);\n  border-top: none;\n}\n\n#add-device-form .label-box {\n  color: var(--tb-service-font-3);\n  font-size: 1.2em;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-device-form .input-box.disabled .label-box {\n  color: var(--tb-service-font-1);\n}\n#add-device-form .value-box {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-device-form .value-box.no-border {\n  border: none !important;\n}\n\n#add-device-form .input-box:not(.disabled) .value-box:hover {\n  border-color: var(--tb-service-border-3);\n}\n#add-device-form .input-box:not(.disabled) .value-box:focus-within {\n  border-color: var(--tb-service-accent);\n  caret-color: var(--tb-service-accent);\n}\n#add-device-form .value-box *::placeholder {\n  color: var(--tb-service-font-4);\n}\n#add-device-form .value-box input {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  caret-color: var(--tb-service-accent);\n}\n#add-device-form .input-box.disabled .value-box {\n  background-color: var(--tb-service-background-1);\n}\n#add-device-form .input-box.disabled .value-box input {\n  color: var(--tb-service-font-2);\n  cursor: default;\n}\n#add-device-form .side-label {\n  color: var(--tb-service-font-4);\n  font-size: 1.4em;\n}\n#add-device-form .switch-track {\n  position: relative;\n  width: 3.6em;\n  height: 1.6em;\n  border-radius: 0.8em;\n  background-color: var(--tb-service-border-1);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n  cursor: pointer;\n}\n#add-device-form .switch-track.active {\n  background-color: var(--tb-service-accent);\n}\n#add-device-form .switch-ball {\n  position: absolute;\n  top: 50%;\n  left: 0.8em;\n  transform: translate(-50%, -50%);\n  width: 1.2em;\n  height: 1.2em;\n  border-radius: 0.6em;\n  background-color: var(--tb-service-background-0);\n  transition-property: left;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-device-form .switch-track.active .switch-ball {\n  left: calc(100% - 0.8em);\n}\n#add-device-form .radio-box .radio-circle {\n  width: 2em;\n  height: 2em;\n  border-radius: 50%;\n  border: 1px solid var(--tb-service-border-1);\n}\n#add-device-form .radio-box .radio-circle {\n  width: 2em;\n  height: 2em;\n  border-radius: 50%;\n  border: 0.1em solid var(--tb-service-border-1);\n}\n#add-device-form .radio-box.active .radio-circle {\n  width: 2em;\n  height: 2em;\n  border: 0.6em solid var(--tb-service-accent);\n}\n#add-device-form .radio-box .radio-label {\n  font-size: 1.4em;\n  color: var(--tb-service-font-4);\n}\n#add-device-form .input-small {\n  width: 2em;\n}\n#add-device-form .unit-label {\n  color: var(--tb-service-font-4);\n  font-size: 1.4em;\n}\n\n#add-device-form .value-box .mat-select-trigger {\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  line-height: 1;\n}\n#add-device-form .value-box .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n#add-device-form .value-box .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n#add-device-form .description-box {\n  margin-top: calc(0.6em / 1.2);\n  color: var(--tb-service-font-3);\n  font-size: 1.2em;\n}\n#add-device-form .description-box b {\n  color: var(--tb-service-accent);\n}\n#add-device-form .error-box {\n  display: none;\n  color: var(--tb-service-warn);\n  font-size: 1.2em;\n}\n#add-device-form .input-box.error .label-box {\n  color: var(--tb-service-warn);\n}\n#add-device-form .input-box.error .value-box {\n  border: 1px solid var(--tb-service-warn);\n}\n#add-device-form .input-box.error .description-box {\n  display: none;\n}\n#add-device-form .input-box.error .error-box {\n  display: block;\n  margin-top: calc(0.6em / 1.2);\n}\n\n#add-device-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#add-device-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-device-form .save-button,\n#add-device-form .next-button {\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-accent);\n}\n#add-device-form .save-button:hover,\n#add-device-form .next-button:hover {\n  background-color: var(--tb-service-accent-hover);\n}\n#add-device-form .save-button:active,\n#add-device-form .next-button:active {\n  background-color: var(--tb-service-accent-pressed);\n}\n#add-device-form .close-button,\n#add-device-form .prev-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#add-device-form .close-button:hover,\n#add-device-form .prev-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#add-device-form .close-button:active,\n#add-device-form .prev-button:active {\n  background-color: var(--tb-service-border-0);\n}\n#add-device-form .button:disabled,\n#add-device-form .button[disabled] {\n  background-color: var(--tb-service-font-1);\n  color: var(--tb-service-font-0);\n  cursor: default;\n}\n\n@media (min-width: 960px) {\n  #add-device-form form {\n    width: 24vw;\n  }\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nconst JWT_TOKEN = window.localStorage.getItem('jwt_token');\nconst t = widgetContext.custom.t;\n\nopenAddEntityDialog();\n\nfunction openAddEntityDialog() {\n  customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\n}\n\nfunction AddEntityDialogController(instance) {\n  let vm = instance;\n  vm.ownerId = widgetContext.defaultSubscription.configuredDatasources[0].entity.id;\n  vm.ownerLevel = widgetContext.$scope.ownerLevel;\n  vm.t = t;\n  vm.customerL1List = [{ name: t('thingplus.selector.select-customerL1'), value: '' }];\n  vm.customerL2List = [{ name: t('thingplus.selector.select-customerL2'), value: '' }];\n  vm.userList = [{ name: t('thingplus.selector.select-manager'), value: '', phone: '-' }];\n  vm.selectedPhone = '-';\n  if (vm.ownerLevel == 0) {\n    vm.customerL1List = vm.customerL1List.concat(\n      widgetContext.custom.customerL1List\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  }\n  if (vm.ownerLevel <= 1) {\n    vm.customerL2List = vm.customerL2List.concat(\n      widgetContext.custom.customerL2List\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  }\n  vm.userList = vm.userList.concat(\n    widgetContext.custom.userList\n      .map(x => {\n        return {\n          name: x.details.firstName,\n          value: x.id.id,\n          phone: x.details.additionalInfo && x.details.additionalInfo.phone ? x.details.additionalInfo.phone : '-',\n        };\n      })\n      .sort((a, b) => {\n        if (a.name > b.name) return 1;\n        if (a.name < b.name) return -1;\n        return 0;\n      })\n  );\n\n  vm.modelList = [\n    { name: t('thingplus.selector.model-selection'), value: '' },\n    { name: t('thingplus.device-model.YMC-430.summary'), value: 'YMC-430' },\n    { name: t('thingplus.device-model.M2-5AX_20K.summary'), value: 'M2-5AX_20K' },\n    { name: t('thingplus.device-model.YBM-1218V.summary'), value: 'YBM-1218V' },\n    { name: t('thingplus.device-model.RB-5M.summary'), value: 'RB-5M' },\n    { name: t('thingplus.device-model.WINSTAR-SP.summary'), value: 'WINSTAR-SP' },\n    { name: t('thingplus.device-model.UJG-35.summary'), value: 'UJG-35' },\n    { name: t('thingplus.device-model.AP450L.summary'), value: 'AP450L' },\n    { name: t('thingplus.device-model.AQ1200L.summary'), value: 'AQ1200L' },\n    { name: t('thingplus.device-model.AP3L.summary'), value: 'AP3L' },\n    { name: t('thingplus.device-model.AG100L.summary'), value: 'AG100L' },\n    { name: t('thingplus.device-model.TRULASER_CELL_7040.summary'), value: 'TRULASER_CELL_7040' },\n    { name: t('thingplus.device-model.BC-3020_DYNAMIC.summary'), value: 'BC-3020_DYNAMIC' },\n    { name: t('thingplus.device-model.GLS-150GL.summary'), value: 'GLS-150GL' },\n    { name: t('thingplus.device-model.DE4P-2500.summary'), value: 'DE4P-2500' },\n    { name: t('thingplus.device-model.DE4P-2000.summary'), value: 'DE4P-2000' },\n    { name: t('thingplus.device-model.DE2P-1200.summary'), value: 'DE2P-1200' },\n    { name: t('thingplus.device-model.AUH-125H.summary'), value: 'AUH-125H' },\n    { name: t('thingplus.device-model.ACCURA-II.summary'), value: 'ACCURA-II' },\n    { name: t('thingplus.device-model.CRYSTA-APEX_S_122010.summary'), value: 'CRYSTA-APEX_S_122010' },\n    { name: t('thingplus.device-model.LHM-V2.summary'), value: 'LHM-V2' },\n  ];\n  vm.currentStep = 0;\n  let defaultCustomerL1Name = widgetContext.custom.relations[entityId.id].parent\n    ? widgetContext.custom.relations[entityId.id].parent.name\n    : entityName;\n  vm.originUser = additionalParams.user || '';\n  if (vm.userList.findIndex(x => x.value == vm.originUser) == -1) {\n    vm.originUser = '';\n  }\n  let targetIndex = vm.userList.findIndex(x => x.value == vm.originUser);\n  if (targetIndex != -1) {\n    vm.selectedPhone = vm.userList[targetIndex].phone;\n  }\n  vm.dayList = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\n  vm.divideWeek = false;\n  vm.isActiveTrial = false;\n  vm.noWorkState = 'STOP';\n  vm.addEntityFormGroup = vm.fb.group({\n    customerL1Name: [defaultCustomerL1Name],\n    customerL2Name: [entityName],\n    name: ['a1b2c3d4e5f6', [vm.validators.required, vm.validators.pattern(/^[a-z0-9-_]{4,64}$/)]],\n    label: [t('thingplus.label.device') + ' A', [vm.validators.required, vm.validators.maxLength(16)]],\n    model: ['', [vm.validators.required]],\n    user: [''],\n    stopPower: [0, [vm.validators.required]],\n    waitPowerLimit: [50, [vm.validators.required]],\n    workPowerLimit: [300, [vm.validators.required]],\n    plannedOperationTime: vm.fb.group({\n      everydayHour: [8],\n      everydayMin: [0],\n      week: vm.fb.array([\n        vm.fb.group({ hour: [8], min: [0] }),\n        vm.fb.group({ hour: [8], min: [0] }),\n        vm.fb.group({ hour: [8], min: [0] }),\n        vm.fb.group({ hour: [8], min: [0] }),\n        vm.fb.group({ hour: [8], min: [0] }),\n        vm.fb.group({ hour: [8], min: [0] }),\n        vm.fb.group({ hour: [8], min: [0] }),\n      ]),\n    }),\n    trialConfig: vm.fb.group({\n      isActive: [false],\n      trialMin: [20],\n      trialMax: [40],\n    }),\n    electricLimit: vm.fb.group({\n      voltHigh: [],\n      voltLow: [],\n      curr: [],\n      voltImbal: [],\n      currImbal: [],\n      pf: [],\n      thd: [],\n    }),\n  });\n\n  if (vm.ownerLevel == 0) {\n    vm.addEntityFormGroup.controls.customerL1 = vm.fb.control('');\n  }\n  if (vm.ownerLevel <= 1) {\n    vm.addEntityFormGroup.controls.customerL2 = vm.fb.control('', [vm.validators.required]);\n  }\n  vm.getWeek = function () {\n    return this.addEntityFormGroup.get('plannedOperationTime').controls['week'];\n  };\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  vm.save = function () {\n    vm.addEntityFormGroup.markAsPristine();\n    registerDevice().subscribe(device => {\n      device = device.tpngDevice; // Test라면 주석처리\n      let taskList = [assignDevice(device), saveRelation(device), saveAttribute(device), saveTelemetry(device)];\n      let user = vm.addEntityFormGroup.get('user').value;\n      if (user != '') {\n        taskList.push(\n          entityRelationService.saveRelation({\n            from: {\n              entityType: 'USER',\n              id: userId,\n            },\n            to: device.id,\n            type: 'Manages',\n          })\n        );\n      }\n      widgetContext.rxjs.forkJoin(taskList).subscribe(() => {\n        widgetContext.updateAliases();\n        vm.dialogRef.close(null);\n      });\n    });\n  };\n  vm.selectStep = function (e, index) {\n    if (vm.addEntityFormGroup.invalid) return;\n    vm.currentStep = index;\n  };\n  vm.prevStep = function () {\n    vm.currentStep--;\n  };\n  vm.nextStep = function () {\n    vm.currentStep++;\n  };\n  vm.setCustomerL1 = function (e) {\n    let customerL1 = vm.addEntityFormGroup.get('customerL1').value;\n    vm.customerL2List = [{ name: t('thingplus.selector.select-customerL2'), value: '' }];\n    vm.addEntityFormGroup.patchValue(\n      {\n        customerL2: '',\n      },\n      { emitEvent: false }\n    );\n    vm.customerL2List = vm.customerL2List.concat(\n      widgetContext.custom.customerL2List\n        .filter(x => {\n          return customerL1 == '' || x.parent.id.id == customerL1;\n        })\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  };\n  vm.setUser = function (e) {\n    let targetIndex = vm.userList.findIndex(x => x.value == e.value);\n    if (targetIndex != -1) {\n      vm.selectedPhone = vm.userList[targetIndex].phone;\n    }\n  };\n\n  function registerDevice() {\n    let name = vm.addEntityFormGroup.get('name').value;\n    let label = vm.addEntityFormGroup.get('label').value;\n\n    let body = {\n      agentFlag: 1,\n      serviceName: 'Moldmecca Service',\n      vhostName: name,\n      rmqUserName: 'milesight',\n      tpngDevice: {\n        name: name,\n        type: 'device',\n        label: label,\n      },\n    };\n    const JWT_TOKEN = window.localStorage.getItem('jwt_token');\n    let option = {\n      headers: {\n        'X-authorization': `Bearer ${JWT_TOKEN}`,\n        'Content-Type': 'application/json',\n      },\n    };\n    return widgetContext.http.post('https://devicereg.thingplus.net/api/regdevice', body, option);\n  }\n\n  // 테스트용\n  function registerDeviceTest() {\n    let name = vm.addEntityFormGroup.get('name').value;\n    let label = vm.addEntityFormGroup.get('label').value;\n\n    let body = {\n      name: name,\n      type: 'device',\n      label: label,\n    };\n\n    return deviceService.saveDevice(body);\n  }\n\n  function assignDevice(device) {\n    let CustomerL2Id = vm.addEntityFormGroup.get('customerL2').value || entityId.id;\n\n    return deviceService.assignDeviceToCustomer(CustomerL2Id, device.id.id);\n  }\n\n  function saveRelation(device) {\n    let CustomerL2Id = vm.addEntityFormGroup.get('customerL2').value || entityId.id;\n    let relationBody = {\n      from: {\n        entityType: 'CUSTOMER',\n        id: CustomerL2Id,\n      },\n      to: device.id,\n      type: 'Contains',\n    };\n    return entityRelationService.saveRelation(relationBody);\n  }\n\n  function saveAttribute(device) {\n    let customerL2Id = vm.addEntityFormGroup.get('customerL2').value || entityId.id;\n    let customerL2 = widgetContext.custom.relations[customerL2Id];\n    let customerL1Name = customerL2.parent.name;\n    let customerL2Name = customerL2.name;\n    let model = vm.addEntityFormGroup.get('model').value;\n    let user = vm.addEntityFormGroup.get('user').value;\n    let userIndex = vm.userList.findIndex(x => x.value == user);\n    let phone = vm.userList[userIndex].phone;\n    let manager = vm.userList[userIndex].name;\n    let email = vm.userList[userIndex].email;\n\n    let plannedOperationTime = vm.addEntityFormGroup.get('plannedOperationTime').value;\n    plannedOperationTime.isDivideByWeek = vm.divideWeek;\n    plannedOperationTime.everyday = getTime(plannedOperationTime.everydayHour, plannedOperationTime.everydayMin);\n    for (let i in plannedOperationTime.week) {\n      plannedOperationTime.week[i] = getTime(plannedOperationTime.week[i].hour, plannedOperationTime.week[i].min);\n    }\n    let trialConfig = vm.addEntityFormGroup.get('trialConfig').value;\n    trialConfig.isActive = vm.isActiveTrial;\n\n    let stopPower = vm.addEntityFormGroup.get('stopPower').value;\n\n    let electricLimit = vm.addEntityFormGroup.get('electricLimit').value;\n\n    let attributeBody = [\n      { key: 'customerL1Name', value: customerL1Name },\n      { key: 'customerL2Name', value: customerL2Name },\n      { key: 'model', value: model },\n      { key: 'user', value: user },\n      { key: 'plannedOperationTime', value: plannedOperationTime },\n      { key: 'trialConfig', value: trialConfig },\n      { key: 'noWorkState', value: vm.noWorkState },\n      { key: 'stopPower', value: stopPower },\n      { key: 'electricLimit', value: electricLimit },\n      { key: 'phone', value: phone },\n      { key: 'manager', value: manager },\n      { key: 'email', value: email },\n    ];\n    return attributeService.saveEntityAttributes(device.id, 'SERVER_SCOPE', attributeBody);\n  }\n  function saveTelemetry(device) {\n    let waitPowerLimit = vm.addEntityFormGroup.get('waitPowerLimit').value;\n    let workPowerLimit = vm.addEntityFormGroup.get('workPowerLimit').value;\n    let telemetryBody = [\n      { key: 'TP_ActivationState', value: true },\n      { key: 'TP_WaitPowerLimit', value: waitPowerLimit },\n      { key: 'TP_WorkPowerLimit', value: workPowerLimit },\n    ];\n    return attributeService.saveEntityTimeseries(device.id, 'TELEMETRY', telemetryBody);\n  }\n  function getTime(hour, min) {\n    let result = hour * 3600000 + min * 60000;\n    if (result > 86400000) {\n      result = 86400000;\n    }\n    return result;\n  }\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "33bdfa88-a2ae-9527-caf3-5f6fd247f99c"
              }
            ],
            "actionCellButton": [
              {
                "name": "Check",
                "icon": "check",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"check-device-form\">\n  <form\n    #checkEntityForm=\"ngForm\"\n    [formGroup]=\"checkEntityFormGroup\"\n    (ngSubmit)=\"save()\"\n    style=\"font-size: {{calcFontSize()}}px;\"\n  >\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\" translate>thingplus.dialog.check-device-title</span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 4px\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\" fxLayoutGap=\"2em\">\n      <div fxLayout=\"row\">\n        <div class=\"label\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n          <i class=\"material-icons\">info</i><span translate>thingplus.dialog.check-device-content</span>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"0.8em\">\n        <div fxFlex=\"33.33\" class=\"check-box check-box-{{check.index}}\" *ngFor=\"let check of checkList;\">\n          <div class=\"check-label-box\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"0.4em\">\n            <span>{{check.label}}</span><i class=\"material-icons\">info</i>\n          </div>\n          <div\n            class=\"check-value\"\n            [ngClass]=\"{'normal': check.value, 'abnormal': !check.value}\"\n            fxLayoutAlign=\"start center\"\n          >\n            {{check.value ? ('thingplus.state.normal' | translate) : ('thingplus.state.abnormal' | translate) }}\n          </div>\n        </div>\n      </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        translate\n      >\n        thingplus.action.close\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#check-device-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  user-select: none;\n}\n#check-device-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#check-device-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#check-device-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#check-device-form .dialog-close i {\n  font-size: 1.4em;\n}\n#check-device-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#check-device-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#check-device-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#check-device-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#check-device-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#check-device-form .label {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n}\n#check-device-form i {\n  font-size: 1.4em;\n  color: var(--tb-service-accent);\n}\n\n#check-device-form .check-label-box {\n  font-size: 1.2em;\n  padding: calc(1em / 1.2);\n  border: solid 1px var(--tb-service-border-0);\n  background-color: var(--tb-service-background-1);\n  color: var(--tb-service-font-5);\n}\n#check-device-form .check-label-box i {\n  font-size: 1.2em;\n  color: var(--tb-service-font-3);\n}\n#check-device-form .check-value {\n  font-size: 1.6em;\n  padding: calc(1em / 1.6);\n  border: solid 1px var(--tb-service-border-0);\n  border-top: none;\n}\n#check-device-form .check-value.normal {\n  color: var(--tb-service-compare-high);\n}\n#check-device-form .check-value.abnormal {\n  color: var(--tb-service-compare-low);\n}\n\n#check-device-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#check-device-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#check-device-form .close-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#check-device-form .close-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#check-device-form .close-button:active {\n  background-color: var(--tb-service-border-0);\n}\n\n@media (min-width: 960px) {\n  #check-device-form form {\n    width: 24vw;\n  }\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\n\nconst JWT_TOKEN = window.localStorage.getItem('jwt_token');\nconst t = widgetContext.custom.t;\nconst STANDARD_WINDOW_SIZE = 1920 / 100;\n\nopenCheckEntityDialog();\n\nfunction openCheckEntityDialog() {\n  customDialog.customDialog(htmlTemplate, CheckEntityDialogController).subscribe();\n}\n\nfunction CheckEntityDialogController(instance) {\n  let vm = instance;\n  vm.entityName = entityName;\n  vm.checkEntityFormGroup = vm.fb.group({});\n\n  vm.isLoading$.subscribe(async x => {\n    vm.$form = $('#check-device-form');\n  });\n\n  vm.checkList = [\n    { index: 0, key: 'exist', label: t('thingplus.label.data-exist'), value: false },\n    { index: 1, key: 'valid', label: t('thingplus.label.data-valid'), value: false },\n    { index: 2, key: 'regular', label: t('thingplus.label.data-regular'), value: false },\n  ];\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n\n  loadData(vm);\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n}\n\nfunction loadData(vm) {\n  let keys = [\n    'unbal',\n    'f1_type',\n    'f1_volt1',\n    'f1_volt2',\n    'f1_volt3',\n    'f1_amp1',\n    'f1_amp2',\n    'f1_amp3',\n    'f1_watt',\n    'f1_var',\n    'f1_VA',\n    'f1_PF',\n    'f1_kwh_imp',\n    'frequency',\n    'f1_unbal',\n    'f1_thd',\n  ];\n  let now = moment().valueOf();\n  let start = now - 30 * 60 * 1000;\n\n  widgetContext.http\n    .get(\n      `/api/plugins/telemetry/${entityId.entityType}/${\n        entityId.id\n      }/values/timeseries?limit=50000&agg=NONE&keys=${keys.join(\n        ','\n      )}&startTs=${start}&endTs=${now}&useStrictDataTypes=true`\n    )\n    .subscribe(datas => {\n      let checkResult = checkData(keys, datas);\n      vm.checkList[0].value = checkResult.exist;\n      vm.checkList[1].value = checkResult.valid;\n      vm.checkList[2].value = checkResult.regular;\n      createContent(vm, checkResult);\n    });\n}\nfunction checkData(keys, datas) {\n  let result = {\n    exist: true,\n    valid: true,\n    regular: true,\n    existInfo: [],\n    validInfo: [],\n    regularInfo: [],\n  };\n  for (let i in keys) {\n    if (!datas[keys[i]] || datas[keys[i]].length == 0) {\n      result.exist = false;\n      result.valid = false;\n      result.regular = false;\n      result.existInfo.push(keys[i]);\n      result.validInfo.push(keys[i]);\n      result.regularInfo.push(keys[i]);\n    }\n  }\n  result.existInfo = result.existInfo.join(', ');\n  if (!result.exist) {\n    result.validInfo = result.validInfo.join(', ');\n    result.regularInfo = result.regularInfo.join(', ');\n    return result;\n  }\n\n  for (let i in datas) {\n    let delay = 0;\n    for (let j in datas[i]) {\n      if (i == 'f1_type') {\n        if (![0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].includes(datas[i][j].value)) {\n          result.valid = false;\n          result.validInfo.push(i);\n        }\n      }\n      if (i != 'f1_type') {\n        if (datas[i][j] < 0) {\n          result.valid = false;\n          result.validInfo.push(i);\n        }\n      }\n      if (j != 0) {\n        delay += Math.abs(60000 - Math.abs(datas[i][j].ts - datas[i][j - 1].ts));\n      }\n    }\n    if (delay > 60000 * 15) {\n      result.regular = false;\n      result.regularInfo.push(i);\n    }\n  }\n\n  result.validInfo = result.validInfo.join(', ');\n  result.regularInfo = result.regularInfo.join(', ');\n  return result;\n}\n\nfunction createContent(vm, checkResult) {\n  let containerStyle = {\n    color: 'var(--tb-service-font-0)',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    lineHeight: 1.5,\n    width: `${250 / STANDARD_WINDOW_SIZE}vw`,\n    padding: `${16 / STANDARD_WINDOW_SIZE}vw`,\n  };\n  let titleStyle = {\n    fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n    fontWeight: 'bold',\n  };\n  let descriptionStyle = {\n    fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n    color: 'var(--tb-service-font-3)',\n    marginTop: `${10 / STANDARD_WINDOW_SIZE}vw`,\n    marginBottom: `${10 / STANDARD_WINDOW_SIZE}vw`,\n  };\n  let subTitleStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    paddingTop: `${10 / STANDARD_WINDOW_SIZE}vw`,\n    borderTop: '1px solid var(--tb-service-font-3)',\n  };\n  let subTitleIconStyle = {\n    width: `${10 / STANDARD_WINDOW_SIZE}vw`,\n    height: `${10 / STANDARD_WINDOW_SIZE}vw`,\n    backgroundColor: 'var(--tb-service-compare-low)',\n    marginRight: `${10 / STANDARD_WINDOW_SIZE}vw`,\n  };\n  let subTitleLabelStyle = {\n    fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n    fontWeight: 'bold',\n  };\n  let targetStyle = {\n    marginTop: `${10 / STANDARD_WINDOW_SIZE}vw`,\n    fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n    color: 'var(--tb-service-font-3)',\n  };\n  let target = ['exist', 'valid', 'regular'];\n  for (let i in target) {\n    let $container = $('<div></div>').css(containerStyle);\n\n    let $title = $(`<div>${t('thingplus.label.data-' + target[i])}</div>`).css(titleStyle);\n    $container.append($title);\n\n    let $description = $(`<div></div>`).css(descriptionStyle);\n    $description.html(t(`thingplus.help.data-${target[i]}-description`));\n    $container.append($description);\n\n    if (!checkResult[target[i]]) {\n      let $subTitle = $(`<div></div>`).css(subTitleStyle);\n      let $subTitleIcon = $(`<div></div>`).css(subTitleIconStyle);\n      let $subTitleLabel = $(`<div>${t('thingplus.state.abnormal')}</div>`).css(subTitleLabelStyle);\n      $subTitle.append($subTitleIcon);\n      $subTitle.append($subTitleLabel);\n      $container.append($subTitle);\n\n      let $target = $(`<div></div>`).css(targetStyle);\n      $target.html(t(`thingplus.help.data-${target[i]}-target`, { targetKey: checkResult[target[i] + 'Info'] }));\n      $container.append($target);\n    }\n    $(`.check-box-${i}`, vm.$form).tooltipster({\n      content: $container,\n      interactive: true,\n      theme: 'tooltipster-transparent',\n      trigger: 'hover',\n      delay: 200,\n    });\n  }\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "1a4707d3-1cd5-81f6-ce21-7593e2a92d41"
              },
              {
                "name": "Edit",
                "icon": "edit",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"edit-device-form\">\n  <form\n    #editEntityForm=\"ngForm\"\n    [formGroup]=\"editEntityFormGroup\"\n    (ngSubmit)=\"save()\"\n    style=\"font-size: {{calcFontSize()}}px;\"\n  >\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\" translate>thingplus.dialog.edit-device-title</span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 0.4em\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div class=\"step-controller\" fxLayoutAlign=\"space-between center\">\n      <div\n        class=\"step\"\n        [ngClass]=\"{'prev': currentStep > 0, 'current': currentStep == 0, 'next': currentStep < 0}\"\n        (click)=\"selectStep($event, 0)\"\n        fxLayoutAlign=\"center center\"\n        [attr.data-label]=\"t('thingplus.label.step-basic')\"\n      >\n        <i class=\"material-icons\">check</i>\n      </div>\n      <div class=\"step-progress-line\" [ngClass]=\"{'prev': currentStep > 0, 'next': currentStep < 0}\"></div>\n      <div\n        class=\"step\"\n        [ngClass]=\"{'prev': currentStep > 1, 'current': currentStep == 1, 'next': currentStep < 1}\"\n        (click)=\"selectStep($event, 1)\"\n        fxLayoutAlign=\"center center\"\n        [attr.data-label]=\"t('thingplus.label.step-standard')\"\n      >\n        <i class=\"material-icons\">check</i>\n      </div>\n      <div class=\"step-progress-line\" [ngClass]=\"{'prev': currentStep > 1, 'next': currentStep < 1}\"></div>\n      <div\n        class=\"step\"\n        [ngClass]=\"{'prev': currentStep > 2, 'current': currentStep == 2, 'next': currentStep < 2}\"\n        (click)=\"selectStep($event, 2)\"\n        fxLayoutAlign=\"center center\"\n        [attr.data-label]=\"t('thingplus.label.step-work')\"\n      >\n        <i class=\"material-icons\">check</i>\n      </div>\n      <div class=\"step-progress-line\" [ngClass]=\"{'prev': currentStep > 2, 'next': currentStep < 2}\"></div>\n      <div\n        class=\"step\"\n        [ngClass]=\"{'prev': currentStep > 3, 'current': currentStep == 3, 'next': currentStep < 3}\"\n        (click)=\"selectStep($event, 3)\"\n        fxLayoutAlign=\"center center\"\n        [attr.data-label]=\"t('thingplus.label.step-parameter')\"\n      >\n        <i class=\"material-icons\">check</i>\n      </div>\n    </div>\n    <div mat-dialog-content fxFlex fxLayout=\"column\" fxLayoutGap=\"2em\">\n      <div class=\"step-content step-content-0\" *ngIf=\"currentStep == 0\" fxLayout=\"column\" fxLayoutGap=\"2em\">\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex=\"100\"\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{'disabled': ownerLevel != 0}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.customerL1</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select\n                formControlName=\"customerL1\"\n                (selectionChange)=\"setCustomerL1($event)\"\n                *ngIf=\"ownerLevel == 0\"\n              >\n                <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n                  {{customerL1.name}}\n                </mat-option>\n              </mat-select>\n              <input matInput formControlName=\"customerL1Name\" *ngIf=\"ownerLevel != 0\" readonly />\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex=\"100\"\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{'error': ownerLevel <= 1 && editEntityFormGroup.get('customerL2').hasError('required'), 'disabled': ownerLevel > 1}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.customerL2</label>\n              <span> * </span>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select formControlName=\"customerL2\" required *ngIf=\"ownerLevel <= 1\">\n                <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n                  {{customerL2.name}}\n                </mat-option>\n              </mat-select>\n              <input matInput formControlName=\"customerL2Name\" *ngIf=\"ownerLevel > 1\" readonly />\n            </div>\n            <div class=\"error-box\" translate>thingplus.help.error-required-customerL2</div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex=\"100\"\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{error: editEntityFormGroup.get('label').hasError('required') || editEntityFormGroup.get('label').hasError('maxlength')}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.device-name</label>\n              <span> * </span>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <input matInput formControlName=\"label\" required />\n            </div>\n            <div class=\"error-box\" *ngIf=\"editEntityFormGroup.get('label').hasError('required')\" translate>\n              thingplus.help.error-required-device-name\n            </div>\n            <div class=\"error-box\" *ngIf=\"editEntityFormGroup.get('label').hasError('maxlength')\" translate>\n              thingplus.help.error-max-length\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box disabled\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.device-id</label>\n              <span> * </span>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <input matInput formControlName=\"name\" readonly />\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex=\"100\"\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{'error': ownerLevel <= 1 && editEntityFormGroup.get('model').hasError('required')}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.device-model</label>\n              <span> * </span>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select formControlName=\"model\" required>\n                <mat-option *ngFor=\"let model of modelList\" [value]=\"model.value\"> {{model.name}} </mat-option>\n              </mat-select>\n            </div>\n            <div class=\"error-box\" translate>thingplus.help.error-required-device-model</div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start end\">\n          <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.manager</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select formControlName=\"user\" (selectionChange)=\"setUser($event)\">\n                <mat-option *ngFor=\"let user of userList\" [value]=\"user.value\"> {{user.name}} </mat-option>\n              </mat-select>\n            </div>\n          </div>\n          <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box disabled\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\"></div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <input matInput [value]=\"selectedPhone\" readonly />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"step-content step-content-1\" *ngIf=\"currentStep == 1\" fxLayout=\"column\" fxLayoutGap=\"2em\">\n        <div fxLayout=\"column\" fxLayoutAlign=\"start center\" formGroupName=\"plannedOperationTime\">\n          <div class=\"header-row\" fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                <label class=\"side-label\" translate>thingplus.label.divide-by-weekday</label>\n                <div class=\"switch-track\" [ngClass]=\"{'active': divideWeek}\" (click)=\"divideWeek = !divideWeek\">\n                  <div class=\"switch-ball\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"sub-row\" fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n            <div\n              fxFlex\n              class=\"sub-row-box\"\n              fxLayout=\"row\"\n              fxLayoutAlign=\"space-between center\"\n              fxLayoutGap=\"0.6em\"\n              *ngIf=\"!divideWeek\"\n            >\n              <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\" class=\"input-box\">\n                <label class=\"side-label\" translate>thingplus.label.everyday</label>\n                <div fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.6em\">\n                  <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.6em\">\n                    <input\n                      class=\"input-small\"\n                      type=\"number\"\n                      step=\"1\"\n                      min=\"0\"\n                      max=\"24\"\n                      maxlength=\"2\"\n                      matInput\n                      formControlName=\"everydayHour\"\n                    />\n                  </div>\n                  <span class=\"unit-label\" translate>thingplus.time-format.hours</span>\n                  <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.6em\">\n                    <input\n                      class=\"input-small\"\n                      type=\"number\"\n                      step=\"1\"\n                      min=\"0\"\n                      max=\"60\"\n                      maxlength=\"2\"\n                      matInput\n                      formControlName=\"everydayMin\"\n                    />\n                  </div>\n\n                  <span class=\"unit-label\" translate>thingplus.time-format.minute</span>\n                </div>\n              </div>\n            </div>\n            <div fxFlex formArrayName=\"week\" *ngIf=\"divideWeek\">\n              <div\n                fxFlex\n                class=\"sub-row-box\"\n                fxLayout=\"row\"\n                fxLayoutAlign=\"space-between center\"\n                fxLayoutGap=\"0.6em\"\n                *ngFor=\"let day of getWeek().controls; index as i\"\n              >\n                <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\" class=\"input-box\">\n                  <label class=\"side-label\" translate>{{'thingplus.time-format.weekday-long.' + dayList[i]}}</label>\n                  <div fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.6em\" [formGroupName]=\"i\">\n                    <div class=\"value-box\" fxLayoutAlign=\"center center\">\n                      <input\n                        class=\"input-small\"\n                        type=\"number\"\n                        step=\"1\"\n                        min=\"0\"\n                        max=\"24\"\n                        maxlength=\"2\"\n                        matInput\n                        formControlName=\"hour\"\n                      />\n                    </div>\n                    <span class=\"unit-label\" translate>thingplus.time-format.hours</span>\n                    <div class=\"value-box\" fxLayoutAlign=\"center center\">\n                      <input\n                        class=\"input-small\"\n                        type=\"number\"\n                        step=\"1\"\n                        min=\"0\"\n                        max=\"60\"\n                        maxlength=\"2\"\n                        matInput\n                        formControlName=\"min\"\n                      />\n                    </div>\n                    <span class=\"unit-label\" translate>thingplus.time-format.minute</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"column\" fxLayoutAlign=\"start center\" formGroupName=\"trialConfig\">\n          <div class=\"header-row\" fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                <label class=\"side-label\" translate>thingplus.label.is-active-trial</label>\n                <div\n                  class=\"switch-track\"\n                  [ngClass]=\"{'active': isActiveTrial}\"\n                  (click)=\"isActiveTrial = !isActiveTrial\"\n                >\n                  <div class=\"switch-ball\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"sub-row\" fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n            <div\n              fxFlex\n              class=\"sub-row-box\"\n              fxLayout=\"row\"\n              fxLayoutAlign=\"space-between center\"\n              fxLayoutGap=\"0.6em\"\n              *ngIf=\"isActiveTrial\"\n            >\n              <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\" class=\"input-box\">\n                <label class=\"side-label\" translate>thingplus.label.trial-time</label>\n                <div fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.6em\">\n                  <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.6em\">\n                    <input class=\"input-small\" type=\"number\" step=\"1\" matInput formControlName=\"trialMin\" />\n                  </div>\n                  <span class=\"unit-label\"> ~ </span>\n                  <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.6em\">\n                    <input class=\"input-small\" type=\"number\" step=\"1\" matInput formControlName=\"trialMax\" />\n                  </div>\n\n                  <span class=\"unit-label\" translate>thingplus.time-format.minute</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"column\" fxLayoutAlign=\"start center\">\n          <div class=\"header-row\" fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                <label class=\"side-label\" translate>thingplus.label.no-work-state</label>\n                <div fxLayoutAlign=\"end center\" fxLayoutGap=\"1.8em\">\n                  <div\n                    class=\"radio-box\"\n                    [ngClass]=\"{'active': noWorkState == 'STOP'}\"\n                    fxLayoutAlign=\"start center\"\n                    fxLayoutGap=\"0.6em\"\n                    (click)=\"noWorkState = 'STOP'\"\n                  >\n                    <div class=\"radio-circle\"></div>\n                    <div class=\"radio-label\" translate>thingplus.state.stopped</div>\n                  </div>\n                  <div\n                    class=\"radio-box\"\n                    [ngClass]=\"{'active': noWorkState == 'WAIT'}\"\n                    fxLayoutAlign=\"start center\"\n                    fxLayoutGap=\"0.6em\"\n                    (click)=\"noWorkState = 'WAIT'\"\n                  >\n                    <div class=\"radio-circle\"></div>\n                    <div class=\"radio-label\" translate>thingplus.state.waiting</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"step-content step-content-2\" *ngIf=\"currentStep == 2\" fxLayout=\"column\" fxLayoutGap=\"2em\">\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{'error': ownerLevel <= 1 && editEntityFormGroup.get('stopPower').hasError('required')}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.parameter.stop-power</label>\n              <span> * </span>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <input matInput type=\"number\" formControlName=\"stopPower\" required />\n            </div>\n            <div class=\"description-box\"><b>*</b> {{'thingplus.help.error-required-stop-power' | translate}}</div>\n            <div class=\"error-box\" translate>thingplus.help.error-required-stop-power</div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{'error': ownerLevel <= 1 && editEntityFormGroup.get('waitPowerLimit').hasError('required')}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.parameter.wait-power-limit</label>\n              <span> * </span>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <input matInput type=\"number\" formControlName=\"waitPowerLimit\" required />\n            </div>\n            <div class=\"description-box\"><b>*</b> {{'thingplus.help.error-required-wait-power-limit' | translate}}</div>\n            <div class=\"error-box\" translate>thingplus.help.error-required-wait-power-limit</div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{'error': ownerLevel <= 1 && editEntityFormGroup.get('workPowerLimit').hasError('required')}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.parameter.work-power-limit</label>\n              <span> * </span>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <input matInput type=\"number\" formControlName=\"workPowerLimit\" required />\n            </div>\n            <div class=\"description-box\"><b>*</b> {{'thingplus.help.error-required-work-power-limit' | translate}}</div>\n            <div class=\"error-box\" translate>thingplus.help.error-required-work-power-limit</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"step-content step-content-3\" *ngIf=\"currentStep == 3\" fxLayout=\"column\" fxLayoutGap=\"2em\">\n        <div fxLayout=\"column\" fxLayoutGap=\"2em\" formGroupName=\"electricLimit\">\n          <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n            <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n                <label>{{'thingplus.parameter.volt' | translate}} {{'thingplus.label.limit-high' | translate}}</label>\n              </div>\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n                <input matInput type=\"number\" formControlName=\"voltHigh\" />\n              </div>\n            </div>\n            <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n                <label>{{'thingplus.parameter.volt' | translate}} {{'thingplus.label.limit-low' | translate}}</label>\n              </div>\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n                <input matInput type=\"number\" formControlName=\"voltLow\" />\n              </div>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n            <div fxFlex=\"50\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n                <label>\n                  {{'thingplus.parameter.volt-imbal' | translate}} {{'thingplus.label.limit-high' | translate}}\n                </label>\n              </div>\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n                <input matInput type=\"number\" formControlName=\"voltImbal\" />\n              </div>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n            <div fxFlex=\"50\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n                <label>{{'thingplus.parameter.curr' | translate}} {{'thingplus.label.limit-high' | translate}}</label>\n              </div>\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n                <input matInput type=\"number\" formControlName=\"curr\" />\n              </div>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n            <div fxFlex=\"50\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n                <label\n                  >{{'thingplus.parameter.curr-imbal' | translate}} {{'thingplus.label.limit-high' | translate}}</label\n                >\n              </div>\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n                <input matInput type=\"number\" formControlName=\"currImbal\" />\n              </div>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n            <div fxFlex=\"50\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n                <label\n                  >{{'thingplus.parameter.power-factor' | translate}} {{'thingplus.label.limit-low' | translate}}</label\n                >\n              </div>\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n                <input matInput type=\"number\" formControlName=\"pf\" />\n              </div>\n            </div>\n          </div>\n          <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n            <div fxFlex=\"50\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n              <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n                <label>{{'thingplus.parameter.thd' | translate}} {{'thingplus.label.limit-high' | translate}}</label>\n              </div>\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n                <input matInput type=\"number\" formControlName=\"thd\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button prev-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"prevStep()\"\n        *ngIf=\"currentStep > 0\"\n        translate\n      >\n        thingplus.action.prev-step\n      </button>\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        *ngIf=\"currentStep == 0\"\n        translate\n      >\n        thingplus.action.close\n      </button>\n      <button\n        class=\"button next-button\"\n        type=\"button\"\n        (click)=\"nextStep()\"\n        [disabled]=\"(isLoading$ | async) || editEntityForm.invalid\"\n        *ngIf=\"currentStep < 3\"\n        translate\n      >\n        thingplus.action.next-step\n      </button>\n      <button\n        class=\"button save-button\"\n        type=\"submit\"\n        [disabled]=\"(isLoading$ | async) || editEntityForm.invalid\"\n        *ngIf=\"currentStep == 3\"\n        translate\n      >\n        thingplus.action.save\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#edit-device-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  min-height: 70vh;\n}\n#edit-device-form input[type='number']::-webkit-outer-spin-button,\n#edit-device-form input[type='number']::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n#edit-device-form input[type='number'] {\n  -moz-appearance: textfield;\n}\n#edit-device-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#edit-device-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#edit-device-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-device-form .dialog-close i {\n  font-size: 1.4em;\n}\n#edit-device-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#edit-device-form .step-controller {\n  padding: 2em 4em;\n}\n#edit-device-form .step {\n  position: relative;\n  display: inline-block;\n  padding: 0.3em;\n  background-color: var(--tb-service-border-1);\n  border: 1px solid var(--tb-service-border-1);\n  color: var(--tb-service-border-1);\n  transition-property: color, border-color, background-color;\n  transition-duration: var(--tb-config-color-duration);\n  border-radius: 50%;\n  cursor: pointer;\n}\n#edit-device-form .step i {\n  font-size: 1.4em;\n}\n#edit-device-form .step.prev {\n  background-color: var(--tb-service-accent);\n  border: 0.1em solid var(--tb-service-accent);\n  color: var(--tb-service-font-0);\n}\n#edit-device-form .step.current {\n  background-color: var(--tb-service-font-0);\n  border: 0.3em solid var(--tb-service-accent);\n  color: var(--tb-service-font-0);\n}\n#edit-device-form .step:after {\n  content: attr(data-label);\n  position: absolute;\n  top: 125%;\n  left: 50%;\n  transform: translateX(-50%);\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n  font-size: 1.2em;\n}\n#edit-device-form .step.current:after {\n  color: var(--tb-service-font-5);\n}\n#edit-device-form .step-progress-line {\n  width: 100%;\n  height: 0.2em;\n  background-color: var(--tb-service-border-1);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-device-form .step-progress-line.prev {\n  background-color: var(--tb-service-accent);\n}\n\n#edit-device-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#edit-device-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#edit-device-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#edit-device-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#edit-device-form .header-row,\n#edit-device-form .sub-row {\n  width: 100%;\n}\n\n#edit-device-form .header-row {\n  background-color: var(--tb-service-background-1);\n  padding: 1.6em;\n  border: 1px solid var(--tb-service-border-0);\n}\n\n#edit-device-form .sub-row-box {\n  padding: 1.6em;\n  border: 1px solid var(--tb-service-border-0);\n  border-top: none;\n}\n\n#edit-device-form .label-box {\n  color: var(--tb-service-font-3);\n  font-size: 1.2em;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-device-form .input-box.disabled .label-box {\n  color: var(--tb-service-font-1);\n}\n#edit-device-form .value-box {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-device-form .value-box.no-border {\n  border: none !important;\n}\n\n#edit-device-form .input-box:not(.disabled) .value-box:hover {\n  border-color: var(--tb-service-border-3);\n}\n#edit-device-form .input-box:not(.disabled) .value-box:focus-within {\n  border-color: var(--tb-service-accent);\n  caret-color: var(--tb-service-accent);\n}\n#edit-device-form .value-box *::placeholder {\n  color: var(--tb-service-font-4);\n}\n#edit-device-form .value-box input {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  caret-color: var(--tb-service-accent);\n}\n#edit-device-form .input-box.disabled .value-box {\n  background-color: var(--tb-service-background-1);\n}\n#edit-device-form .input-box.disabled .value-box input {\n  color: var(--tb-service-font-2);\n  cursor: default;\n}\n#edit-device-form .side-label {\n  color: var(--tb-service-font-4);\n  font-size: 1.4em;\n}\n#edit-device-form .switch-track {\n  position: relative;\n  width: 3.6em;\n  height: 1.6em;\n  border-radius: 0.8em;\n  background-color: var(--tb-service-border-1);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n  cursor: pointer;\n}\n#edit-device-form .switch-track.active {\n  background-color: var(--tb-service-accent);\n}\n#edit-device-form .switch-ball {\n  position: absolute;\n  top: 50%;\n  left: 0.8em;\n  transform: translate(-50%, -50%);\n  width: 1.2em;\n  height: 1.2em;\n  border-radius: 0.6em;\n  background-color: var(--tb-service-background-0);\n  transition-property: left;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-device-form .switch-track.active .switch-ball {\n  left: calc(100% - 0.8em);\n}\n#edit-device-form .radio-box .radio-circle {\n  width: 2em;\n  height: 2em;\n  border-radius: 50%;\n  border: 1px solid var(--tb-service-border-1);\n}\n#edit-device-form .radio-box .radio-circle {\n  width: 2em;\n  height: 2em;\n  border-radius: 50%;\n  border: 0.1em solid var(--tb-service-border-1);\n}\n#edit-device-form .radio-box.active .radio-circle {\n  width: 2em;\n  height: 2em;\n  border: 0.6em solid var(--tb-service-accent);\n}\n#edit-device-form .radio-box .radio-label {\n  font-size: 1.4em;\n  color: var(--tb-service-font-4);\n}\n#edit-device-form .input-small {\n  width: 2em;\n}\n#edit-device-form .unit-label {\n  color: var(--tb-service-font-4);\n  font-size: 1.4em;\n}\n\n#edit-device-form .value-box .mat-select-trigger {\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  line-height: 1;\n}\n#edit-device-form .value-box .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n#edit-device-form .value-box .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n#edit-device-form .description-box {\n  margin-top: calc(0.6em / 1.2);\n  color: var(--tb-service-font-3);\n  font-size: 1.2em;\n}\n#edit-device-form .description-box b {\n  color: var(--tb-service-accent);\n}\n#edit-device-form .error-box {\n  display: none;\n  color: var(--tb-service-warn);\n  font-size: 1.2em;\n}\n#edit-device-form .input-box.error .label-box {\n  color: var(--tb-service-warn);\n}\n#edit-device-form .input-box.error .value-box {\n  border: 1px solid var(--tb-service-warn);\n}\n#edit-device-form .input-box.error .description-box {\n  display: none;\n}\n#edit-device-form .input-box.error .error-box {\n  display: block;\n  margin-top: calc(0.6em / 1.2);\n}\n\n#edit-device-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#edit-device-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-device-form .save-button,\n#edit-device-form .next-button {\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-accent);\n}\n#edit-device-form .save-button:hover,\n#edit-device-form .next-button:hover {\n  background-color: var(--tb-service-accent-hover);\n}\n#edit-device-form .save-button:active,\n#edit-device-form .next-button:active {\n  background-color: var(--tb-service-accent-pressed);\n}\n#edit-device-form .close-button,\n#edit-device-form .prev-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#edit-device-form .close-button:hover,\n#edit-device-form .prev-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#edit-device-form .close-button:active,\n#edit-device-form .prev-button:active {\n  background-color: var(--tb-service-border-0);\n}\n#edit-device-form .button:disabled,\n#edit-device-form .button[disabled] {\n  background-color: var(--tb-service-font-1);\n  color: var(--tb-service-font-0);\n  cursor: default;\n}\n\n@media (min-width: 960px) {\n  #edit-device-form form {\n    width: 24vw;\n  }\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nconst t = widgetContext.custom.t;\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n  customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n  let vm = instance;\n  vm.ownerId = widgetContext.defaultSubscription.configuredDatasources[0].entity.id;\n  vm.ownerLevel = widgetContext.$scope.ownerLevel;\n  vm.t = t;\n  vm.customerL1List = [{ name: t('thingplus.selector.select-customerL1'), value: '' }];\n  vm.customerL2List = [{ name: t('thingplus.selector.select-customerL2'), value: '' }];\n  vm.userList = [{ name: t('thingplus.selector.select-manager'), value: '', phone: '-' }];\n  vm.selectedPhone = '-';\n  if (vm.ownerLevel == 0) {\n    vm.customerL1List = vm.customerL1List.concat(\n      widgetContext.custom.customerL1List\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  }\n  if (vm.ownerLevel <= 1) {\n    vm.customerL2List = vm.customerL2List.concat(\n      widgetContext.custom.customerL2List\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  }\n  vm.userList = vm.userList.concat(\n    widgetContext.custom.userList\n      .map(x => {\n        return {\n          name: x.details.firstName,\n          value: x.id.id,\n          phone: x.details.additionalInfo && x.details.additionalInfo.phone ? x.details.additionalInfo.phone : '-',\n          email: x.details.email,\n        };\n      })\n      .sort((a, b) => {\n        if (a.name > b.name) return 1;\n        if (a.name < b.name) return -1;\n        return 0;\n      })\n  );\n\n  vm.modelList = [\n    { name: t('thingplus.selector.model-selection'), value: '' },\n    { name: t('thingplus.device-model.YMC-430.summary'), value: 'YMC-430' },\n    { name: t('thingplus.device-model.M2-5AX_20K.summary'), value: 'M2-5AX_20K' },\n    { name: t('thingplus.device-model.YBM-1218V.summary'), value: 'YBM-1218V' },\n    { name: t('thingplus.device-model.RB-5M.summary'), value: 'RB-5M' },\n    { name: t('thingplus.device-model.WINSTAR-SP.summary'), value: 'WINSTAR-SP' },\n    { name: t('thingplus.device-model.UJG-35.summary'), value: 'UJG-35' },\n    { name: t('thingplus.device-model.AP450L.summary'), value: 'AP450L' },\n    { name: t('thingplus.device-model.AQ1200L.summary'), value: 'AQ1200L' },\n    { name: t('thingplus.device-model.AP3L.summary'), value: 'AP3L' },\n    { name: t('thingplus.device-model.AG100L.summary'), value: 'AG100L' },\n    { name: t('thingplus.device-model.TRULASER_CELL_7040.summary'), value: 'TRULASER_CELL_7040' },\n    { name: t('thingplus.device-model.BC-3020_DYNAMIC.summary'), value: 'BC-3020_DYNAMIC' },\n    { name: t('thingplus.device-model.GLS-150GL.summary'), value: 'GLS-150GL' },\n    { name: t('thingplus.device-model.DE4P-2500.summary'), value: 'DE4P-2500' },\n    { name: t('thingplus.device-model.DE4P-2000.summary'), value: 'DE4P-2000' },\n    { name: t('thingplus.device-model.DE2P-1200.summary'), value: 'DE2P-1200' },\n    { name: t('thingplus.device-model.AUH-125H.summary'), value: 'AUH-125H' },\n    { name: t('thingplus.device-model.ACCURA-II.summary'), value: 'ACCURA-II' },\n    { name: t('thingplus.device-model.CRYSTA-APEX_S_122010.summary'), value: 'CRYSTA-APEX_S_122010' },\n    { name: t('thingplus.device-model.LHM-V2.summary'), value: 'LHM-V2' },\n  ];\n\n  vm.currentStep = 0;\n  vm.originCustomerL2 = widgetContext.custom.relations[entityId.id].parent.id.id;\n  vm.originUser = additionalParams.user || '';\n  if (vm.userList.findIndex(x => x.value == vm.originUser) == -1) {\n    vm.originUser = '';\n  }\n  let targetIndex = vm.userList.findIndex(x => x.value == vm.originUser);\n  if (targetIndex != -1) {\n    vm.selectedPhone = vm.userList[targetIndex].phone;\n  }\n  vm.dayList = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\n  let plannedOperationTime = {};\n  if (additionalParams.plannedOperationTime) {\n    plannedOperationTime = JSON.parse(additionalParams.plannedOperationTime);\n  }\n  vm.divideWeek = plannedOperationTime.isDivideByWeek;\n  plannedOperationTime.everyday = toDate(plannedOperationTime.everyday);\n  for (let i in plannedOperationTime.week) {\n    plannedOperationTime.week[i] = toDate(plannedOperationTime.week[i]);\n  }\n  let trialConfig = {};\n  if (additionalParams.trialConfig) {\n    trialConfig = JSON.parse(additionalParams.trialConfig);\n  }\n  vm.isActiveTrial = trialConfig.isActive;\n  let electricLimit = {};\n  if (additionalParams.electricLimit) {\n    electricLimit = JSON.parse(additionalParams.electricLimit);\n  }\n  vm.noWorkState = additionalParams.noWorkState || 'STOP';\n  vm.originWaitPowerLimit = additionalParams.TP_WaitPowerLimit;\n  vm.originWorkPowerLimit = additionalParams.TP_WorkPowerLimit;\n  vm.editEntityFormGroup = vm.fb.group({\n    customerL1Name: [additionalParams.customerL1Name],\n    customerL2Name: [additionalParams.customerL2Name],\n    name: [entityName],\n    label: [entityLabel, [vm.validators.required, vm.validators.maxLength(24)]],\n    model: [additionalParams.model],\n    user: [additionalParams.user || ''],\n    stopPower: [additionalParams.stopPower || 0, [vm.validators.required]],\n    waitPowerLimit: [additionalParams.TP_WaitPowerLimit || 50, [vm.validators.required]],\n    workPowerLimit: [additionalParams.TP_WorkPowerLimit || 300, [vm.validators.required]],\n    plannedOperationTime: vm.fb.group({\n      everydayHour: [plannedOperationTime.everyday[0]],\n      everydayMin: [plannedOperationTime.everyday[1]],\n      week: vm.fb.array([\n        vm.fb.group({ hour: [plannedOperationTime.week[0][0]], min: [plannedOperationTime.week[0][1]] }),\n        vm.fb.group({ hour: [plannedOperationTime.week[1][0]], min: [plannedOperationTime.week[1][1]] }),\n        vm.fb.group({ hour: [plannedOperationTime.week[2][0]], min: [plannedOperationTime.week[2][1]] }),\n        vm.fb.group({ hour: [plannedOperationTime.week[3][0]], min: [plannedOperationTime.week[3][1]] }),\n        vm.fb.group({ hour: [plannedOperationTime.week[4][0]], min: [plannedOperationTime.week[4][1]] }),\n        vm.fb.group({ hour: [plannedOperationTime.week[5][0]], min: [plannedOperationTime.week[5][1]] }),\n        vm.fb.group({ hour: [plannedOperationTime.week[6][0]], min: [plannedOperationTime.week[6][1]] }),\n      ]),\n    }),\n    trialConfig: vm.fb.group({\n      isActive: [trialConfig.isActive || false],\n      trialMin: [trialConfig.trialMin || 20],\n      trialMax: [trialConfig.trialMax || 40],\n    }),\n    electricLimit: vm.fb.group({\n      voltHigh: [electricLimit.voltHigh],\n      voltLow: [electricLimit.voltLow],\n      curr: [electricLimit.curr],\n      voltImbal: [electricLimit.voltImbal],\n      currImbal: [electricLimit.currImbal],\n      pf: [electricLimit.pf],\n      thd: [electricLimit.thd],\n    }),\n  });\n\n  if (vm.ownerLevel == 0) {\n    vm.editEntityFormGroup.controls.customerL1 = vm.fb.control(\n      widgetContext.custom.relations[entityId.id].parent.parent.id.id\n    );\n  }\n  if (vm.ownerLevel <= 1) {\n    widgetContext.custom.relations[entityId.id].parent.id.id;\n    vm.editEntityFormGroup.controls.customerL2 = vm.fb.control(\n      widgetContext.custom.relations[entityId.id].parent.id.id,\n      [vm.validators.required]\n    );\n  }\n  getDevice(entityId.id).subscribe(device => {\n    vm.originDevice = device;\n  });\n\n  vm.getWeek = function () {\n    return this.editEntityFormGroup.get('plannedOperationTime').controls['week'];\n  };\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  vm.save = function () {\n    vm.editEntityFormGroup.markAsPristine();\n    let customerL2Id = vm.editEntityFormGroup.get('customerL2').value || entityId.id;\n    let userId = vm.editEntityFormGroup.get('user').value;\n    vm.isRelationChange = false;\n    if (vm.originCustomerL2 != customerL2Id) {\n      vm.isRelationChange = true;\n    }\n    vm.isManagerChange = false;\n    if (vm.originUser != userId) {\n      vm.isManagerChange = true;\n    }\n    saveDevice().subscribe(device => {\n      let taskList = [saveAttribute(device), saveTelemetry(device)];\n      if (vm.isRelationChange) {\n        taskList.push(\n          entityRelationService.deleteRelation(\n            { entityType: 'CUSTOMER', id: vm.originCustomerL2 },\n            'Contains',\n            device.id\n          )\n        );\n        taskList.push(\n          entityRelationService.saveRelation({\n            from: {\n              entityType: 'CUSTOMER',\n              id: customerL2Id,\n            },\n            to: device.id,\n            type: 'Contains',\n          })\n        );\n      }\n      if (vm.isManagerChange) {\n        if (vm.originUser && vm.originUser != '') {\n          taskList.push(\n            entityRelationService.deleteRelation({ entityType: 'USER', id: vm.originUser }, 'Manages', device.id, {\n              ignoreErrors: true,\n            })\n          );\n        }\n        if (userId != '') {\n          taskList.push(\n            entityRelationService.saveRelation({\n              from: {\n                entityType: 'USER',\n                id: userId,\n              },\n              to: device.id,\n              type: 'Manages',\n            })\n          );\n        }\n      }\n\n      widgetContext.rxjs.forkJoin(taskList).subscribe(() => {\n        if (vm.isRelationChange) {\n          reassign(device);\n        } else {\n          widgetContext.updateAliases();\n          vm.dialogRef.close(null);\n        }\n      });\n    });\n  };\n  vm.selectStep = function (e, index) {\n    console.log(vm.editEntityFormGroup);\n    if (vm.editEntityFormGroup.invalid) return;\n    vm.currentStep = index;\n  };\n  vm.prevStep = function () {\n    vm.currentStep--;\n  };\n  vm.nextStep = function () {\n    vm.currentStep++;\n  };\n  vm.setCustomerL1 = function (e) {\n    let customerL1 = vm.editEntityFormGroup.get('customerL1').value;\n    vm.customerL2List = [{ name: t('thingplus.selector.select-customerL2'), value: '' }];\n    vm.editEntityFormGroup.patchValue(\n      {\n        customerL2: '',\n      },\n      { emitEvent: false }\n    );\n    vm.customerL2List = vm.customerL2List.concat(\n      widgetContext.custom.customerL2List\n        .filter(x => {\n          return customerL1 == '' || x.parent.id.id == customerL1;\n        })\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  };\n  vm.setUser = function (e) {\n    let targetIndex = vm.userList.findIndex(x => x.value == e.value);\n    if (targetIndex != -1) {\n      vm.selectedPhone = vm.userList[targetIndex].phone;\n    }\n  };\n\n  function getDevice(deviceId) {\n    return deviceService.getDevice(deviceId);\n  }\n\n  function saveDevice() {\n    let label = vm.editEntityFormGroup.get('label').value;\n\n    if (_.isNil(vm.originDevice)) return;\n    vm.originDevice.label = label;\n    return deviceService.saveDevice(vm.originDevice);\n  }\n\n  function reassign(device) {\n    return deviceService.unassignDeviceFromCustomer(device.id.id).subscribe(() => {\n      let customerL2Id = vm.editEntityFormGroup.get('customerL2').value || entityId.id;\n      deviceService.assignDeviceToCustomer(customerL2Id, device.id.id).subscribe(() => {\n        widgetContext.updateAliases();\n        vm.dialogRef.close(null);\n      });\n    });\n  }\n\n  function saveAttribute(device) {\n    let customerL2Id = vm.editEntityFormGroup.get('customerL2').value || entityId.id;\n    let customerL2 = widgetContext.custom.relations[customerL2Id];\n    let customerL1Name = customerL2.parent.name;\n    let customerL2Name = customerL2.name;\n    let model = vm.editEntityFormGroup.get('model').value;\n    let user = vm.editEntityFormGroup.get('user').value;\n    let userIndex = vm.userList.findIndex(x => x.value == user);\n    let phone = vm.userList[userIndex].phone;\n    let manager = vm.userList[userIndex].name;\n    let email = vm.userList[userIndex].email;\n\n    let plannedOperationTime = vm.editEntityFormGroup.get('plannedOperationTime').value;\n    plannedOperationTime.isDivideByWeek = vm.divideWeek;\n    plannedOperationTime.everyday = getTime(plannedOperationTime.everydayHour, plannedOperationTime.everydayMin);\n    for (let i in plannedOperationTime.week) {\n      plannedOperationTime.week[i] = getTime(plannedOperationTime.week[i].hour, plannedOperationTime.week[i].min);\n    }\n    let trialConfig = vm.editEntityFormGroup.get('trialConfig').value;\n    trialConfig.isActive = vm.isActiveTrial;\n\n    let stopPower = vm.editEntityFormGroup.get('stopPower').value;\n    let electricLimit = vm.editEntityFormGroup.get('electricLimit').value;\n\n    let attributeBody = [\n      { key: 'customerL1Name', value: customerL1Name },\n      { key: 'customerL2Name', value: customerL2Name },\n      { key: 'model', value: model },\n      { key: 'user', value: user },\n      { key: 'plannedOperationTime', value: plannedOperationTime },\n      { key: 'trialConfig', value: trialConfig },\n      { key: 'noWorkState', value: vm.noWorkState },\n      { key: 'stopPower', value: stopPower },\n      { key: 'electricLimit', value: electricLimit },\n      { key: 'phone', value: phone },\n      { key: 'manager', value: manager },\n      { key: 'email', value: email },\n    ];\n    return attributeService.saveEntityAttributes(device.id, 'SERVER_SCOPE', attributeBody);\n  }\n  function saveTelemetry(device) {\n    let waitPowerLimit = vm.editEntityFormGroup.get('waitPowerLimit').value;\n    let workPowerLimit = vm.editEntityFormGroup.get('workPowerLimit').value;\n\n    let telemetryBody = [];\n    if (vm.originWaitPowerLimit != waitPowerLimit) {\n      telemetryBody.push({ key: 'TP_WaitPowerLimit', value: waitPowerLimit });\n    }\n    if (vm.originWorkPowerLimit != workPowerLimit) {\n      telemetryBody.push({ key: 'TP_WorkPowerLimit', value: workPowerLimit });\n    }\n    return attributeService.saveEntityTimeseries(device.id, 'TELEMETRY', telemetryBody);\n  }\n  function getTime(hour, min) {\n    let result = hour * 3600000 + min * 60000;\n    if (result > 86400000) {\n      result = 86400000;\n    }\n    return result;\n  }\n  function toDate(value) {\n    if (isNaN(Number(value))) return [8, 0];\n    if (value > 86400000) {\n      value = 86400000;\n    }\n    let hour = Math.floor(value / 3600000);\n    let temp = value % 3600000;\n    let min = Math.floor(temp / 60000);\n    return [hour, min];\n  }\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "56807145-0b8f-3cac-a2b8-1e1419cbd8de"
              },
              {
                "name": "Delete",
                "icon": "delete",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"delete-device-form\">\n  <form\n    #deleteEntityForm=\"ngForm\"\n    [formGroup]=\"deleteEntityFormGroup\"\n    (ngSubmit)=\"save()\"\n    style=\"font-size: {{calcFontSize()}}px;\"\n  >\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\" translate>thingplus.dialog.delete-device-title</span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 4px\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n      <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\n        <div class=\"label\">{{'thingplus.dialog.delete-device-content' | translate:{entityName: entityName} }}</div>\n      </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        translate\n      >\n        thingplus.action.close\n      </button>\n      <button\n        class=\"button delete-button\"\n        type=\"submit\"\n        [disabled]=\"(isLoading$ | async) || deleteEntityForm.invalid\"\n        translate\n      >\n        thingplus.action.delete\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#delete-device-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#delete-device-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#delete-device-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#delete-device-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#delete-device-form .dialog-close i {\n  font-size: 1.4em;\n}\n#delete-device-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#delete-device-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#delete-device-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#delete-device-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#delete-device-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#delete-device-form .label {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n}\n\n#delete-device-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#delete-device-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#delete-device-form .delete-button {\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-warn);\n}\n#delete-device-form .delete-button:hover {\n  background-color: var(--tb-service-warn-hover);\n}\n#delete-device-form .delete-button:active {\n  background-color: var(--tb-service-warn-pressed);\n}\n#delete-device-form .close-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#delete-device-form .close-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#delete-device-form .close-button:active {\n  background-color: var(--tb-service-border-0);\n}\n\n@media (min-width: 960px) {\n  #delete-device-form form {\n    width: 24vw;\n  }\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n\nconst JWT_TOKEN = window.localStorage.getItem('jwt_token');\nconst t = widgetContext.custom.t;\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n  customDialog.customDialog(htmlTemplate, DeleteEntityDialogController).subscribe();\n}\n\nfunction DeleteEntityDialogController(instance) {\n  let vm = instance;\n  vm.entityName = entityName;\n  vm.deleteEntityFormGroup = vm.fb.group({});\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  vm.save = function () {\n    vm.deleteEntityFormGroup.markAsPristine();\n    deleteDeviceTest(entityId).subscribe(\n      function success() {\n        widgetContext.updateAliases();\n        vm.dialogRef.close(null);\n      },\n      function fail() {\n        showErrorDialog();\n        vm.dialogRef.close(null);\n      }\n    );\n  };\n\n  // test\n  function deleteDeviceTest(entityId) {\n    return deviceService.deleteDevice(entityId.id);\n  }\n\n  function deleteDevice(entityId) {\n    const JWT_TOKEN = window.localStorage.getItem('jwt_token');\n    let option = {\n      headers: {\n        'X-authorization': `Bearer ${JWT_TOKEN}`,\n        'Content-Type': 'application/json',\n      },\n    };\n\n    return widgetContext.http.delete(`https://devicereg.thingplus.net/api/regdevice/${entityId.id}`, option);\n  }\n\n  function showErrorDialog() {\n    let title = t('thingplus.dialog.error-delete-title');\n    let content = t('thingplus.dialog.error-delete-content');\n    dialogs.alert(title, content, 'CLOSE').subscribe(function (result) {});\n  }\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "85a8928c-e9af-8316-6612-0301b4854b34"
              }
            ],
            "customAction": [
              {
                "name": "Activate",
                "icon": "more_horiz",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"activate-device-form\">\n  <form\n    #activateEntityForm=\"ngForm\"\n    [formGroup]=\"activateEntityFormGroup\"\n    (ngSubmit)=\"save()\"\n    style=\"font-size: {{calcFontSize()}}px;\"\n  >\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\" translate>\n        {{ activate ? 'thingplus.dialog.inactivate-device-title' : 'thingplus.dialog.activate-device-title' }}\n      </span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 4px\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\" fxLayoutGap=\"2em\">\n      <div fxLayout=\"row\">\n        <div class=\"label\">\n          {{ activate ? ('thingplus.dialog.inactivate-device-content' | translate:{entityName: entityName}) :\n          ('thingplus.dialog.activate-device-content' | translate:{entityName: entityName}) }}\n        </div>\n      </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        translate\n      >\n        thingplus.action.close\n      </button>\n      <button class=\"button activate-button\" type=\"submit\" [disabled]=\"(isLoading$ | async)\" translate>\n        {{activate ? 'thingplus.action.inactivate' : 'thingplus.action.activate'}}\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#activate-device-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#activate-device-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#activate-device-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#activate-device-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#activate-device-form .dialog-close i {\n  font-size: 1.4em;\n}\n#activate-device-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#activate-device-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#activate-device-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#activate-device-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#activate-device-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#activate-device-form .label {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n  white-space: pre-line;\n}\n\n#activate-device-form .help-box {\n  color: var(--tb-service-accent);\n  font-size: 1.2em;\n}\n\n#activate-device-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#activate-device-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#activate-device-form .activate-button {\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-accent);\n}\n#activate-device-form .activate-button:hover {\n  background-color: var(--tb-service-accent-hover);\n}\n#activate-device-form .activate-button:active {\n  background-color: var(--tb-service-accent-pressed);\n}\n#activate-device-form .close-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#activate-device-form .close-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#activate-device-form .close-button:active {\n  background-color: var(--tb-service-border-0);\n}\n\n@media (min-width: 960px) {\n  #activate-device-form form {\n    width: 24vw;\n  }\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nconst t = widgetContext.custom.t;\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n  customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n  let vm = instance;\n  vm.entityName = entityName;\n  vm.activateEntityFormGroup = vm.fb.group({});\n  vm.activate = additionalParams.TP_ActivationState == 'true';\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  vm.save = function () {\n    vm.activateEntityFormGroup.markAsPristine();\n    saveTelemetry(entityId).subscribe(() => {\n      widgetContext.updateAliases();\n      vm.dialogRef.close(null);\n    });\n  };\n\n  function saveTelemetry(device) {\n    let telemetryBody = [{ key: 'TP_ActivationState', value: !vm.activate }];\n    return attributeService.saveEntityTimeseries(device, 'TELEMETRY', telemetryBody);\n  }\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "1bf54154-7e5c-336a-630c-a76765f082b4"
              }
            ],
            "headerButton": []
          }
        },
        "row": 0,
        "col": 0,
        "id": "00a0cf76-9330-111a-ce12-e7be4405c77b"
      },
      "22030db7-66f1-d2ce-279f-dd187e7ecfea": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_selector_widgets",
        "typeAlias": "simple_workspace_selector",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 9,
        "sizeY": 1,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "979a4eba-cc79-33a5-d5d1-d76037f21b2b",
              "filterId": null,
              "dataKeys": []
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "rgba(255,255,255,0)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 1630
            }
          },
          "title": "thingplus.menu.device-management",
          "showTitleIcon": false,
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default"
          },
          "noDataDisplayMessage": "",
          "showLegend": false,
          "titleTooltip": "",
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "2em",
            "font-weight": 500,
            "letter-spacing": "-0.05em",
            "color": "var(--tb-service-font-5)"
          }
        },
        "row": 0,
        "col": 0,
        "id": "22030db7-66f1-d2ce-279f-dd187e7ecfea"
      }
    },
    "states": {
      "default": {
        "name": "{i18n:thingplus.menu.device-management}",
        "root": true,
        "layouts": {
          "main": {
            "widgets": {
              "00a0cf76-9330-111a-ce12-e7be4405c77b": {
                "sizeX": 95,
                "sizeY": 44,
                "row": 4,
                "col": 1
              },
              "22030db7-66f1-d2ce-279f-dd187e7ecfea": {
                "sizeX": 97,
                "sizeY": 4,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "var(--tb-service-background-4)",
              "columns": 97,
              "margin": 0,
              "marginUnit": "px",
              "mobileMargin": 0,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": false,
              "mobileRowHeight": 70
            }
          }
        }
      }
    },
    "entityAliases": {
      "979a4eba-cc79-33a5-d5d1-d76037f21b2b": {
        "id": "979a4eba-cc79-33a5-d5d1-d76037f21b2b",
        "alias": "Current User Owner",
        "filter": {
          "type": "singleEntity",
          "resolveMultiple": false,
          "singleEntity": {
            "entityType": "CURRENT_USER_OWNER",
            "id": "13814000-1dd2-11b2-8080-808080808080"
          }
        }
      },
      "23c2e823-d689-a1fc-3554-98e7c4136393": {
        "id": "23c2e823-d689-a1fc-3554-98e7c4136393",
        "alias": "Devices",
        "filter": {
          "type": "deviceSearchQuery",
          "resolveMultiple": true,
          "rootStateEntity": true,
          "stateEntityParamName": null,
          "defaultStateEntity": {
            "entityType": "CURRENT_USER_OWNER",
            "id": "13814000-1dd2-11b2-8080-808080808080"
          },
          "rootEntity": null,
          "direction": "FROM",
          "maxLevel": 3,
          "fetchLastLevelOnly": false,
          "relationType": "Contains",
          "deviceTypes": [
            "device"
          ]
        }
      },
      "9b71d45f-ce02-d23a-2edd-ec3fb45de394": {
        "id": "9b71d45f-ce02-d23a-2edd-ec3fb45de394",
        "alias": "Users",
        "filter": {
          "type": "relationsQuery",
          "resolveMultiple": true,
          "rootStateEntity": true,
          "stateEntityParamName": null,
          "defaultStateEntity": {
            "entityType": "CURRENT_USER_OWNER",
            "id": "13814000-1dd2-11b2-8080-808080808080"
          },
          "rootEntity": null,
          "direction": "FROM",
          "maxLevel": 3,
          "fetchLastLevelOnly": false,
          "filters": [
            {
              "relationType": "Contains",
              "entityTypes": [
                "USER"
              ]
            }
          ]
        }
      }
    },
    "filters": {},
    "timewindow": {
      "displayValue": "",
      "hideInterval": false,
      "hideAggregation": false,
      "hideAggInterval": false,
      "hideTimezone": false,
      "selectedTab": 0,
      "realtime": {
        "realtimeType": 0,
        "interval": 1000,
        "timewindowMs": 60000,
        "quickInterval": "CURRENT_DAY"
      },
      "history": {
        "historyType": 0,
        "interval": 1000,
        "timewindowMs": 60000,
        "fixedTimewindow": {
          "startTimeMs": 1674707664439,
          "endTimeMs": 1674794064439
        },
        "quickInterval": "CURRENT_DAY"
      },
      "aggregation": {
        "type": "AVG",
        "limit": 25000
      }
    },
    "settings": {
      "stateControllerId": "entity",
      "showTitle": false,
      "showDashboardsSelect": false,
      "showEntitiesSelect": false,
      "showDashboardTimewindow": false,
      "showDashboardExport": false,
      "toolbarAlwaysOpen": true,
      "titleColor": "rgba(0,0,0,0.870588)",
      "showDashboardLogo": false,
      "dashboardLogoUrl": null,
      "hideToolbar": true,
      "showFilters": false,
      "showUpdateDashboardImage": false
    }
  },
  "name": "Device Management"
}