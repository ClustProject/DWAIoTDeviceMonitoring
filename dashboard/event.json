{
  "title": "Event",
  "image": null,
  "mobileHide": false,
  "mobileOrder": null,
  "configuration": {
    "description": "",
    "widgets": {
      "984f4fbf-0dbb-286b-3ae5-7e33397148e8": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_selector_widgets",
        "typeAlias": "target_selector",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 8,
        "sizeY": 1,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "df94890c-7d0f-6a19-4bdb-ac4261c9450f",
              "filterId": null,
              "dataKeys": []
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "rgba(255,255,255,0)",
          "color": "var(--tb-service-accent)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 1630
            }
          },
          "title": "thingplus.menu.event",
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default"
          },
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "2em",
            "font-weight": 500,
            "letter-spacing": "-0.05em",
            "color": "var(--tb-service-font-5)"
          },
          "noDataDisplayMessage": "",
          "showLegend": false,
          "actions": {
            "headerButton": [],
            "filterAction": [
              {
                "name": "Mobile Filter",
                "icon": "more_horiz",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<!--=======================================================================-->\n<!--=====  There are two example templates: for edit and add entity   =====-->\n<!--=======================================================================-->\n<!--========================  Edit entity example  ========================-->\n<!--=======================================================================-->\n<!-- -->\n<!--<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"-->\n<!--      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">-->\n<!--    <mat-toolbar fxLayout=\"row\" color=\"primary\">-->\n<!--        <h2>Edit {{entityType.toLowerCase()}} {{entityName}}</h2>-->\n<!--        <span fxFlex></span>-->\n<!--        <button mat-icon-button (click)=\"cancel()\" type=\"button\">-->\n<!--            <mat-icon class=\"material-icons\">close</mat-icon>-->\n<!--        </button>-->\n<!--    </mat-toolbar>-->\n<!--    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">-->\n<!--    </mat-progress-bar>-->\n<!--    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>-->\n<!--    <div mat-dialog-content fxLayout=\"column\">-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Name</mat-label>-->\n<!--                <input matInput formControlName=\"entityName\" required readonly=\"\">-->\n<!--            </mat-form-field>-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Label</mat-label>-->\n<!--                <input matInput formControlName=\"entityLabel\">-->\n<!--            </mat-form-field>-->\n<!--        </div>-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Type</mat-label>-->\n<!--                <input matInput formControlName=\"entityType\" readonly>-->\n<!--            </mat-form-field>-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Type</mat-label>-->\n<!--                <input matInput formControlName=\"type\" readonly>-->\n<!--            </mat-form-field>-->\n<!--        </div>-->\n<!--        <div formGroupName=\"attributes\" fxLayout=\"column\">-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Latitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Longitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Address</mat-label>-->\n<!--                    <input matInput formControlName=\"address\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Owner</mat-label>-->\n<!--                    <input matInput formControlName=\"owner\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Integer Value</mat-label>-->\n<!--                    <input type=\"number\" step=\"1\" matInput formControlName=\"number\">-->\n<!--                    <mat-error *ngIf=\"editEntityFormGroup.get('attributes.number').hasError('pattern')\">-->\n<!--                        Invalid integer value.-->\n<!--                    </mat-error>-->\n<!--                </mat-form-field>-->\n<!--                <div class=\"boolean-value-input\" fxLayout=\"column\" fxLayoutAlign=\"center start\" fxFlex>-->\n<!--                    <label class=\"checkbox-label\">Boolean Value</label>-->\n<!--                    <mat-checkbox formControlName=\"booleanValue\" style=\"margin-bottom: 40px;\">-->\n<!--                        {{ (editEntityFormGroup.get('attributes.booleanValue').value ? \"value.true\" : \"value.false\") | translate }}-->\n<!--                    </mat-checkbox>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--        <div class=\"relations-list old-relations\">-->\n<!--            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\n<!--            <div class=\"body\" [fxShow]=\"oldRelations().length\">-->\n<!--                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"oldRelations\" -->\n<!--                     *ngFor=\"let relation of oldRelations().controls; let i = index;\">-->\n<!--                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">-->\n<!--                        <div fxFlex fxLayout=\"column\">-->\n<!--                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">-->\n<!--                                    <mat-label>Direction</mat-label>-->\n<!--                                    <mat-select formControlName=\"direction\" name=\"direction\">-->\n<!--                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">-->\n<!--                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}-->\n<!--                                        </mat-option>-->\n<!--                                    </mat-select>-->\n<!--                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">-->\n<!--                                        Relation direction is required.-->\n<!--                                    </mat-error>-->\n<!--                                </mat-form-field>-->\n<!--                                <tb-relation-type-autocomplete-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        formControlName=\"relationType\"-->\n<!--                                        required=\"true\">-->\n<!--                                </tb-relation-type-autocomplete>-->\n<!--                            </div>-->\n<!--                            <div fxLayout=\"row\" fxLayout.xs=\"column\">-->\n<!--                                <tb-entity-select-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        required=\"true\"-->\n<!--                                        formControlName=\"relatedEntity\">-->\n<!--                                </tb-entity-select>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">-->\n<!--                            <button mat-icon-button color=\"primary\"-->\n<!--                                    aria-label=\"Remove\"-->\n<!--                                    type=\"button\"-->\n<!--                                    (click)=\"removeOldRelation(i)\"-->\n<!--                                    matTooltip=\"Remove relation\"-->\n<!--                                    matTooltipPosition=\"above\">-->\n<!--                                <mat-icon>close</mat-icon>-->\n<!--                            </button>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--        <div class=\"relations-list\">-->\n<!--            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">New Relations</div>-->\n<!--            <div class=\"body\" [fxShow]=\"relations().length\">-->\n<!--                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"relations\" *ngFor=\"let relation of relations().controls; let i = index;\">-->\n<!--                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">-->\n<!--                        <div fxFlex fxLayout=\"column\">-->\n<!--                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">-->\n<!--                                    <mat-label>Direction</mat-label>-->\n<!--                                    <mat-select formControlName=\"direction\" name=\"direction\">-->\n<!--                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">-->\n<!--                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}-->\n<!--                                        </mat-option>-->\n<!--                                    </mat-select>-->\n<!--                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">-->\n<!--                                        Relation direction is required.-->\n<!--                                    </mat-error>-->\n<!--                                </mat-form-field>-->\n<!--                                <tb-relation-type-autocomplete-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        formControlName=\"relationType\"-->\n<!--                                        [required]=\"true\">-->\n<!--                                </tb-relation-type-autocomplete>-->\n<!--                            </div>-->\n<!--                            <div fxLayout=\"row\" fxLayout.xs=\"column\">-->\n<!--                                <tb-entity-select-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        [required]=\"true\"-->\n<!--                                        formControlName=\"relatedEntity\">-->\n<!--                                </tb-entity-select>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">-->\n<!--                            <button mat-icon-button color=\"primary\"-->\n<!--                                    aria-label=\"Remove\"-->\n<!--                                    type=\"button\"-->\n<!--                                    (click)=\"removeRelation(i)\"-->\n<!--                                    matTooltip=\"Remove relation\"-->\n<!--                                    matTooltipPosition=\"above\">-->\n<!--                                <mat-icon>close</mat-icon>-->\n<!--                            </button>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--            <div>-->\n<!--                <button mat-raised-button color=\"primary\"-->\n<!--                        type=\"button\"-->\n<!--                        (click)=\"addRelation()\"-->\n<!--                        matTooltip=\"Add Relation\"-->\n<!--                        matTooltipPosition=\"above\">-->\n<!--                    Add-->\n<!--                </button>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--    </div>-->\n<!--    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">-->\n<!--        <button mat-button color=\"primary\"-->\n<!--                type=\"button\"-->\n<!--                [disabled]=\"(isLoading$ | async)\"-->\n<!--                (click)=\"cancel()\" cdkFocusInitial>-->\n<!--            Cancel-->\n<!--        </button>-->\n<!--        <button mat-button mat-raised-button color=\"primary\"-->\n<!--                type=\"submit\"-->\n<!--                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">-->\n<!--            Save-->\n<!--        </button>-->\n<!--    </div>-->\n<!--</form>-->\n<!---->\n<!--========================================================================-->\n<!--=========================  Add entity example  =========================-->\n<!--========================================================================-->\n<!---->\n<!--<form #addEntityForm=\"ngForm\" [formGroup]=\"addEntityFormGroup\"-->\n<!--      (ngSubmit)=\"save()\" class=\"add-entity-form\">-->\n<!--    <mat-toolbar fxLayout=\"row\" color=\"primary\">-->\n<!--        <h2>Add entity</h2>-->\n<!--        <span fxFlex></span>-->\n<!--        <button mat-icon-button (click)=\"cancel()\" type=\"button\">-->\n<!--            <mat-icon class=\"material-icons\">close</mat-icon>-->\n<!--        </button>-->\n<!--    </mat-toolbar>-->\n<!--    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">-->\n<!--    </mat-progress-bar>-->\n<!--    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>-->\n<!--    <div mat-dialog-content fxLayout=\"column\">-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Name</mat-label>-->\n<!--                <input matInput formControlName=\"entityName\" required>-->\n<!--                <mat-error *ngIf=\"addEntityFormGroup.get('entityName').hasError('required')\">-->\n<!--                    Entity name is required.-->\n<!--                </mat-error>-->\n<!--            </mat-form-field>-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Label</mat-label>-->\n<!--                <input matInput formControlName=\"entityLabel\" >-->\n<!--            </mat-form-field>-->\n<!--        </div>-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <tb-entity-type-select-->\n<!--                    class=\"mat-block\"-->\n<!--                    formControlName=\"entityType\"-->\n<!--                    [showLabel]=\"true\"-->\n<!--                    [allowedEntityTypes]=\"allowedEntityTypes\"-->\n<!--            ></tb-entity-type-select>-->\n<!--            <tb-entity-subtype-autocomplete-->\n<!--                    fxFlex *ngIf=\"addEntityFormGroup.get('entityType').value == 'ASSET'\"-->\n<!--                    class=\"mat-block\"-->\n<!--                    formControlName=\"type\"-->\n<!--                    [required]=\"true\"-->\n<!--                    [entityType]=\"'ASSET'\"-->\n<!--            ></tb-entity-subtype-autocomplete>-->\n<!--            <tb-entity-subtype-autocomplete-->\n<!--                    fxFlex *ngIf=\"addEntityFormGroup.get('entityType').value != 'ASSET'\"-->\n<!--                    class=\"mat-block\"-->\n<!--                    formControlName=\"type\"-->\n<!--                    [required]=\"true\"-->\n<!--                    [entityType]=\"'DEVICE'\"-->\n<!--            ></tb-entity-subtype-autocomplete>-->\n<!--        </div>-->\n<!--        <div formGroupName=\"attributes\" fxLayout=\"column\">-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Latitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Longitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Address</mat-label>-->\n<!--                    <input matInput formControlName=\"address\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Owner</mat-label>-->\n<!--                    <input matInput formControlName=\"owner\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Integer Value</mat-label>-->\n<!--                    <input type=\"number\" step=\"1\" matInput formControlName=\"number\">-->\n<!--                    <mat-error *ngIf=\"addEntityFormGroup.get('attributes.number').hasError('pattern')\">-->\n<!--                        Invalid integer value.-->\n<!--                    </mat-error>-->\n<!--                </mat-form-field>-->\n<!--                <div class=\"boolean-value-input\" fxLayout=\"column\" fxLayoutAlign=\"center start\" fxFlex>-->\n<!--                    <label class=\"checkbox-label\">Boolean Value</label>-->\n<!--                    <mat-checkbox formControlName=\"booleanValue\" style=\"margin-bottom: 40px;\">-->\n<!--                        {{ (addEntityFormGroup.get('attributes.booleanValue').value ? \"value.true\" : \"value.false\") | translate }}-->\n<!--                    </mat-checkbox>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--        <div class=\"relations-list\">-->\n<!--            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\n<!--            <div class=\"body\" [fxShow]=\"relations().length\">-->\n<!--                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"relations\" *ngFor=\"let relation of relations().controls; let i = index;\">-->\n<!--                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">-->\n<!--                        <div fxFlex fxLayout=\"column\">-->\n<!--                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">-->\n<!--                                    <mat-label>Direction</mat-label>-->\n<!--                                    <mat-select formControlName=\"direction\" name=\"direction\">-->\n<!--                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">-->\n<!--                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}-->\n<!--                                        </mat-option>-->\n<!--                                    </mat-select>-->\n<!--                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">-->\n<!--                                        Relation direction is required.-->\n<!--                                    </mat-error>-->\n<!--                                </mat-form-field>-->\n<!--                                <tb-relation-type-autocomplete-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        formControlName=\"relationType\"-->\n<!--                                        [required]=\"true\">-->\n<!--                                </tb-relation-type-autocomplete>-->\n<!--                            </div>-->\n<!--                            <div fxLayout=\"row\" fxLayout.xs=\"column\">-->\n<!--                                <tb-entity-select-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        [required]=\"true\"-->\n<!--                                        formControlName=\"relatedEntity\">-->\n<!--                                </tb-entity-select>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">-->\n<!--                            <button mat-icon-button color=\"primary\"-->\n<!--                                    aria-label=\"Remove\"-->\n<!--                                    type=\"button\"-->\n<!--                                    (click)=\"removeRelation(i)\"-->\n<!--                                    matTooltip=\"Remove relation\"-->\n<!--                                    matTooltipPosition=\"above\">-->\n<!--                                <mat-icon>close</mat-icon>-->\n<!--                            </button>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--            <div>-->\n<!--                <button mat-raised-button color=\"primary\"-->\n<!--                        type=\"button\"-->\n<!--                        (click)=\"addRelation()\"-->\n<!--                        matTooltip=\"Add Relation\"-->\n<!--                        matTooltipPosition=\"above\">-->\n<!--                    Add-->\n<!--                </button>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--    </div>-->\n<!--    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">-->\n<!--        <button mat-button color=\"primary\"-->\n<!--                type=\"button\"-->\n<!--                [disabled]=\"(isLoading$ | async)\"-->\n<!--                (click)=\"cancel()\" cdkFocusInitial>-->\n<!--            Cancel-->\n<!--        </button>-->\n<!--        <button mat-button mat-raised-button color=\"primary\"-->\n<!--                type=\"submit\"-->\n<!--                [disabled]=\"(isLoading$ | async) || addEntityForm.invalid || !addEntityForm.dirty\">-->\n<!--            Create-->\n<!--        </button>-->\n<!--    </div>-->\n<!--</form>-->\n",
                "customCss": "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction": "/*=======================================================================*/\n/*=====  There are three examples: for delete, edit and add entity  =====*/\n/*=======================================================================*/\n/*=======================  Delete entity example  =======================*/\n/*=======================================================================*/\n//\n//let $injector = widgetContext.$scope.$injector;\n//let dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\n//let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n//let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n//\n//openDeleteEntityDialog();\n//\n//function openDeleteEntityDialog() {\n//    let title = 'Delete ' + entityId.entityType.toLowerCase() + ' ' +\n//                 entityName;\n//    let content = 'Are you sure you want to delete the ' +\n//                  entityId.entityType.toLowerCase() + ' ' + entityName + '?';\n//    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n//        function(result) {\n//            if (result) {\n//                deleteEntity();\n//            }\n//        }\n//    );\n//}\n//\n//function deleteEntity() {\n//    deleteEntityObservable(entityId).subscribe(\n//        function success() {\n//            widgetContext.updateAliases();\n//        },\n//        function fail() {\n//            showErrorDialog();\n//        }\n//    );\n//}\n//\n//function deleteEntityObservable(entityId) {\n//    if (entityId.entityType == \"ASSET\") {\n//        return assetService.deleteAsset(entityId.id);\n//    } else if (entityId.entityType == \"DEVICE\") {\n//        return deviceService.deleteDevice(entityId.id);\n//    }\n//}\n//\n//function showErrorDialog() {\n//    let title = 'Error';\n//    let content = 'An error occurred while deleting the entity. Please try again.';\n//    dialogs.alert(title, content, 'CLOSE').subscribe(\n//        function(result) {}\n//    );\n//}\n//\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n//\n//let $injector = widgetContext.$scope.$injector;\n//let customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\n//let entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\n//let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n//let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n//let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n//let entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n//\n//openEditEntityDialog();\n//\n//function openEditEntityDialog() {\n//    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n//}\n//\n//function EditEntityDialogController(instance) {\n//    let vm = instance;\n//\n//    vm.entityName = entityName;\n//    vm.entityType = entityId.entityType;\n//    vm.entitySearchDirection = {\n//        from: \"FROM\",\n//        to: \"TO\"\n//    };\n//    vm.attributes = {};\n//    vm.oldRelationsData = [];\n//    vm.relationsToDelete = [];\n//    vm.entity = {};\n//\n//    vm.editEntityFormGroup = vm.fb.group({\n//        entityName: ['', [vm.validators.required]],\n//        entityType: [null],\n//        entityLabel: [null],\n//        type: ['', [vm.validators.required]],\n//        attributes: vm.fb.group({\n//            latitude: [null],\n//            longitude: [null],\n//            address: [null],\n//            owner: [null],\n//            number: [null, [vm.validators.pattern(/^-?[0-9]+$/)]],\n//            booleanValue: [false]\n//        }),\n//        oldRelations: vm.fb.array([]),\n//        relations: vm.fb.array([])\n//    });\n//\n//    getEntityInfo();\n//\n//    vm.cancel = function() {\n//        vm.dialogRef.close(null);\n//    };\n//\n//    vm.relations = function() {\n//        return vm.editEntityFormGroup.get('relations');\n//    };\n//\n//    vm.oldRelations = function() {\n//        return vm.editEntityFormGroup.get('oldRelations');\n//    };\n//\n//    vm.addRelation = function() {\n//        vm.relations().push(vm.fb.group({\n//            relatedEntity: [null, [vm.validators.required]],\n//            relationType: [null, [vm.validators.required]],\n//            direction: [null, [vm.validators.required]]\n//        }));\n//    };\n//\n//    function addOldRelation() {\n//        vm.oldRelations().push(vm.fb.group({\n//            relatedEntity: [{value: null, disabled: true}, [vm.validators.required]],\n//            relationType: [{value: null, disabled: true}, [vm.validators.required]],\n//            direction: [{value: null, disabled: true}, [vm.validators.required]]\n//        }));\n//    }\n//\n//    vm.removeRelation = function(index) {\n//        vm.relations().removeAt(index);\n//        vm.relations().markAsDirty();\n//    };\n//\n//    vm.removeOldRelation = function(index) {\n//        vm.oldRelations().removeAt(index);\n//        vm.relationsToDelete.push(vm.oldRelationsData[index]);\n//        vm.oldRelations().markAsDirty();\n//    };\n//\n//    vm.save = function() {\n//        vm.editEntityFormGroup.markAsPristine();\n//        widgetContext.rxjs.forkJoin([\n//            saveAttributes(entityId),\n//            saveRelations(entityId),\n//            saveEntity()\n//        ]).subscribe(\n//            function () {\n//                widgetContext.updateAliases();\n//                vm.dialogRef.close(null);\n//            }\n//        );\n//    };\n//\n//    function getEntityAttributes(attributes) {\n//        for (var i = 0; i < attributes.length; i++) {\n//            vm.attributes[attributes[i].key] = attributes[i].value;\n//        }\n//    }\n//\n//    function getEntityRelations(relations) {\n//        let relationsFrom = relations[0];\n//        let relationsTo = relations[1];\n//        for (let i=0; i < relationsFrom.length; i++) {\n//            let relation = {\n//                direction: 'FROM',\n//                relationType: relationsFrom[i].type,\n//                relatedEntity: relationsFrom[i].to\n//            };\n//            vm.oldRelationsData.push(relation);\n//            addOldRelation();\n//        }\n//        for (let i=0; i < relationsTo.length; i++) {\n//            let relation = {\n//                direction: 'TO',\n//                relationType: relationsTo[i].type,\n//                relatedEntity: relationsTo[i].from\n//            };\n//            vm.oldRelationsData.push(relation);\n//            addOldRelation();\n//        }\n//    }\n//\n//    function getEntityInfo() {\n//         widgetContext.rxjs.forkJoin([\n//             entityRelationService.findInfoByFrom(entityId),\n//             entityRelationService.findInfoByTo(entityId),\n//             attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE'),\n//             entityService.getEntity(entityId.entityType, entityId.id)\n//         ]).subscribe(\n//             function (data) {\n//                 getEntityRelations(data.slice(0,2));\n//                 getEntityAttributes(data[2]);\n//                 vm.entity = data[3];\n//                 vm.editEntityFormGroup.patchValue({\n//                     entityName: vm.entity.name,\n//                     entityType: vm.entityType,\n//                     entityLabel: vm.entity.label,\n//                     type: vm.entity.type,\n//                     attributes: vm.attributes,\n//                     oldRelations: vm.oldRelationsData\n//                 }, {emitEvent: false});\n//             }\n//         );\n//     }\n//\n//    function saveEntity() {\n//        const formValues = vm.editEntityFormGroup.value;\n//        if (vm.entity.label !== formValues.entityLabel){\n//            vm.entity.label = formValues.entityLabel;\n//            if (formValues.entityType == 'ASSET') {\n//                return assetService.saveAsset(vm.entity);\n//            } else if (formValues.entityType == 'DEVICE') {\n//                return deviceService.saveDevice(vm.entity);\n//            }\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//\n//    function saveAttributes(entityId) {\n//        let attributes = vm.editEntityFormGroup.get('attributes').value;\n//        let attributesArray = [];\n//        for (let key in attributes) {\n//            if (attributes[key] !== vm.attributes[key]) {\n//                attributesArray.push({key: key, value: attributes[key]});\n//            }\n//        }\n//        if (attributesArray.length > 0) {\n//            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//\n//    function saveRelations(entityId) {\n//        let relations = vm.editEntityFormGroup.get('relations').value;\n//        let tasks = [];\n//        for(let i=0; i < relations.length; i++) {\n//            let relation = {\n//                type: relations[i].relationType,\n//                typeGroup: 'COMMON'\n//            };\n//            if (relations[i].direction == 'FROM') {\n//                relation.to = relations[i].relatedEntity;\n//                relation.from = entityId;\n//            } else {\n//                relation.to = entityId;\n//                relation.from = relations[i].relatedEntity;\n//            }\n//            tasks.push(entityRelationService.saveRelation(relation));\n//        }\n//        for (let i=0; i < vm.relationsToDelete.length; i++) {\n//            let relation = {\n//                type: vm.relationsToDelete[i].relationType\n//            };\n//            if (vm.relationsToDelete[i].direction == 'FROM') {\n//                relation.to = vm.relationsToDelete[i].relatedEntity;\n//                relation.from = entityId;\n//            } else {\n//                relation.to = entityId;\n//                relation.from = vm.relationsToDelete[i].relatedEntity;\n//            }\n//            tasks.push(entityRelationService.deleteRelation(relation.from, relation.type, relation.to));\n//        }\n//        if (tasks.length > 0) {\n//            return widgetContext.rxjs.forkJoin(tasks);\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//}\n//\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n//\n//let $injector = widgetContext.$scope.$injector;\n//let customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\n//let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n//let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n//let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n//let entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n//\n//openAddEntityDialog();\n//\n//function openAddEntityDialog() {\n//    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\n//}\n//\n//function AddEntityDialogController(instance) {\n//    let vm = instance;\n//\n//    vm.allowedEntityTypes = ['ASSET', 'DEVICE'];\n//    vm.entitySearchDirection = {\n//        from: \"FROM\",\n//        to: \"TO\"\n//    }\n//\n//    vm.addEntityFormGroup = vm.fb.group({\n//      entityName: ['', [vm.validators.required]],\n//      entityType: ['DEVICE'],\n//      entityLabel: [null],\n//      type: ['', [vm.validators.required]],\n//      attributes: vm.fb.group({\n//          latitude: [null],\n//          longitude: [null],\n//          address: [null],\n//          owner: [null],\n//          number: [null, [vm.validators.pattern(/^-?[0-9]+$/)]],\n//          booleanValue: [null]\n//      }),\n//      relations: vm.fb.array([])\n//    });\n//\n//    vm.cancel = function() {\n//        vm.dialogRef.close(null);\n//    };\n//\n//    vm.relations = function() {\n//        return vm.addEntityFormGroup.get('relations');\n//    };\n//\n//    vm.addRelation = function() {\n//        vm.relations().push(vm.fb.group({\n//          relatedEntity: [null, [vm.validators.required]],\n//          relationType: [null, [vm.validators.required]],\n//          direction: [null, [vm.validators.required]]\n//        }));\n//    };\n//\n//    vm.removeRelation = function(index) {\n//        vm.relations().removeAt(index);\n//        vm.relations().markAsDirty();\n//    };\n//\n//    vm.save = function() {\n//        vm.addEntityFormGroup.markAsPristine();\n//        saveEntityObservable().subscribe(\n//            function (entity) {\n//                widgetContext.rxjs.forkJoin([\n//                    saveAttributes(entity.id),\n//                    saveRelations(entity.id)\n//                ]).subscribe(\n//                    function () {\n//                        widgetContext.updateAliases();\n//                        vm.dialogRef.close(null);\n//                    }\n//                );\n//            }\n//        );\n//    };\n//\n//    function saveEntityObservable() {\n//        const formValues = vm.addEntityFormGroup.value;\n//        let entity = {\n//            name: formValues.entityName,\n//            type: formValues.type,\n//            label: formValues.entityLabel\n//        };\n//        if (formValues.entityType == 'ASSET') {\n//            return assetService.saveAsset(entity);\n//        } else if (formValues.entityType == 'DEVICE') {\n//            return deviceService.saveDevice(entity);\n//        }\n//    }\n//\n//    function saveAttributes(entityId) {\n//        let attributes = vm.addEntityFormGroup.get('attributes').value;\n//        let attributesArray = [];\n//        for (let key in attributes) {\n//            if(attributes[key] !== null) {\n//                attributesArray.push({key: key, value: attributes[key]});\n//            }\n//        }\n//        if (attributesArray.length > 0) {\n//            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//\n//    function saveRelations(entityId) {\n//        let relations = vm.addEntityFormGroup.get('relations').value;\n//        let tasks = [];\n//        for(let i=0; i < relations.length; i++) {\n//            let relation = {\n//                type: relations[i].relationType,\n//                typeGroup: 'COMMON'\n//            };\n//            if (relations[i].direction == 'FROM') {\n//                relation.to = relations[i].relatedEntity;\n//                relation.from = entityId;\n//            } else {\n//                relation.to = entityId;\n//                relation.from = relations[i].relatedEntity;\n//            }\n//            tasks.push(entityRelationService.saveRelation(relation));\n//        }\n//        if (tasks.length > 0) {\n//            return widgetContext.rxjs.forkJoin(tasks);\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "54e46230-4167-586e-ec11-0a5401ce04ab"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "984f4fbf-0dbb-286b-3ae5-7e33397148e8"
      },
      "36b22b9c-1102-12f6-c81b-45ebe6bc120b": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_info_widgets",
        "typeAlias": "alarm_history",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 6.5,
        "sizeY": 4,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "df94890c-7d0f-6a19-4bdb-ac4261c9450f",
              "filterId": null,
              "dataKeys": []
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "c0bb6563-92cc-9549-205f-5fac08f219f7",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "createdTime",
                  "type": "timeseries",
                  "label": "thingplus.label.created-time",
                  "color": "#2196f3",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "if(value != 0){\n    var timeFormat = ctx.custom.t('thingplus.time-format.ymdhms') \n    return moment(value).format(timeFormat)\n}else {\n    return '-'\n}\n"
                  },
                  "_hash": 0.06753802314027935,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "customerL1Name",
                  "type": "timeseries",
                  "label": "thingplus.label.customerL1-name",
                  "color": "#4caf50",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false
                  },
                  "_hash": 0.249842846204416,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "customerL2Name",
                  "type": "timeseries",
                  "label": "thingplus.label.customerL2-name",
                  "color": "#f44336",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false
                  },
                  "_hash": 0.8861562156752545,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "originatorLabel",
                  "type": "timeseries",
                  "label": "thingplus.label.device-name",
                  "color": "#ffc107",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false
                  },
                  "_hash": 0.7469875872153033,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "category",
                  "type": "timeseries",
                  "label": "thingplus.label.alarm-category",
                  "color": "#607d8b",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "return ctx.custom.t('thingplus.alarm-category.' + value)"
                  },
                  "_hash": 0.16479373706096667,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "type",
                  "type": "timeseries",
                  "label": "thingplus.label.alarm-type",
                  "color": "#9c27b0",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "return ctx.custom.t('thingplus.alarm-type.' + value)"
                  },
                  "_hash": 0.30153691660009607,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "severity",
                  "type": "timeseries",
                  "label": "thingplus.label.alarm-severity",
                  "color": "#e91e63",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "const MAP = {\n    CRITICAL: {label: ctx.custom.t('thingplus.alarm-severity.CRITICAL'), icon: 'error_outline'},\n    MAJOR: {label: ctx.custom.t('thingplus.alarm-severity.MAJOR'), icon: 'report_problem'},\n    MINOR: {label: ctx.custom.t('thingplus.alarm-severity.MINOR'), icon: 'report_problem'},\n    WARNING: {label: ctx.custom.t('thingplus.alarm-severity.WARNING'), icon: 'report_problem'},\n    INTERMIDIATE: {label: ctx.custom.t('thingplus.alarm-severity.INTERMIDIATE'), icon: 'info'}\n}\nreturn `<div class=\"severity-box ${value}\"><i class=\"material-icons-outlined\">${MAP[value].icon}</i><span>${MAP[value].label}</span></div>`"
                  },
                  "_hash": 0.2151159258712363,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "ackTs",
                  "type": "timeseries",
                  "label": "thingplus.label.ack-time",
                  "color": "#8bc34a",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "if(value != 0){\n    var timeFormat = ctx.custom.t('thingplus.time-format.ymdhms') \n    return moment(value).format(timeFormat)\n}else {\n    return '-'\n}\n"
                  },
                  "_hash": 0.6575536501099313,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "clearTs",
                  "type": "timeseries",
                  "label": "thingplus.label.clear-time",
                  "color": "#3f51b5",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "if(value != 0){\n    var timeFormat = ctx.custom.t('thingplus.time-format.ymdhms') \n    return moment(value).format(timeFormat)\n}else {\n    return '-'\n}\n"
                  },
                  "_hash": 0.9033162604812686,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ]
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "d7bbcc07-e2d1-fa22-4cc5-bd477cfb54b0",
              "filterId": null,
              "dataKeys": []
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 1630
            }
          },
          "title": "thingplus.page.event.event-list",
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default",
            "box-shadow": "0px 2px 10px 0 rgba(0, 0, 0, 0.04)"
          },
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "1.6em",
            "font-weight": 600,
            "letter-spacing": "var(--tb-config-letter-spacing)",
            "color": "var(--tb-service-font-5)"
          },
          "noDataDisplayMessage": "",
          "showLegend": false,
          "actions": {
            "actionCellButton": [
              {
                "name": "Ack",
                "icon": "done",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "custom",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet alarmService = $injector.get(widgetContext.servicesMap.get('alarmService'));\n\nlet t = widgetContext.custom.t;\nconst TIME_FORMAT = t('thingplus.time-format.ymdhms');\n\nopenAckAlarmDialog();\n\nfunction openAckAlarmDialog() {\n  let alarm = additionalParams;\n  let createdTime = alarm.createdTime == 0 ? '-' : moment(alarm.createdTime).format(TIME_FORMAT);\n  let type = t('thingplus.alarm-type.' + alarm.type);\n\n  let title = t('thingplus.dialog.ack-event-title');\n  let content = t('thingplus.dialog.ack-event-msg', { createdTime: createdTime, type: type });\n  dialogs.confirm(title, content, t('thingplus.action.ack'), t('thingplus.action.close')).subscribe(function (result) {\n    if (!result) {\n      alarmService.ackAlarm(entityId.id).subscribe(() => {\n        widgetContext.updateAliases();\n      });\n    }\n  });\n}\n",
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "02c09e1f-998f-69b5-3beb-9219de25f42e"
              },
              {
                "name": "Details",
                "icon": "search",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"view-details-form\">\n  <form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\" style=\"font-size: {{calcFontSize()}}px;\">\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\">{{entityLabel}} {{\"thingplus.dialog.detail-alarm\" | translate}}</span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 0.4em\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content>\n      <div class=\"info\" fxLayoutAlign=\"space-between\">\n        <div\n          class=\"label-box\"\n          fxFlex=\"33.33\"\n          *ngFor=\"let label of labelList\"\n          fxFlex\n          fxLayout=\"column\"\n          fxLayoutAlign=\"start start\"\n        >\n          <div class=\"label\">{{label.label}}</div>\n          <div class=\"value\">{{label.value}}</div>\n        </div>\n      </div>\n      <div class=\"info\" fxLayoutAlign=\"space-between\">\n        <div\n          class=\"label-box\"\n          fxFlex=\"33.33\"\n          *ngFor=\"let label of labelList2\"\n          fxFlex\n          fxLayout=\"column\"\n          fxLayoutAlign=\"start start\"\n        >\n          <div class=\"label\">{{label.label}}</div>\n          <div class=\"value\">{{label.value}}</div>\n        </div>\n      </div>\n      <div class=\"legend\" fxLayoutAlign=\"start center\" fxLayoutGap=\"2.4em\" *ngIf=\"showTrend\">\n        <div class=\"legend-box\" *ngFor=\"let legend of legendList\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n          <div class=\"legend-circle\" [ngStyle]=\"{'color': legend.color}\"></div>\n          <div class=\"legend-label\">{{legend.label}}</div>\n        </div>\n      </div>\n      <div class=\"chart\" *ngIf=\"showTrend\"></div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        translate\n      >\n        thingplus.action.close\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#view-details-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  cursor: default;\n  width: 40vw;\n}\n#view-details-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#view-details-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#view-details-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#view-details-form .dialog-close i {\n  font-size: 1.4em;\n}\n#view-details-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#view-details-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#view-details-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#view-details-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#view-details-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#view-details-form .info {\n  width: 100%;\n  padding: 2em 0em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#view-details-form .info:first-child {\n  border-top: none;\n  padding-top: 0em;\n}\n#view-details-form .label-box {\n  padding: 0em 2em;\n  border-left: 1px solid var(--tb-service-border-1);\n}\n#view-details-form .label-box:first-child {\n  padding-left: 0;\n  border-left: none;\n}\n#view-details-form .label-box:last-child {\n  padding-right: 0;\n}\n#view-details-form .label {\n  color: var(--tb-service-font-3);\n  font-size: 1.2em;\n}\n#view-details-form .value {\n  color: var(--tb-service-font-5);\n  font-weight: 500;\n  font-size: 1.4em;\n}\n\n#view-details-form .legend {\n  width: 100%;\n  padding-top: 2em;\n  padding-bottom: 1em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#view-details-form .legend-circle {\n  width: 0.6em;\n  height: 0.6em;\n  background-color: currentColor;\n}\n#view-details-form .legend-label {\n  font-size: 1.2em;\n  color: var(--tb-service-font-4);\n}\n#view-details-form .legend-box.hidden .legend-label {\n  text-decoration: line-through;\n}\n\n#view-details-form .chart {\n  width: 100%;\n}\n#view-details-form .chart svg {\n  width: 100%;\n  height: auto;\n}\n#view-details-form .chart .tooltip:hover {\n  stroke: var(--tb-service-font-5);\n}\n#view-details-form .bar-rect {\n  transition-property: transform, height;\n  transition-duration: var(--tb-config-color-duration);\n}\n#view-details-form .bar-rect-active {\n  transform: translateY(2px);\n  height: 6px;\n}\n#view-details-form .bar-rect-target {\n  transform: translateY(-2px);\n  height: 14px;\n}\n\n#view-details-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#view-details-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#view-details-form .close-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#view-details-form .close-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#view-details-form .close-button:active {\n  background-color: var(--tb-service-border-0);\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nconst t = widgetContext.custom.t;\nconst STANDARD_WINDOW_SIZE = 1920 / 100;\nconst HOUR_MS = 3600000;\nconst DAY_MS = 24 * HOUR_MS;\nconst TREND = {\n  'volt-imbalance': { label: t('thingplus.alarm-type.volt-imbalance'), key: 'unbal' },\n  'curr-imbalance': { label: t('thingplus.alarm-type.curr-imbalance'), key: 'f1_unbal' },\n  thd: { label: t('thingplus.alarm-type.thd'), key: 'f1_thd' },\n  'power-factor': { label: t('thingplus.alarm-type.power-factor'), key: 'f1_PF' },\n};\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n  customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n  let vm = instance;\n  vm.ownerId = widgetContext.defaultSubscription.configuredDatasources[0].entity.id;\n  vm.t = t;\n  vm.isFirstLoad = true;\n  vm.entityLabel = entityLabel;\n\n  vm.editEntityFormGroup = vm.fb.group({});\n  vm.showTrend = false;\n  vm.legendList = [];\n  vm.labelList = [\n    { label: t('thingplus.label.customerL1-name'), value: additionalParams.customerL1Name },\n    { label: t('thingplus.label.customerL2-name'), value: additionalParams.customerL2Name },\n    { label: t('thingplus.label.device-name'), value: additionalParams.originatorLabel },\n  ];\n  vm.labelList2 = [\n    { label: t('thingplus.label.alarm-category'), value: t('thingplus.alarm-category.' + additionalParams.category) },\n    { label: t('thingplus.label.alarm-type'), value: t('thingplus.alarm-type.' + additionalParams.type) },\n    { label: t('thingplus.label.alarm-severity'), value: t('thingplus.alarm-severity.' + additionalParams.severity) },\n  ];\n\n  vm.isLoading$.subscribe(async x => {\n    if (vm.isFirstLoad) {\n      vm.isFirstLoad = false;\n      vm.$form = $('#view-details-form');\n      if (TREND[additionalParams.type]) {\n        vm.showTrend = true;\n        vm.key = TREND[additionalParams.type].key;\n        vm.startTs = additionalParams.createdTime;\n        vm.endTs = moment().valueOf();\n        if (additionalParams.clearTs != 0) {\n          vm.endTs = additionalParams.clearTs;\n        }\n        vm.legendList = [\n          { key: additionalParams.type, color: 'var(--tb-alarm-major)', label: TREND[additionalParams.type].label },\n        ];\n        vm.lineData = await loadData(vm.key);\n        if (vm.lineData[vm.key]) {\n          vm.lineData = vm.lineData[vm.key].map(d => {\n            if (d.value < 0) d.value = 0;\n            return { ts: moment(d.ts).valueOf(), value: d.value };\n          });\n        } else {\n          vm.lineData = [];\n        }\n        console.log(vm.lineData);\n        drawChart();\n      }\n    }\n  });\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n\n  // Add the event listeners that show or hide the tooltip.\n  const bisect = d3.bisector(d => d.ts).center;\n\n  function drawChart() {\n    vm.d3Config = {\n      viewWidth: 960,\n      viewHeight: 540,\n      margin: {\n        top: 10,\n        right: 0,\n        bottom: 40,\n        left: 60,\n      },\n    };\n\n    // svg 영역 정의\n    vm.$d3 = d3\n      .select($('.chart', vm.$form)[0])\n      .append('svg')\n      .attr('viewBox', `0 0 ${vm.d3Config.viewWidth} ${vm.d3Config.viewHeight}`)\n      .attr('width', vm.d3Config.viewWidth)\n      .attr('height', vm.d3Config.viewHeight);\n\n    if (vm.lineData.length > 0) {\n      vm.$d3\n        .on('pointerenter pointermove', pointermoved)\n        .on('pointerleave', pointerleft)\n        .on('touchstart', event => event.preventDefault());\n    }\n\n    drawXAxis();\n    drawYAxis();\n    drawMain();\n    vm.$vertical = vm.$d3.select('.main-group').append('g');\n    vm.$horizontal = vm.$d3.select('.main-group').append('g');\n    if (vm.lineData.length > 0) {\n      drawLine();\n    }\n\n    // Create the tooltip container.\n    vm.$tooltip = vm.$d3.select('.main-group').append('g');\n  }\n\n  function drawXAxis() {\n    let { custom } = widgetContext;\n    let { viewWidth, viewHeight, margin } = vm.d3Config;\n    const width = viewWidth - margin.left - margin.right;\n    const height = margin.bottom;\n\n    // xAxis 그리기\n    vm.xAxis = d3\n      .scaleTime()\n      .domain(d3.extent([vm.startTs, vm.endTs]))\n      .range([0, width]);\n    vm.$xAxis = vm.$d3\n      .append('g')\n      .attr('class', 'axis')\n      .attr('transform', 'translate(' + margin.left + ', ' + (viewHeight - height) + ')')\n      .style('font-size', '12px')\n      .style('font-family', 'var(--tb-config-font-family)')\n      .style('color', 'var(--tb-service-font-4)')\n      .style('stroke-width', '0.1em')\n      .call(\n        d3\n          .axisBottom(vm.xAxis)\n          .ticks(4)\n          .tickFormat(date => formatDate(date))\n      );\n  }\n\n  function drawYAxis() {\n    let { custom } = widgetContext;\n    let { viewWidth, viewHeight, margin } = vm.d3Config;\n    const width = viewWidth - margin.left - margin.right;\n    const height = viewHeight - margin.top - margin.bottom;\n\n    // xAxis 그리기\n    //d3.max(vm.lineData, d => d.value)\n    vm.yAxis = d3.scaleLinear([100, 0], [0, height]);\n    vm.$yAxis = vm.$d3\n      .append('g')\n      .attr('class', 'axis')\n      .attr('transform', 'translate(' + (viewWidth - width) + ', ' + margin.top + ')')\n      .style('font-size', '12px')\n      .style('font-family', 'var(--tb-config-font-family)')\n      .style('color', 'var(--tb-service-font-4)')\n      .style('stroke-width', '0.1em')\n      .call(d3.axisLeft(vm.yAxis).ticks(5));\n  }\n\n  function drawMain() {\n    let { custom } = widgetContext;\n    let { viewWidth, viewHeight, margin } = vm.d3Config;\n    const x = vm.xAxis;\n\n    vm.$d3\n      .append('g')\n      .attr('class', 'main-group')\n      .append('rect')\n      .attr('class', 'background')\n      .attr('x', margin.left)\n      .attr('width', viewWidth - margin.left - margin.right)\n      .attr('height', viewHeight - margin.bottom)\n      .attr('fill', 'var(--tb-service-background-1)')\n      .attr('stroke', 'var(--tb-service-border-1)');\n\n    let dayLineList = [vm.startTs];\n    let interval = (_.floor((vm.endTs - vm.startTs) / (7 * DAY_MS)) + 1) * DAY_MS;\n    for (let i = vm.startTs; i < moment(vm.endTs).endOf('day').valueOf(); i += interval) {\n      if (moment(i).startOf('day').valueOf() > vm.startTs) {\n        dayLineList.push(moment(i).startOf('day').valueOf());\n      }\n    }\n    dayLineList.sort();\n    if (vm.endTs - vm.startTs <= DAY_MS) {\n      dayLineList = [];\n    }\n\n    vm.$d3\n      .select(`.main-group`)\n      .append('g')\n      .attr('class', `day-group`)\n      .selectAll('g')\n      .data(dayLineList)\n      .enter()\n      .append('rect')\n      .attr('class', 'day-line')\n      .attr('x', d => margin.left + x(d))\n      .attr('width', d => {\n        let endTs = d + interval;\n        if (endTs > vm.endTs) {\n          endTs = vm.endTs;\n        }\n        if (d == vm.startTs) {\n          endTs = moment(d)\n            .add(_.floor(interval / DAY_MS), 'days')\n            .startOf('day')\n            .valueOf();\n        }\n        return x(endTs) - x(d);\n      })\n      .attr('height', viewHeight - margin.bottom)\n      .attr('fill', (d, i) => {\n        return i % 2 == 0 ? 'var(--tb-service-background-4)' : 'var(--tb-service-background-2)';\n      })\n      .attr('opacity', 0.5)\n      .attr('stroke', 'var(--tb-service-border-1)');\n  }\n\n  function drawLine() {\n    let { viewWidth, viewHeight, margin } = vm.d3Config;\n    const x = vm.xAxis;\n    const y = vm.yAxis;\n\n    vm.$d3.select('.main-group').append('g').attr('class', `line`);\n\n    const line = d3\n      .line()\n      .x(d => x(d.ts))\n      .y(d => y(d.value));\n\n    vm.$d3\n      .select(`.line`)\n      .append('path')\n      .style('transform', `translate(${margin.left}px, ${margin.top}px)`)\n      .attr('fill', 'none')\n      .attr('stroke', 'var(--tb-service-font-3)')\n      .attr('stroke-width', 1)\n      .attr(\n        'd',\n        line([\n          { ts: vm.startTs, value: 0 },\n          { ts: vm.endTs, value: 0 },\n        ])\n      );\n\n    // 상태 변화 막대 그리기\n\n    vm.$d3\n      .select(`.line`)\n      .append('path')\n      .style('transform', `translate(${margin.left}px, ${margin.top}px)`)\n      .attr('fill', 'none')\n      .attr('stroke', 'var(--tb-alarm-major)')\n      .attr('stroke-width', 1.5)\n      .attr('d', line(vm.lineData));\n  }\n\n  function pointermoved(event) {\n    let { custom } = widgetContext;\n    let { viewWidth, viewHeight, margin } = vm.d3Config;\n    const i = bisect(vm.lineData, vm.xAxis.invert(d3.pointer(event)[0] - margin.left));\n    vm.$tooltip.style('display', null);\n    vm.$vertical.style('display', null);\n    vm.$horizontal.style('display', null);\n    let standard = (viewHeight - margin.bottom) / 2;\n    let yTrans = 0;\n    let xTrans = 0;\n    if (vm.xAxis(vm.lineData[i].ts) < margin.left + 60) {\n      xTrans = 60;\n    }\n    if (vm.xAxis(vm.lineData[i].ts) > viewWidth - margin.left - margin.right - 60) {\n      xTrans = -60;\n    }\n    if (vm.yAxis(vm.lineData[i].value) > standard) {\n      yTrans = -60;\n    } else {\n      yTrans = 0;\n    }\n    vm.$tooltip.attr(\n      'transform',\n      `translate(${margin.left + vm.xAxis(vm.lineData[i].ts) + xTrans},${vm.yAxis(vm.lineData[i].value) + yTrans})`\n    );\n    vm.$vertical.attr('transform', `translate(${margin.left + vm.xAxis(vm.lineData[i].ts)},0)`);\n    vm.$horizontal.attr('transform', `translate(0,${vm.yAxis(vm.lineData[i].value) + margin.top})`);\n\n    const path = vm.$tooltip.selectAll('path').data([,]).join('path').attr('fill', 'rgba(25,25,25,0.9)');\n    const text = vm.$tooltip\n      .selectAll('text')\n      .data([,])\n      .join('text')\n      .call(text =>\n        text\n          .selectAll('tspan')\n          .data([formatFullDate(vm.lineData[i].ts), vm.lineData[i].value])\n          .join('tspan')\n          .attr('x', 0)\n          .attr('y', (_, i) => `${i * 1.1}em`)\n          .attr('font-weight', (_, i) => (i ? null : 'bold'))\n          .attr('fill', 'var(--tb-service-font-0)')\n          .attr('font-size', '12px')\n          .text(d => d)\n      );\n\n    vm.$vertical\n      .selectAll('path')\n      .data([,])\n      .join('path')\n      .attr('stroke', 'var(--tb-service-font-3)')\n      .attr('stroke-width', 1)\n      .attr('d', `M0,0V${viewHeight - margin.bottom}`);\n    vm.$horizontal\n      .selectAll('path')\n      .data([,])\n      .join('path')\n      .attr('stroke', 'var(--tb-service-font-3)')\n      .attr('stroke-width', 1)\n      .attr('d', `M${margin.left},0H${viewWidth - margin.right}`);\n\n    size(text, path);\n  }\n\n  function pointerleft() {\n    vm.$tooltip.style('display', 'none');\n    vm.$vertical.style('display', 'none');\n    vm.$horizontal.style('display', 'none');\n  }\n\n  function size(text, path) {\n    const { x, y, width: w, height: h } = text.node().getBBox();\n    text.attr('transform', `translate(${-w / 2},${15 - y})`);\n    path.attr('d', `M${-w / 2 - 10},5H-15H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n  }\n\n  function loadData(key) {\n    return new Promise((resolve, reject) => {\n      let acc = 'NONE';\n      if (vm.endTs - vm.startTs > 31 * DAY_MS) {\n        acc = 'AVG';\n      }\n      attributeService\n        .getEntityTimeseries(\n          additionalParams.originator,\n          [key],\n          vm.startTs,\n          vm.endTs,\n          50000,\n          acc,\n          Math.floor((vm.endTs - vm.startTs) / 500),\n          'ASC',\n          true\n        )\n        .subscribe(datas => {\n          resolve(datas);\n        });\n    });\n  }\n}\n\nfunction getStyle(target) {\n  return widgetContext.custom.computedStyle.getPropertyValue(target);\n}\n\nfunction formatDate(date) {\n  if (d3.timeHour(date) < date) {\n    return d3.timeFormat(t('thingplus.time-format.d3-hm'))(date);\n  } else if (d3.timeDay(date) < date) {\n    return d3.timeFormat(t('thingplus.time-format.d3-dh'))(date);\n  } else {\n    return d3.timeFormat(t('thingplus.time-format.d3-md'))(date);\n  }\n}\n\nfunction formatFullDate(date) {\n  return moment(date).format('YYYY-MM-DD HH:mm');\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "734c4115-42cb-e065-d66c-c251b613585f"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "36b22b9c-1102-12f6-c81b-45ebe6bc120b"
      }
    },
    "states": {
      "default": {
        "name": "{i18n:thingplus.menu.event}",
        "root": true,
        "layouts": {
          "main": {
            "widgets": {
              "984f4fbf-0dbb-286b-3ae5-7e33397148e8": {
                "sizeX": 97,
                "sizeY": 4,
                "row": 0,
                "col": 0,
                "mobileHeight": 1
              },
              "36b22b9c-1102-12f6-c81b-45ebe6bc120b": {
                "sizeX": 95,
                "sizeY": 44,
                "row": 4,
                "col": 1
              }
            },
            "gridSettings": {
              "backgroundColor": "var(--tb-service-background-4)",
              "columns": 97,
              "margin": 0,
              "marginUnit": "px",
              "mobileMargin": 0,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": true,
              "mobileRowHeight": 70
            }
          }
        }
      }
    },
    "entityAliases": {
      "df94890c-7d0f-6a19-4bdb-ac4261c9450f": {
        "id": "df94890c-7d0f-6a19-4bdb-ac4261c9450f",
        "alias": "Current User Owner",
        "filter": {
          "type": "singleEntity",
          "resolveMultiple": false,
          "singleEntity": {
            "entityType": "CURRENT_USER_OWNER",
            "id": "13814000-1dd2-11b2-8080-808080808080"
          }
        }
      },
      "c0bb6563-92cc-9549-205f-5fac08f219f7": {
        "id": "c0bb6563-92cc-9549-205f-5fac08f219f7",
        "alias": "Selected Entity",
        "filter": {
          "type": "stateEntity",
          "resolveMultiple": false,
          "stateEntityParamName": null,
          "defaultStateEntity": {
            "entityType": "CURRENT_USER_OWNER",
            "id": "13814000-1dd2-11b2-8080-808080808080"
          }
        }
      },
      "d7bbcc07-e2d1-fa22-4cc5-bd477cfb54b0": {
        "id": "d7bbcc07-e2d1-fa22-4cc5-bd477cfb54b0",
        "alias": "Selected Entity Device",
        "filter": {
          "type": "deviceSearchQuery",
          "resolveMultiple": true,
          "rootStateEntity": true,
          "stateEntityParamName": null,
          "defaultStateEntity": {
            "entityType": "CURRENT_USER_OWNER",
            "id": "13814000-1dd2-11b2-8080-808080808080"
          },
          "rootEntity": null,
          "direction": "FROM",
          "maxLevel": 3,
          "fetchLastLevelOnly": false,
          "relationType": "Contains",
          "deviceTypes": [
            "device"
          ]
        }
      }
    },
    "filters": {},
    "timewindow": {
      "displayValue": "",
      "hideInterval": false,
      "hideAggregation": false,
      "hideAggInterval": false,
      "hideTimezone": false,
      "selectedTab": 0,
      "realtime": {
        "realtimeType": 0,
        "interval": 1000,
        "timewindowMs": 60000,
        "quickInterval": "CURRENT_DAY"
      },
      "history": {
        "historyType": 0,
        "interval": 1000,
        "timewindowMs": 60000,
        "fixedTimewindow": {
          "startTimeMs": 1674707348712,
          "endTimeMs": 1674793748712
        },
        "quickInterval": "CURRENT_DAY"
      },
      "aggregation": {
        "type": "AVG",
        "limit": 25000
      }
    },
    "settings": {
      "stateControllerId": "entity",
      "showTitle": false,
      "showDashboardsSelect": false,
      "showEntitiesSelect": false,
      "showDashboardTimewindow": false,
      "showDashboardExport": false,
      "toolbarAlwaysOpen": true,
      "titleColor": "rgba(0,0,0,0.870588)",
      "showDashboardLogo": false,
      "dashboardLogoUrl": null,
      "hideToolbar": true,
      "showFilters": false,
      "showUpdateDashboardImage": false
    }
  },
  "name": "Event"
}