{
  "title": "User Management",
  "image": null,
  "mobileHide": false,
  "mobileOrder": null,
  "configuration": {
    "description": "",
    "widgets": {
      "06836d98-82f6-2ef2-eab8-6be7e7d0e7cb": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_maintain_widgets",
        "typeAlias": "maintain_entity",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 7.5,
        "sizeY": 3,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "104fea86-3d10-38f3-e8f0-c336b0d8ce1d",
              "filterId": null,
              "dataKeys": []
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "5d9aa730-0372-039f-03ea-4d1d693364ee",
              "filterId": "b560db76-be75-7c38-1d69-7812f8d267ef",
              "dataKeys": [
                {
                  "name": "customerL1Name",
                  "type": "attribute",
                  "label": "thingplus.label.customerL1-name",
                  "color": "#2196f3",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false
                  },
                  "_hash": 0.812169567258564,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "additionalInfo",
                  "type": "entityField",
                  "label": "thingplus.label.user-type",
                  "color": "#ffeb3b",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if(!value){\n    return '-'\n}\nlet json = JSON.parse(value)\nreturn ctx.custom.t('thingplus.label.' + json.userAuthority)"
                  },
                  "_hash": 0.1480515218783265,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "firstName",
                  "type": "entityField",
                  "label": "thingplus.label.user-name",
                  "color": "#e91e63",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false
                  },
                  "_hash": 0.5504652994275283,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "additionalInfo",
                  "type": "entityField",
                  "label": "thingplus.label.department",
                  "color": "#ffeb3b",
                  "settings": {
                    "hidden": true,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if(!value){\n    return '-'\n}\nlet json = JSON.parse(value)\nreturn json.department;"
                  },
                  "_hash": 0.2535880737289351,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "additionalInfo",
                  "type": "entityField",
                  "label": "thingplus.label.position",
                  "color": "#3f51b5",
                  "settings": {
                    "hidden": true,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if(!value){\n    return '-'\n}\nlet json = JSON.parse(value)\nreturn json.position;"
                  },
                  "_hash": 0.24251208302689609,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "additionalInfo",
                  "type": "entityField",
                  "label": "thingplus.label.phone",
                  "color": "#e91e63",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if(!value){\n    return '-'\n}\nlet json = JSON.parse(value)\nreturn json.phone;"
                  },
                  "_hash": 0.906600068746557,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "email",
                  "type": "entityField",
                  "label": "thingplus.label.email-id",
                  "color": "#e91e63",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false
                  },
                  "_hash": 0.3772338696316426,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "createdTime",
                  "type": "entityField",
                  "label": "thingplus.label.registration-date",
                  "color": "#3f51b5",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "if(value != 0){\n    var timeFormat = ctx.custom.t('thingplus.time-format.ymd') \n    return moment(value).format(timeFormat)\n}else {\n    return '-'\n}\n"
                  },
                  "_hash": 0.5732472165327356,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "activate",
                  "type": "attribute",
                  "label": "activate",
                  "color": "#e91e63",
                  "settings": {
                    "hidden": true,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false
                  },
                  "_hash": 0.5523249465237225,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ]
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "var(--tb-service-background-0)",
          "color": "var(--tb-service-accent)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 1630,
              "filterLevel": 1,
              "useCellActionIconFunction": true,
              "cellActionIconFunction": "let result = action.icon\nif(action.name == 'Activate'){\n    if(ctx.custom.mainData[tr.index].activate == 'false'){\n        return 'wifi';\n    }else {\n        return 'refresh';\n    }\n}\nreturn result;"
            }
          },
          "title": "thingplus.page.admin.customerL1-user-list",
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": true,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default"
          },
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "1.6em",
            "font-weight": 500,
            "letter-spacing": "-0.04em",
            "color": "var(--tb-service-font-5)"
          },
          "noDataDisplayMessage": "",
          "showLegend": false,
          "actions": {
            "widgetHeaderButton": [
              {
                "name": "thingplus.action.new",
                "icon": "add",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"add-customerL1-user-form\">\n  <form\n    #addEntityForm=\"ngForm\"\n    [formGroup]=\"addEntityFormGroup\"\n    (ngSubmit)=\"save()\"\n    style=\"font-size: {{calcFontSize()}}px;\"\n  >\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\" translate>thingplus.dialog.create-customerL1-user-title</span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 0.4em\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\" fxLayoutGap=\"2em\">\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div\n          fxFlex=\"100\"\n          fxLayout=\"column\"\n          fxLayoutGap=\"0.6em\"\n          class=\"input-box\"\n          [ngClass]=\"{'error': ownerLevel == 0 && addEntityFormGroup.get('customerL1').hasError('required'), 'disabled': ownerLevel != 0}\"\n        >\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.customerL1</label>\n            <span> * </span>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <mat-select formControlName=\"customerL1\" required *ngIf=\"ownerLevel == 0\">\n              <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n                {{customerL1.name}}\n              </mat-option>\n            </mat-select>\n            <input matInput formControlName=\"customerL1Name\" *ngIf=\"ownerLevel != 0\" readonly />\n          </div>\n          <div class=\"error-box\" translate>thingplus.help.error-required-customerL1</div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div\n          fxFlex=\"100\"\n          fxLayout=\"column\"\n          fxLayoutGap=\"0.6em\"\n          class=\"input-box\"\n          [ngClass]=\"{'disabled': ownerLevel != 0}\"\n        >\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.user-type</label>\n          </div>\n          <div class=\"value-box no-border\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <button\n              class=\"radio-btn\"\n              type=\"button\"\n              fxFlex\n              [ngClass]=\"{'active': addEntityFormGroup.get('userAuthority').value == 'admin'}\"\n              (click)=\"setUserAuthority($event, 'admin')\"\n              translate\n            >\n              thingplus.label.admin\n            </button>\n            <button\n              class=\"radio-btn\"\n              type=\"button\"\n              fxFlex\n              [ngClass]=\"{'active': addEntityFormGroup.get('userAuthority').value == 'general'}\"\n              (click)=\"setUserAuthority($event, 'general')\"\n              translate\n            >\n              thingplus.label.general\n            </button>\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div\n          fxFlex=\"100\"\n          fxLayout=\"column\"\n          fxLayoutGap=\"0.6em\"\n          class=\"input-box\"\n          [ngClass]=\"{error: addEntityFormGroup.get('firstName').hasError('required') || addEntityFormGroup.get('firstName').hasError('maxlength')}\"\n        >\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.user-name</label>\n            <span> * </span>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput formControlName=\"firstName\" required />\n          </div>\n          <div class=\"error-box\" *ngIf=\"addEntityFormGroup.get('firstName').hasError('required')\" translate>\n            thingplus.help.error-required-user-name\n          </div>\n          <div class=\"error-box\" *ngIf=\"addEntityFormGroup.get('firstName').hasError('maxlength')\" translate>\n            thingplus.help.error-max-length\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.department</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput maxlength=\"16\" formControlName=\"department\" />\n          </div>\n        </div>\n        <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.position</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput maxlength=\"16\" formControlName=\"position\" />\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.phone</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput maxlength=\"16\" formControlName=\"phone\" />\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div\n          fxFlex\n          fxLayout=\"column\"\n          fxLayoutGap=\"0.6em\"\n          class=\"input-box\"\n          [ngClass]=\"{error: addEntityFormGroup.get('email').hasError('required') || addEntityFormGroup.get('email').hasError('email')}\"\n        >\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.email</label>\n            <span> * </span>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput formControlName=\"email\" type=\"email\" email required />\n          </div>\n          <div class=\"error-box\" *ngIf=\"addEntityFormGroup.get('email').hasError('required')\" translate>\n            thingplus.help.error-required-email-id\n          </div>\n          <div class=\"error-box\" *ngIf=\"addEntityFormGroup.get('email').hasError('email')\" translate>\n            thingplus.help.error-invalid-email-id\n          </div>\n        </div>\n      </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        translate\n      >\n        thingplus.action.close\n      </button>\n      <button\n        class=\"button save-button\"\n        type=\"submit\"\n        [disabled]=\"(isLoading$ | async) || addEntityForm.invalid\"\n        translate\n      >\n        thingplus.action.save\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#add-customerL1-user-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#add-customerL1-user-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#add-customerL1-user-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#add-customerL1-user-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-customerL1-user-form .dialog-close i {\n  font-size: 1.4em;\n}\n#add-customerL1-user-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#add-customerL1-user-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#add-customerL1-user-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#add-customerL1-user-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#add-customerL1-user-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#add-customerL1-user-form .label-box {\n  color: var(--tb-service-font-3);\n  font-size: 1.2em;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-customerL1-user-form .input-box.disabled .label-box {\n  color: var(--tb-service-font-1);\n}\n#add-customerL1-user-form .value-box {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-customerL1-user-form .value-box.no-border {\n  border: none !important;\n}\n\n#add-customerL1-user-form .input-box:not(.disabled) .value-box:hover {\n  border-color: var(--tb-service-border-3);\n}\n#add-customerL1-user-form .input-box:not(.disabled) .value-box:focus-within {\n  border-color: var(--tb-service-accent);\n  caret-color: var(--tb-service-accent);\n}\n#add-customerL1-user-form .value-box *::placeholder {\n  color: var(--tb-service-font-4);\n}\n#add-customerL1-user-form .value-box input {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  caret-color: var(--tb-service-accent);\n}\n#add-customerL1-user-form .input-box.disabled .value-box {\n  background-color: var(--tb-service-background-1);\n}\n#add-customerL1-user-form .input-box.disabled .value-box input {\n  color: var(--tb-service-font-2);\n  cursor: default;\n}\n#add-customerL1-user-form .radio-btn {\n  all: unset;\n  color: var(--tb-service-font-5);\n  border: 1px solid var(--tb-service-border-0);\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  cursor: pointer;\n}\n#add-customerL1-user-form .input-box:not(.disabled) .radio-btn:not(.active):hover {\n  border-color: var(--tb-service-border-3);\n}\n#add-customerL1-user-form .input-box:not(.disabled) .radio-btn.active {\n  color: var(--tb-service-accent);\n  border-color: var(--tb-service-accent);\n}\n#add-customerL1-user-form .input-box.disabled .radio-btn:not(.active) {\n  color: var(--tb-service-font-1);\n  cursor: default;\n}\n#add-customerL1-user-form .input-box.disabled .radio-btn.active {\n  border-color: var(--tb-service-border-3);\n  cursor: default;\n}\n#add-customerL1-user-form .value-box .mat-select-trigger {\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  line-height: 1;\n}\n#add-customerL1-user-form .value-box .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n#add-customerL1-user-form .value-box .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n#add-customerL1-user-form .error-box {\n  display: none;\n  color: var(--tb-service-warn);\n  font-size: 1.2em;\n}\n#add-customerL1-user-form .input-box.error .label-box {\n  color: var(--tb-service-warn);\n}\n#add-customerL1-user-form .input-box.error .value-box {\n  border: 1px solid var(--tb-service-warn);\n}\n#add-customerL1-user-form .input-box.error .error-box {\n  display: block;\n  margin-top: calc(0.6em / 1.2);\n}\n\n#add-customerL1-user-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#add-customerL1-user-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-customerL1-user-form .save-button {\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-accent);\n}\n#add-customerL1-user-form .save-button:hover {\n  background-color: var(--tb-service-accent-hover);\n}\n#add-customerL1-user-form .save-button:active {\n  background-color: var(--tb-service-accent-pressed);\n}\n#add-customerL1-user-form .close-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#add-customerL1-user-form .close-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#add-customerL1-user-form .close-button:active {\n  background-color: var(--tb-service-border-0);\n}\n\n@media (min-width: 960px) {\n  #add-customerL1-user-form form {\n    width: 24vw;\n  }\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nconst t = widgetContext.custom.t;\n\nopenAddEntityDialog();\n\nfunction openAddEntityDialog() {\n  customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\n}\n\nfunction AddEntityDialogController(instance) {\n  let vm = instance;\n  vm.ownerId = widgetContext.defaultSubscription.configuredDatasources[0].entity.id;\n  vm.ownerLevel = widgetContext.$scope.ownerLevel;\n  vm.t = t;\n  vm.customerL1List = [{ name: t('thingplus.selector.select-customerL1'), value: '' }];\n  if (vm.ownerLevel == 0) {\n    vm.customerL1List = vm.customerL1List.concat(\n      widgetContext.custom.customerL1List\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  }\n\n  vm.addEntityFormGroup = vm.fb.group({\n    customerL1Name: [entityName],\n    userAuthority: ['general'],\n    firstName: [t('thingplus.label.user') + ' A', [vm.validators.maxLength(16)]],\n    department: [''],\n    position: [''],\n    phone: [''],\n    email: ['', [vm.validators.required, vm.validators.email]],\n  });\n  if (vm.ownerLevel == 0) {\n    vm.addEntityFormGroup.controls.customerL1 = vm.fb.control('', [vm.validators.required]);\n  }\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  vm.save = async function () {\n    vm.addEntityFormGroup.markAsPristine();\n    vm.dashboardList = await getDashboardList();\n    saveUser().subscribe(user => {\n      widgetContext.rxjs.forkJoin([saveRelation(user), saveAttribute(user)]).subscribe(() => {\n        widgetContext.updateAliases();\n        vm.dialogRef.close(null);\n      });\n    });\n  };\n  vm.setUserAuthority = function (e, type) {\n    vm.addEntityFormGroup.patchValue(\n      {\n        userAuthority: type,\n      },\n      { emitEvent: false }\n    );\n  };\n\n  async function getDashboardList() {\n    let dashboardList;\n    if (widgetContext.currentUser.authority == 'TENANT_ADMIN') {\n      dashboardList = await widgetContext.http.get(`/api/tenant/dashboards?pageSize=1024&page=0`).toPromise();\n    } else {\n      let customerId = widgetContext.currentUser.customerId;\n      dashboardList = await widgetContext.http\n        .get(`/api/customer/${customerId}/dashboards?pageSize=1024&page=0`)\n        .toPromise();\n    }\n    let result = {};\n    for (let i in dashboardList.data) {\n      result[dashboardList.data[i].title] = dashboardList.data[i].id.id;\n    }\n    return result;\n  }\n\n  function saveUser() {\n    let userAuthority = vm.addEntityFormGroup.get('userAuthority').value || 'general';\n    let firstName = vm.addEntityFormGroup.get('firstName').value;\n    let email = vm.addEntityFormGroup.get('email').value;\n    let customerL1Id = vm.addEntityFormGroup.get('customerL1').value || entityId.id;\n    let phone = vm.addEntityFormGroup.get('phone').value;\n    let department = vm.addEntityFormGroup.get('department').value;\n    let position = vm.addEntityFormGroup.get('position').value;\n\n    let userBody = {\n      additionalInfo: {\n        // description: '',\n        // defaultDashboardId: vm.dashboardList['Home'],\n        // defaultDashboardFullscreen: false,\n        userAuthority: userAuthority,\n        // lang: 'ko_KR',\n        // phone: phone,\n        // position: position,\n        // department: department\n      },\n      authority: 'CUSTOMER_USER',\n      customerId: { entityType: 'CUSTOMER', id: customerL1Id },\n      email: email,\n      firstName: firstName,\n      tenantId: { entityType: 'TENANT', id: widgetContext.currentUser.tenantId },\n    };\n    return userService.saveUser(userBody);\n  }\n\n  function saveRelation(user) {\n    let CustomerL1Id = vm.addEntityFormGroup.get('customerL1').value || entityId.id;\n    let relationBody = {\n      from: {\n        entityType: 'CUSTOMER',\n        id: CustomerL1Id,\n      },\n      to: user.id,\n      type: 'Contains',\n    };\n    return entityRelationService.saveRelation(relationBody);\n  }\n\n  function saveAttribute(user) {\n    let customerL1Name = entityName;\n    let customerL1Id = vm.addEntityFormGroup.get('customerL1').value;\n    if (customerL1Id) {\n      let customerL1Index = vm.customerL1List.findIndex(x => x.value == customerL1Id);\n      if (customerL1Index !== -1) {\n        customerL1Name = vm.customerL1List[customerL1Index].name;\n      }\n    }\n\n    let attributeBody = [\n      { key: 'customerType', value: 'CUSTOMER_L1' },\n      { key: 'customerL1Name', value: customerL1Name },\n    ];\n    return attributeService.saveEntityAttributes(user.id, 'SERVER_SCOPE', attributeBody);\n  }\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "b5246b1c-f7f9-5ab0-c430-ae7cbca73861"
              }
            ],
            "actionCellButton": [
              {
                "name": "Edit",
                "icon": "edit",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"edit-customerL1-user-form\">\n  <form\n    #addEntityForm=\"ngForm\"\n    [formGroup]=\"editEntityFormGroup\"\n    (ngSubmit)=\"save()\"\n    style=\"font-size: {{calcFontSize()}}px;\"\n  >\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\" translate>thingplus.dialog.edit-customerL1-user-title</span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 0.4em\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\" fxLayoutGap=\"2em\">\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box disabled\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.customerL1</label>\n            <span> * </span>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput formControlName=\"customerL1Name\" readonly />\n          </div>\n          <div class=\"error-box\" translate>thingplus.help.error-required-customerL1</div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div\n          fxFlex=\"100\"\n          fxLayout=\"column\"\n          fxLayoutGap=\"0.6em\"\n          class=\"input-box\"\n          [ngClass]=\"{'disabled': ownerLevel != 0}\"\n        >\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.user-type</label>\n          </div>\n          <div class=\"value-box no-border\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <button\n              class=\"radio-btn\"\n              type=\"button\"\n              fxFlex\n              [ngClass]=\"{'active': editEntityFormGroup.get('userAuthority').value == 'admin'}\"\n              (click)=\"setUserAuthority($event, 'admin')\"\n              translate\n            >\n              thingplus.label.admin\n            </button>\n            <button\n              class=\"radio-btn\"\n              type=\"button\"\n              fxFlex\n              [ngClass]=\"{'active': editEntityFormGroup.get('userAuthority').value == 'general'}\"\n              (click)=\"setUserAuthority($event, 'general')\"\n              translate\n            >\n              thingplus.label.general\n            </button>\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div\n          fxFlex=\"100\"\n          fxLayout=\"column\"\n          fxLayoutGap=\"0.6em\"\n          class=\"input-box\"\n          [ngClass]=\"{error: editEntityFormGroup.get('firstName').hasError('required') || editEntityFormGroup.get('firstName').hasError('maxlength')}\"\n        >\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.user-name</label>\n            <span> * </span>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput formControlName=\"firstName\" required />\n          </div>\n          <div class=\"error-box\" *ngIf=\"editEntityFormGroup.get('firstName').hasError('required')\" translate>\n            thingplus.help.error-required-customerL1-name\n          </div>\n          <div class=\"error-box\" *ngIf=\"editEntityFormGroup.get('firstName').hasError('maxlength')\" translate>\n            thingplus.help.error-max-length\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.department</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput maxlength=\"16\" formControlName=\"department\" />\n          </div>\n        </div>\n        <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.position</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput maxlength=\"16\" formControlName=\"position\" />\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.phone</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput maxlength=\"16\" formControlName=\"phone\" />\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div\n          fxFlex\n          fxLayout=\"column\"\n          fxLayoutGap=\"0.6em\"\n          class=\"input-box\"\n          [ngClass]=\"{error: editEntityFormGroup.get('email').hasError('required') || editEntityFormGroup.get('email').hasError('email')}\"\n        >\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.email</label>\n            <span> * </span>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput formControlName=\"email\" type=\"email\" email required />\n          </div>\n          <div class=\"error-box\" *ngIf=\"editEntityFormGroup.get('email').hasError('required')\" translate>\n            thingplus.help.error-required-email-id\n          </div>\n          <div class=\"error-box\" *ngIf=\"editEntityFormGroup.get('email').hasError('email')\" translate>\n            thingplus.help.error-invalid-email-id\n          </div>\n        </div>\n      </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        translate\n      >\n        thingplus.action.close\n      </button>\n      <button\n        class=\"button save-button\"\n        type=\"submit\"\n        [disabled]=\"(isLoading$ | async) || addEntityForm.invalid\"\n        translate\n      >\n        thingplus.action.save\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#edit-customerL1-user-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#edit-customerL1-user-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#edit-customerL1-user-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#edit-customerL1-user-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-customerL1-user-form .dialog-close i {\n  font-size: 1.4em;\n}\n#edit-customerL1-user-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#edit-customerL1-user-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#edit-customerL1-user-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#edit-customerL1-user-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#edit-customerL1-user-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#edit-customerL1-user-form .label-box {\n  color: var(--tb-service-font-3);\n  font-size: 1.2em;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-customerL1-user-form .input-box.disabled .label-box {\n  color: var(--tb-service-font-1);\n}\n#edit-customerL1-user-form .value-box {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-customerL1-user-form .value-box.no-border {\n  border: none !important;\n}\n\n#edit-customerL1-user-form .input-box:not(.disabled) .value-box:hover {\n  border-color: var(--tb-service-border-3);\n}\n#edit-customerL1-user-form .input-box:not(.disabled) .value-box:focus-within {\n  border-color: var(--tb-service-accent);\n  caret-color: var(--tb-service-accent);\n}\n#edit-customerL1-user-form .value-box *::placeholder {\n  color: var(--tb-service-font-4);\n}\n#edit-customerL1-user-form .value-box input {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  caret-color: var(--tb-service-accent);\n}\n#edit-customerL1-user-form .input-box.disabled .value-box {\n  background-color: var(--tb-service-background-1);\n}\n#edit-customerL1-user-form .input-box.disabled .value-box input {\n  color: var(--tb-service-font-2);\n  cursor: default;\n}\n#edit-customerL1-user-form .radio-btn {\n  all: unset;\n  color: var(--tb-service-font-5);\n  border: 1px solid var(--tb-service-border-0);\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  cursor: pointer;\n}\n#edit-customerL1-user-form .input-box:not(.disabled) .radio-btn:not(.active):hover {\n  border-color: var(--tb-service-border-3);\n}\n#edit-customerL1-user-form .input-box:not(.disabled) .radio-btn.active {\n  color: var(--tb-service-accent);\n  border-color: var(--tb-service-accent);\n}\n#edit-customerL1-user-form .input-box.disabled .radio-btn:not(.active) {\n  color: var(--tb-service-font-1);\n  cursor: default;\n}\n#edit-customerL1-user-form .input-box.disabled .radio-btn.active {\n  border-color: var(--tb-service-border-3);\n  cursor: default;\n}\n#edit-customerL1-user-form .value-box .mat-select-trigger {\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  line-height: 1;\n}\n#edit-customerL1-user-form .value-box .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n#edit-customerL1-user-form .value-box .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n#edit-customerL1-user-form .error-box {\n  display: none;\n  color: var(--tb-service-warn);\n  font-size: 1.2em;\n}\n#edit-customerL1-user-form .input-box.error .label-box {\n  color: var(--tb-service-warn);\n}\n#edit-customerL1-user-form .input-box.error .value-box {\n  border: 1px solid var(--tb-service-warn);\n}\n#edit-customerL1-user-form .input-box.error .error-box {\n  display: block;\n  margin-top: calc(0.6em / 1.2);\n}\n\n#edit-customerL1-user-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#edit-customerL1-user-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-customerL1-user-form .save-button {\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-accent);\n}\n#edit-customerL1-user-form .save-button:hover {\n  background-color: var(--tb-service-accent-hover);\n}\n#edit-customerL1-user-form .save-button:active {\n  background-color: var(--tb-service-accent-pressed);\n}\n#edit-customerL1-user-form .close-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#edit-customerL1-user-form .close-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#edit-customerL1-user-form .close-button:active {\n  background-color: var(--tb-service-border-0);\n}\n\n@media (min-width: 960px) {\n  #edit-customerL1-user-form form {\n    width: 24vw;\n  }\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nconst t = widgetContext.custom.t;\n\nif (\n  widgetContext.$scope.ownerLevel > 0 &&\n  additionalParams.userAuthority == 'admin' &&\n  entityId.id != widgetContext.currentUser.userId\n) {\n  window.alert(t('thingplus.help.error-unauthorized-with-user'));\n  return;\n}\n\nopenAddEntityDialog();\n\nfunction openAddEntityDialog() {\n  customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n  let vm = instance;\n  vm.ownerId = widgetContext.defaultSubscription.configuredDatasources[0].entity.id;\n  vm.ownerLevel = widgetContext.$scope.ownerLevel;\n  vm.t = t;\n  let additionalInfo = JSON.parse(additionalParams.additionalInfo);\n  vm.editEntityFormGroup = vm.fb.group({\n    customerL1Name: [additionalParams.customerL1Name],\n    userAuthority: [additionalInfo.userAuthority || 'general'],\n    firstName: [additionalParams.firstName, [vm.validators.maxLength(16)]],\n    department: [additionalInfo.department],\n    position: [additionalInfo.position],\n    phone: [additionalInfo.phone],\n    email: [additionalParams.email, [vm.validators.required, vm.validators.email]],\n  });\n\n  getUser(entityId.id).subscribe(user => {\n    vm.originUser = user;\n  });\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  vm.save = async function () {\n    vm.editEntityFormGroup.markAsPristine();\n    saveUser().subscribe(user => {\n      widgetContext.updateAliases();\n      vm.dialogRef.close(null);\n    });\n  };\n  vm.setUserAuthority = function (e, type) {\n    vm.editEntityFormGroup.patchValue(\n      {\n        userAuthority: type,\n      },\n      { emitEvent: false }\n    );\n  };\n\n  function getUser(userId) {\n    return userService.getUser(userId);\n  }\n\n  function saveUser() {\n    let email = vm.editEntityFormGroup.get('email').value;\n    let userAuthority = vm.editEntityFormGroup.get('userAuthority').value;\n    let phone = vm.editEntityFormGroup.get('phone').value;\n    let department = vm.editEntityFormGroup.get('department').value;\n    let position = vm.editEntityFormGroup.get('position').value;\n\n    if (_.isNil(vm.originUser)) return;\n    vm.originUser.email = email;\n    vm.originUser.additionalInfo.userAuthority = userAuthority;\n    vm.originUser.additionalInfo.phone = phone;\n    vm.originUser.additionalInfo.department = department;\n    vm.originUser.additionalInfo.position = position;\n\n    return userService.saveUser(vm.originUser);\n  }\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "f3f999ea-59c4-0155-617e-f644a99d7842"
              },
              {
                "name": "Delete",
                "icon": "delete",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"delete-customerL1-user-form\">\n  <form\n    #deleteEntityForm=\"ngForm\"\n    [formGroup]=\"deleteEntityFormGroup\"\n    (ngSubmit)=\"save()\"\n    style=\"font-size: {{calcFontSize()}}px;\"\n  >\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\" translate>thingplus.dialog.delete-customerL1-user-title</span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 4px\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n      <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\n        <div class=\"label\">\n          {{'thingplus.dialog.delete-customerL1-user-content' | translate:{entityName: entityName} }}\n        </div>\n      </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        translate\n      >\n        thingplus.action.close\n      </button>\n      <button\n        class=\"button delete-button\"\n        type=\"submit\"\n        [disabled]=\"(isLoading$ | async) || deleteEntityForm.invalid\"\n        translate\n      >\n        thingplus.action.delete\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#delete-customerL1-user-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#delete-customerL1-user-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#delete-customerL1-user-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#delete-customerL1-user-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#delete-customerL1-user-form .dialog-close i {\n  font-size: 1.4em;\n}\n#delete-customerL1-user-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#delete-customerL1-user-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#delete-customerL1-user-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#delete-customerL1-user-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#delete-customerL1-user-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#delete-customerL1-user-form .label {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n}\n\n#delete-customerL1-user-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#delete-customerL1-user-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#delete-customerL1-user-form .delete-button {\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-warn);\n}\n#delete-customerL1-user-form .delete-button:hover {\n  background-color: var(--tb-service-warn-hover);\n}\n#delete-customerL1-user-form .delete-button:active {\n  background-color: var(--tb-service-warn-pressed);\n}\n#delete-customerL1-user-form .close-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#delete-customerL1-user-form .close-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#delete-customerL1-user-form .close-button:active {\n  background-color: var(--tb-service-border-0);\n}\n\n@media (min-width: 960px) {\n  #delete-customerL1-user-form form {\n    width: 24vw;\n  }\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\n\nconst t = widgetContext.custom.t;\n\nif (\n  widgetContext.$scope.ownerLevel > 0 &&\n  additionalParams.userType == 'admin' &&\n  entityId.id != widgetContext.currentUser.userId\n) {\n  window.alert(t('thingplus.help.error-unauthorized-with-user'));\n  return;\n}\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n  customDialog.customDialog(htmlTemplate, DeleteEntityDialogController).subscribe();\n}\n\nfunction DeleteEntityDialogController(instance) {\n  let vm = instance;\n  vm.entityName = entityName;\n  vm.deleteEntityFormGroup = vm.fb.group({});\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  vm.save = function () {\n    vm.deleteEntityFormGroup.markAsPristine();\n    deleteEntityObservable(entityId).subscribe(\n      function success() {\n        widgetContext.updateAliases();\n        vm.dialogRef.close(null);\n      },\n      function fail() {\n        showErrorDialog();\n        vm.dialogRef.close(null);\n      }\n    );\n  };\n\n  function deleteEntityObservable(entityId) {\n    return userService.deleteUser(entityId.id);\n  }\n\n  function showErrorDialog() {\n    let title = t('thingplus.dialog.error-delete-title');\n    let content = t('thingplus.dialog.error-delete-content');\n    dialogs.alert(title, content, 'CLOSE').subscribe(function (result) {});\n  }\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "795c291d-ea2c-5bd0-2550-c545fd222e62"
              },
              {
                "name": "Activate",
                "icon": "wifi",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"activate-customerL1-user-form\">\n  <form\n    #activateEntityForm=\"ngForm\"\n    [formGroup]=\"activateEntityFormGroup\"\n    (ngSubmit)=\"save()\"\n    style=\"font-size: {{calcFontSize()}}px;\"\n  >\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\">\n        {{action == 'activate' ? ('thingplus.dialog.activate-customerL1-user-title' | translate) :\n        ('thingplus.dialog.reset-customerL1-user-title' | translate)}}\n      </span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 4px\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\" fxLayoutGap=\"2em\">\n      <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\" *ngIf=\"phase == 0\">\n        <div class=\"label\">\n          {{action == 'activate' ? ('thingplus.dialog.activate-customerL1-user-content' |\n          translate:{entityName:entityName}) : ('thingplus.dialog.reset-customerL1-user-content' |\n          translate:{entityName:entityName}) }}\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\" *ngIf=\"phase == 1 && action == 'activate'\">\n        <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.create-password-now</label>\n          </div>\n          <div class=\"value-box no-border\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <button\n              class=\"link-button\"\n              fxFlex\n              fxLayout=\"row\"\n              fxLayoutAlign=\"space-between center\"\n              fxLayoutGap=\"1em\"\n              (click)=\"link($event)\"\n            >\n              <span translate>thingplus.action.go-to-create-password</span>\n              <i class=\"material-icons\">arrow_forward</i>\n            </button>\n          </div>\n          <div class=\"help-box\" translate>thingplus.help.help-activate-password</div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\" *ngIf=\"phase == 1 && action == 'activate'\">\n        <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.share-link</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <span>{{activationLink}}</span>\n            <button class=\"copy-btn\" (click)=\"copy($event)\" translate>thingplus.action.copy</button>\n          </div>\n        </div>\n      </div>\n      <div class=\"label\" *ngIf=\"phase == 1 && action == 'reset'\">\n        {{'thingplus.dialog.reset-customer-user-send-msg' | translate:{email:user.email} }}\n      </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        translate\n      >\n        thingplus.action.close\n      </button>\n      <button\n        class=\"button activate-button\"\n        [ngClass]=\"{'activate-button': action == 'activate', 'reset-button': action == 'reset'}\"\n        type=\"submit\"\n        [disabled]=\"(isLoading$ | async)\"\n        *ngIf=\"phase == 0\"\n      >\n        {{'thingplus.action.' + action | translate}}\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#activate-customerL1-user-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#activate-customerL1-user-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#activate-customerL1-user-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#activate-customerL1-user-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#activate-customerL1-user-form .dialog-close i {\n  font-size: 1.4em;\n}\n#activate-customerL1-user-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#activate-customerL1-user-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#activate-customerL1-user-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#activate-customerL1-user-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#activate-customerL1-user-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#activate-customerL1-user-form .label {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n  white-space: pre-line;\n}\n#activate-customerL1-user-form .label-box {\n  color: var(--tb-service-font-4);\n  font-size: 1.2em;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#activate-customerL1-user-form .value-box {\n  max-width: 100%;\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  color: var(--tb-service-font-5);\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#activate-customerL1-user-form .value-box.no-border {\n  border: none !important;\n}\n#activate-customerL1-user-form .link-button {\n  all: unset;\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-accent);\n  cursor: pointer;\n  transition-property: color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#activate-customerL1-user-form .link-button:hover {\n  border-color: var(--tb-service-accent-hover);\n  color: var(--tb-service-accent-hover);\n}\n#activate-customerL1-user-form .link-button:active {\n  border-color: var(--tb-service-accent-pressed);\n  color: var(--tb-service-accent-pressed);\n}\n#activate-customerL1-user-form .link-button span {\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n#activate-customerL1-user-form .link-button i {\n  font-size: 1.6em;\n  padding: 1em;\n}\n#activate-customerL1-user-form .value-box > span {\n  font-size: 1.6em;\n  padding: 1em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n#activate-customerL1-user-form .value-box .copy-btn {\n  all: unset;\n  font-size: 1.4em;\n  padding: 0.5em;\n  margin-right: 0.5em;\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-accent);\n  cursor: pointer;\n  white-space: nowrap;\n  transition-property: color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#activate-customerL1-user-form .value-box .copy-btn:hover {\n  border-color: var(--tb-service-accent-hover);\n  color: var(--tb-service-accent-hover);\n}\n#activate-customerL1-user-form .value-box .copy-btn:active {\n  border-color: var(--tb-service-accent-pressed);\n  color: var(--tb-service-accent-pressed);\n}\n\n#activate-customerL1-user-form .help-box {\n  color: var(--tb-service-accent);\n  font-size: 1.2em;\n}\n\n#activate-customerL1-user-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#activate-customerL1-user-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#activate-customerL1-user-form .activate-button {\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-accent);\n}\n#activate-customerL1-user-form .activate-button:hover {\n  background-color: var(--tb-service-accent-hover);\n}\n#activate-customerL1-user-form .activate-button:active {\n  background-color: var(--tb-service-accent-pressed);\n}\n#activate-customerL1-user-form .reset-button {\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-warn);\n}\n#activate-customerL1-user-form .reset-button:hover {\n  background-color: var(--tb-service-warn-hover);\n}\n#activate-customerL1-user-form .reset-button:active {\n  background-color: var(--tb-service-warn-pressed);\n}\n#activate-customerL1-user-form .close-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#activate-customerL1-user-form .close-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#activate-customerL1-user-form .close-button:active {\n  background-color: var(--tb-service-border-0);\n}\n\n@media (min-width: 960px) {\n  #activate-customerL1-user-form form {\n    width: 24vw;\n  }\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\n\nconst t = widgetContext.custom.t;\n\nif (\n  widgetContext.$scope.ownerLevel > 0 &&\n  additionalParams.userType == 'admin' &&\n  entityId.id != widgetContext.currentUser.userId\n) {\n  window.alert(t('thingplus.help.error-unauthorized-with-user'));\n  return;\n}\n\nopenActivateEntityDialog();\n\nfunction openActivateEntityDialog() {\n  customDialog.customDialog(htmlTemplate, ActivateEntityDialogController).subscribe();\n}\n\nfunction ActivateEntityDialogController(instance) {\n  let vm = instance;\n  vm.entityName = additionalParams.email;\n  vm.action = '';\n  vm.activationLink = '';\n  vm.activateEntityFormGroup = vm.fb.group({});\n  vm.phase = 0;\n\n  userService.getUser(entityId.id).subscribe(user => {\n    vm.user = user;\n    if (\n      !_.isNil(user.additionalInfo.userPasswordHistory) &&\n      Object.keys(user.additionalInfo.userPasswordHistory).length > 0\n    ) {\n      vm.action = 'reset';\n    } else {\n      vm.action = 'activate';\n    }\n  });\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  vm.save = function () {\n    vm.activateEntityFormGroup.markAsPristine();\n    if (vm.phase == 0) {\n      if (vm.action == 'reset') {\n        widgetContext.http.post(`/api/noauth/resetPasswordByEmail`, { email: vm.user.email }).subscribe(() => {\n          vm.phase = 1;\n        });\n      } else {\n        userService.getActivationLink(vm.user.id.id).subscribe(link => {\n          vm.phase = 1;\n          let code = link.split('activateToken=')[1];\n          vm.activationLink = window.location.origin + '/api/noauth/activate?activateToken=' + code;\n        });\n      }\n    }\n  };\n  vm.copy = function (e) {\n    navigator.clipboard\n      .writeText(vm.activationLink)\n      .then(() => window.alert(t('thingplus.dialog.reset-customer-user-copy-msg')));\n  };\n  vm.link = function (e) {\n    window.open(vm.activationLink);\n  };\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "1f10eda6-fff6-3d60-86c3-a8ddce9c58ac"
              }
            ],
            "headerButton": [
              {
                "name": "test",
                "icon": "more_horiz",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "custom",
                "customFunction": "console.log(widgetContext)",
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "7fa5897f-dc8f-7eb6-0d07-176416c1e27b"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "06836d98-82f6-2ef2-eab8-6be7e7d0e7cb"
      },
      "e4e46c38-1dca-9ad3-171f-614668a9b1da": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_maintain_widgets",
        "typeAlias": "maintain_entity",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 7.5,
        "sizeY": 3,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "104fea86-3d10-38f3-e8f0-c336b0d8ce1d",
              "filterId": null,
              "dataKeys": []
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "5d9aa730-0372-039f-03ea-4d1d693364ee",
              "filterId": "202abe9e-31d1-05a1-bb32-fdffd7d3187c",
              "dataKeys": [
                {
                  "name": "customerL1Name",
                  "type": "attribute",
                  "label": "thingplus.label.customerL1-name",
                  "color": "#2196f3",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false
                  },
                  "_hash": 0.6986514784052504,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "customerL2Name",
                  "type": "attribute",
                  "label": "thingplus.label.customerL2-name",
                  "color": "#e91e63",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false
                  },
                  "_hash": 0.951494812684073,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "additionalInfo",
                  "type": "entityField",
                  "label": "thingplus.label.user-type",
                  "color": "#9c27b0",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if(!value){\n    return '-'\n}\nlet json = JSON.parse(value)\nreturn ctx.custom.t('thingplus.label.' + json.userAuthority)"
                  },
                  "_hash": 0.01825732873084407,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "firstName",
                  "type": "entityField",
                  "label": "thingplus.label.user-name",
                  "color": "#f44336",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false
                  },
                  "_hash": 0.042000122138509566,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "additionalInfo",
                  "type": "entityField",
                  "label": "thingplus.label.department",
                  "color": "#8bc34a",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if(!value){\n    return '-'\n}\nlet json = JSON.parse(value)\nreturn json.department;"
                  },
                  "_hash": 0.14486264431514373,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "additionalInfo",
                  "type": "entityField",
                  "label": "thingplus.label.position",
                  "color": "#3f51b5",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if(!value){\n    return '-'\n}\nlet json = JSON.parse(value)\nreturn json.position;"
                  },
                  "_hash": 0.749583318068439,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "additionalInfo",
                  "type": "entityField",
                  "label": "thingplus.label.phone",
                  "color": "#e91e63",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if(!value){\n    return '-'\n}\nlet json = JSON.parse(value)\nreturn json.phone;"
                  },
                  "_hash": 0.10517245536515452,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "email",
                  "type": "entityField",
                  "label": "thingplus.label.email-id",
                  "color": "#8bc34a",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false
                  },
                  "_hash": 0.20282415183115754,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "createdTime",
                  "type": "entityField",
                  "label": "thingplus.label.registration-date",
                  "color": "#3f51b5",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "cellContentFunction": "if(value != 0){\n    var timeFormat = ctx.custom.t('thingplus.time-format.ymd') \n    return moment(value).format(timeFormat)\n}else {\n    return '-'\n}\n"
                  },
                  "_hash": 0.5371431268364422,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ]
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "var(--tb-service-background-0)",
          "color": "var(--tb-service-accent)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 1630,
              "filterLevel": 0
            }
          },
          "title": "thingplus.page.admin.customerL2-user-list",
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": true,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default"
          },
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "1.6em",
            "font-weight": 500,
            "letter-spacing": "-0.04em",
            "color": "var(--tb-service-font-5)"
          },
          "noDataDisplayMessage": "",
          "showLegend": false,
          "actions": {
            "widgetHeaderButton": [
              {
                "name": "thingplus.action.new",
                "icon": "add",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"add-customerL2-user-form\">\n  <form\n    #addEntityForm=\"ngForm\"\n    [formGroup]=\"addEntityFormGroup\"\n    (ngSubmit)=\"save()\"\n    style=\"font-size: {{calcFontSize()}}px;\"\n  >\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\" translate>thingplus.dialog.create-customerL2-user-title</span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 0.4em\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\" fxLayoutGap=\"2em\">\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div\n          fxFlex=\"100\"\n          fxLayout=\"column\"\n          fxLayoutGap=\"0.6em\"\n          class=\"input-box\"\n          [ngClass]=\"{'disabled': ownerLevel != 0}\"\n        >\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.customerL1</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <mat-select formControlName=\"customerL1\" (selectionChange)=\"setCustomerL1($event)\" *ngIf=\"ownerLevel == 0\">\n              <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n                {{customerL1.name}}\n              </mat-option>\n            </mat-select>\n            <input matInput formControlName=\"customerL1Name\" *ngIf=\"ownerLevel != 0\" readonly />\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div\n          fxFlex=\"100\"\n          fxLayout=\"column\"\n          fxLayoutGap=\"0.6em\"\n          class=\"input-box\"\n          [ngClass]=\"{'error': ownerLevel <= 1 && addEntityFormGroup.get('customerL2').hasError('required'), 'disabled': ownerLevel > 1}\"\n        >\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.customerL2</label>\n            <span> * </span>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <mat-select formControlName=\"customerL2\" required *ngIf=\"ownerLevel <= 1\">\n              <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n                {{customerL2.name}}\n              </mat-option>\n            </mat-select>\n            <input matInput formControlName=\"customerL2Name\" *ngIf=\"ownerLevel > 1\" readonly />\n          </div>\n          <div class=\"error-box\" translate>thingplus.help.error-required-customerL2</div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div\n          fxFlex=\"100\"\n          fxLayout=\"column\"\n          fxLayoutGap=\"0.6em\"\n          class=\"input-box\"\n          [ngClass]=\"{'disabled': ownerLevel > 1}\"\n        >\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.user-type</label>\n          </div>\n          <div class=\"value-box no-border\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <button\n              class=\"radio-btn\"\n              type=\"button\"\n              fxFlex\n              [ngClass]=\"{'active': addEntityFormGroup.get('userAuthority').value == 'admin'}\"\n              (click)=\"setUserAuthority($event, 'admin')\"\n              translate\n            >\n              thingplus.label.admin\n            </button>\n            <button\n              class=\"radio-btn\"\n              type=\"button\"\n              fxFlex\n              [ngClass]=\"{'active': addEntityFormGroup.get('userAuthority').value == 'general'}\"\n              (click)=\"setUserAuthority($event, 'general')\"\n              translate\n            >\n              thingplus.label.general\n            </button>\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div\n          fxFlex=\"100\"\n          fxLayout=\"column\"\n          fxLayoutGap=\"0.6em\"\n          class=\"input-box\"\n          [ngClass]=\"{error: addEntityFormGroup.get('firstName').hasError('required') || addEntityFormGroup.get('firstName').hasError('maxlength')}\"\n        >\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.user-name</label>\n            <span> * </span>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput formControlName=\"firstName\" required />\n          </div>\n          <div class=\"error-box\" *ngIf=\"addEntityFormGroup.get('firstName').hasError('required')\" translate>\n            thingplus.help.error-required-user-name\n          </div>\n          <div class=\"error-box\" *ngIf=\"addEntityFormGroup.get('firstName').hasError('maxlength')\" translate>\n            thingplus.help.error-max-length\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.department</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput maxlength=\"16\" formControlName=\"department\" />\n          </div>\n        </div>\n        <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.position</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput maxlength=\"16\" formControlName=\"position\" />\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.phone</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput maxlength=\"16\" formControlName=\"phone\" />\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div\n          fxFlex\n          fxLayout=\"column\"\n          fxLayoutGap=\"0.6em\"\n          class=\"input-box\"\n          [ngClass]=\"{error: addEntityFormGroup.get('email').hasError('required') || addEntityFormGroup.get('email').hasError('email')}\"\n        >\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.email</label>\n            <span> * </span>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput formControlName=\"email\" type=\"email\" email required />\n          </div>\n          <div class=\"error-box\" *ngIf=\"addEntityFormGroup.get('email').hasError('required')\" translate>\n            thingplus.help.error-required-email-id\n          </div>\n          <div class=\"error-box\" *ngIf=\"addEntityFormGroup.get('email').hasError('email')\" translate>\n            thingplus.help.error-invalid-email-id\n          </div>\n        </div>\n      </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        translate\n      >\n        thingplus.action.close\n      </button>\n      <button\n        class=\"button save-button\"\n        type=\"submit\"\n        [disabled]=\"(isLoading$ | async) || addEntityForm.invalid\"\n        translate\n      >\n        thingplus.action.save\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#add-customerL2-user-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#add-customerL2-user-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#add-customerL2-user-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#add-customerL2-user-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-customerL2-user-form .dialog-close i {\n  font-size: 1.4em;\n}\n#add-customerL2-user-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#add-customerL2-user-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#add-customerL2-user-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#add-customerL2-user-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#add-customerL2-user-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#add-customerL2-user-form .label-box {\n  color: var(--tb-service-font-3);\n  font-size: 1.2em;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-customerL2-user-form .input-box.disabled .label-box {\n  color: var(--tb-service-font-1);\n}\n#add-customerL2-user-form .value-box {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-customerL2-user-form .value-box.no-border {\n  border: none !important;\n}\n\n#add-customerL2-user-form .input-box:not(.disabled) .value-box:hover {\n  border-color: var(--tb-service-border-3);\n}\n#add-customerL2-user-form .input-box:not(.disabled) .value-box:focus-within {\n  border-color: var(--tb-service-accent);\n  caret-color: var(--tb-service-accent);\n}\n#add-customerL2-user-form .value-box *::placeholder {\n  color: var(--tb-service-font-4);\n}\n#add-customerL2-user-form .value-box input {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  caret-color: var(--tb-service-accent);\n}\n#add-customerL2-user-form .input-box.disabled .value-box {\n  background-color: var(--tb-service-background-1);\n}\n#add-customerL2-user-form .input-box.disabled .value-box input {\n  color: var(--tb-service-font-2);\n  cursor: default;\n}\n#add-customerL2-user-form .radio-btn {\n  all: unset;\n  color: var(--tb-service-font-5);\n  border: 1px solid var(--tb-service-border-0);\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  cursor: pointer;\n}\n#add-customerL2-user-form .input-box:not(.disabled) .radio-btn:not(.active):hover {\n  border-color: var(--tb-service-border-3);\n}\n#add-customerL2-user-form .input-box:not(.disabled) .radio-btn.active {\n  color: var(--tb-service-accent);\n  border-color: var(--tb-service-accent);\n}\n#add-customerL2-user-form .input-box.disabled .radio-btn:not(.active) {\n  color: var(--tb-service-font-1);\n  cursor: default;\n}\n#add-customerL2-user-form .input-box.disabled .radio-btn.active {\n  border-color: var(--tb-service-border-3);\n  cursor: default;\n}\n#add-customerL2-user-form .value-box .mat-select-trigger {\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  line-height: 1;\n}\n#add-customerL2-user-form .value-box .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n#add-customerL2-user-form .value-box .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n#add-customerL2-user-form .error-box {\n  display: none;\n  color: var(--tb-service-warn);\n  font-size: 1.2em;\n}\n#add-customerL2-user-form .input-box.error .label-box {\n  color: var(--tb-service-warn);\n}\n#add-customerL2-user-form .input-box.error .value-box {\n  border: 1px solid var(--tb-service-warn);\n}\n#add-customerL2-user-form .input-box.error .error-box {\n  display: block;\n  margin-top: calc(0.6em / 1.2);\n}\n\n#add-customerL2-user-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#add-customerL2-user-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-customerL2-user-form .save-button {\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-accent);\n}\n#add-customerL2-user-form .save-button:hover {\n  background-color: var(--tb-service-accent-hover);\n}\n#add-customerL2-user-form .save-button:active {\n  background-color: var(--tb-service-accent-pressed);\n}\n#add-customerL2-user-form .close-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#add-customerL2-user-form .close-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#add-customerL2-user-form .close-button:active {\n  background-color: var(--tb-service-border-0);\n}\n\n@media (min-width: 960px) {\n  #add-customerL2-user-form form {\n    width: 24vw;\n  }\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nconst t = widgetContext.custom.t;\n\nopenAddEntityDialog();\n\nfunction openAddEntityDialog() {\n  customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\n}\n\nfunction AddEntityDialogController(instance) {\n  let vm = instance;\n  vm.ownerId = widgetContext.defaultSubscription.configuredDatasources[0].entity.id;\n  vm.ownerLevel = widgetContext.$scope.ownerLevel;\n  vm.t = t;\n  vm.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  vm.customerL2List = [{ name: t('thingplus.selector.select-customerL2'), value: '' }];\n  if (vm.ownerLevel == 0) {\n    vm.customerL1List = vm.customerL1List.concat(\n      widgetContext.custom.customerL1List\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  }\n  if (vm.ownerLevel <= 1) {\n    vm.customerL2List = vm.customerL2List.concat(\n      widgetContext.custom.customerL2List\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  }\n  let defaultCustomerL1Name = widgetContext.custom.relations[entityId.id].parent\n    ? widgetContext.custom.relations[entityId.id].parent.name\n    : entityName;\n\n  vm.addEntityFormGroup = vm.fb.group({\n    customerL1Name: [defaultCustomerL1Name],\n    customerL2Name: [entityName],\n    userAuthority: ['general'],\n    firstName: [t('thingplus.label.user') + ' A', [vm.validators.maxLength(16)]],\n    department: [''],\n    position: [''],\n    phone: [''],\n    email: ['', [vm.validators.required, vm.validators.email]],\n  });\n  if (vm.ownerLevel >= 1) {\n    getCustomerL1Name();\n  }\n  if (vm.ownerLevel == 0) {\n    vm.addEntityFormGroup.controls.customerL1 = vm.fb.control('');\n  }\n  if (vm.ownerLevel <= 1) {\n    vm.addEntityFormGroup.controls.customerL2 = vm.fb.control('', [vm.validators.required]);\n  }\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  vm.save = async function () {\n    vm.addEntityFormGroup.markAsPristine();\n    vm.dashboardList = await getDashboardList();\n    saveUser().subscribe(user => {\n      widgetContext.rxjs.forkJoin([saveRelation(user), saveAttribute(user)]).subscribe(() => {\n        widgetContext.updateAliases();\n        vm.dialogRef.close(null);\n      });\n    });\n  };\n  vm.setCustomerL1 = function (e) {\n    let customerL1 = vm.addEntityFormGroup.get('customerL1').value;\n    vm.customerL2List = [{ name: t('thingplus.selector.select-customerL2'), value: '' }];\n    vm.customerL2List = vm.customerL2List.concat(\n      widgetContext.custom.customerL2List\n        .filter(x => {\n          return customerL1 == '' || x.parent.id.id == customerL1;\n        })\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  };\n  vm.setUserAuthority = function (e, type) {\n    vm.addEntityFormGroup.patchValue(\n      {\n        userAuthority: type,\n      },\n      { emitEvent: false }\n    );\n  };\n\n  function getCustomerL1Name() {\n    attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE', ['customerL1Name']).subscribe(data => {\n      if (data && data[0]) {\n        vm.addEntityFormGroup.patchValue(\n          {\n            customerL1Name: data[0].value,\n          },\n          { emitEvent: false }\n        );\n      }\n    });\n  }\n\n  async function getDashboardList() {\n    let dashboardList;\n    if (widgetContext.currentUser.authority == 'TENANT_ADMIN') {\n      dashboardList = await widgetContext.http.get(`/api/tenant/dashboards?pageSize=1024&page=0`).toPromise();\n    } else {\n      let customerId = widgetContext.currentUser.customerId;\n      dashboardList = await widgetContext.http\n        .get(`/api/customer/${customerId}/dashboards?pageSize=1024&page=0`)\n        .toPromise();\n    }\n    let result = {};\n    for (let i in dashboardList.data) {\n      result[dashboardList.data[i].title] = dashboardList.data[i].id.id;\n    }\n    return result;\n  }\n\n  function saveUser() {\n    let userAuthority = vm.addEntityFormGroup.get('userAuthority').value;\n    let firstName = vm.addEntityFormGroup.get('firstName').value;\n    let email = vm.addEntityFormGroup.get('email').value;\n    let customerL2Id = vm.addEntityFormGroup.get('customerL2').value || entityId.id;\n    let department = vm.addEntityFormGroup.get('department').value;\n    let position = vm.addEntityFormGroup.get('position').value;\n    let phone = vm.addEntityFormGroup.get('phone').value;\n\n    let userBody = {\n      additionalInfo: {\n        description: '',\n        defaultDashboardId: vm.dashboardList['Home'],\n        defaultDashboardFullscreen: false,\n        userAuthority: userAuthority,\n        lang: 'ko_KR',\n        phone: phone,\n        position: position,\n        department: department,\n      },\n      authority: 'CUSTOMER_USER',\n      customerId: { entityType: 'CUSTOMER', id: customerL2Id },\n      email: email,\n      firstName: firstName,\n      tenantId: { entityType: 'TENANT', id: widgetContext.currentUser.tenantId },\n    };\n    return userService.saveUser(userBody);\n  }\n\n  function saveRelation(user) {\n    let customerL2Id = vm.addEntityFormGroup.get('customerL2').value || entityId.id;\n    let relationBody = {\n      from: {\n        entityType: 'CUSTOMER',\n        id: customerL2Id,\n      },\n      to: user.id,\n      type: 'Contains',\n    };\n    return entityRelationService.saveRelation(relationBody);\n  }\n\n  function saveAttribute(user) {\n    let customerL1Name = vm.addEntityFormGroup.get('customerL1Name').value;\n    let customerL2Name = entityName;\n    let customerL2Id = vm.addEntityFormGroup.get('customerL2').value;\n    if (customerL2Id) {\n      let customerL2Index = vm.customerL2List.findIndex(x => x.value == customerL2Id);\n      if (customerL2Index !== -1) {\n        customerL2Name = vm.customerL2List[customerL2Index].name;\n      }\n    }\n    if (widgetContext.custom.relations[customerL2Id]) {\n      customerL1Name = widgetContext.custom.relations[customerL2Id].parent.name;\n    }\n\n    let attributeBody = [\n      { key: 'customerType', value: 'CUSTOMER_L2' },\n      { key: 'customerL1Name', value: customerL1Name },\n      { key: 'customerL2Name', value: customerL2Name },\n    ];\n    return attributeService.saveEntityAttributes(user.id, 'SERVER_SCOPE', attributeBody);\n  }\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "63ddd054-a476-a827-3b57-490dd5e82307"
              }
            ],
            "actionCellButton": [
              {
                "name": "Edit",
                "icon": "edit",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"edit-customerL2-user-form\">\n  <form\n    #addEntityForm=\"ngForm\"\n    [formGroup]=\"editEntityFormGroup\"\n    (ngSubmit)=\"save()\"\n    style=\"font-size: {{calcFontSize()}}px;\"\n  >\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\" translate>thingplus.dialog.create-customerL2-user-title</span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 0.4em\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\" fxLayoutGap=\"2em\">\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box disabled\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.customerL1</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput formControlName=\"customerL1Name\" readonly />\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box disabled\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.customerL2</label>\n            <span> * </span>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput formControlName=\"customerL2Name\" readonly />\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div\n          fxFlex=\"100\"\n          fxLayout=\"column\"\n          fxLayoutGap=\"0.6em\"\n          class=\"input-box\"\n          [ngClass]=\"{'disabled': ownerLevel > 1}\"\n        >\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.user-type</label>\n          </div>\n          <div class=\"value-box no-border\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <button\n              class=\"radio-btn\"\n              type=\"button\"\n              fxFlex\n              [ngClass]=\"{'active': editEntityFormGroup.get('userAuthority').value == 'admin'}\"\n              (click)=\"setUserAuthority($event, 'admin')\"\n              translate\n            >\n              thingplus.label.admin\n            </button>\n            <button\n              class=\"radio-btn\"\n              type=\"button\"\n              fxFlex\n              [ngClass]=\"{'active': editEntityFormGroup.get('userAuthority').value == 'general'}\"\n              (click)=\"setUserAuthority($event, 'general')\"\n              translate\n            >\n              thingplus.label.general\n            </button>\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div\n          fxFlex=\"100\"\n          fxLayout=\"column\"\n          fxLayoutGap=\"0.6em\"\n          class=\"input-box\"\n          [ngClass]=\"{error: editEntityFormGroup.get('firstName').hasError('required') || editEntityFormGroup.get('firstName').hasError('maxlength')}\"\n        >\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.user-name</label>\n            <span> * </span>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput formControlName=\"firstName\" required />\n          </div>\n          <div class=\"error-box\" *ngIf=\"editEntityFormGroup.get('firstName').hasError('required')\" translate>\n            thingplus.help.error-required-customerL1-name\n          </div>\n          <div class=\"error-box\" *ngIf=\"editEntityFormGroup.get('firstName').hasError('maxlength')\" translate>\n            thingplus.help.error-max-length\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.department</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput maxlength=\"16\" formControlName=\"department\" />\n          </div>\n        </div>\n        <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.position</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput maxlength=\"16\" formControlName=\"position\" />\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.phone</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput maxlength=\"16\" formControlName=\"phone\" />\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n        <div\n          fxFlex\n          fxLayout=\"column\"\n          fxLayoutGap=\"0.6em\"\n          class=\"input-box\"\n          [ngClass]=\"{error: editEntityFormGroup.get('email').hasError('required') || editEntityFormGroup.get('email').hasError('email')}\"\n        >\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.email</label>\n            <span> * </span>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <input matInput formControlName=\"email\" type=\"email\" email required />\n          </div>\n          <div class=\"error-box\" *ngIf=\"editEntityFormGroup.get('email').hasError('required')\" translate>\n            thingplus.help.error-required-email-id\n          </div>\n          <div class=\"error-box\" *ngIf=\"editEntityFormGroup.get('email').hasError('email')\" translate>\n            thingplus.help.error-invalid-email-id\n          </div>\n        </div>\n      </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        translate\n      >\n        thingplus.action.close\n      </button>\n      <button\n        class=\"button save-button\"\n        type=\"submit\"\n        [disabled]=\"(isLoading$ | async) || addEntityForm.invalid\"\n        translate\n      >\n        thingplus.action.save\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#edit-customerL2-user-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#edit-customerL2-user-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#edit-customerL2-user-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#edit-customerL2-user-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-customerL2-user-form .dialog-close i {\n  font-size: 1.4em;\n}\n#edit-customerL2-user-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#edit-customerL2-user-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#edit-customerL2-user-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#edit-customerL2-user-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#edit-customerL2-user-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#edit-customerL2-user-form .label-box {\n  color: var(--tb-service-font-3);\n  font-size: 1.2em;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-customerL2-user-form .input-box.disabled .label-box {\n  color: var(--tb-service-font-1);\n}\n#edit-customerL2-user-form .value-box {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-customerL2-user-form .value-box.no-border {\n  border: none !important;\n}\n\n#edit-customerL2-user-form .input-box:not(.disabled) .value-box:hover {\n  border-color: var(--tb-service-border-3);\n}\n#edit-customerL2-user-form .input-box:not(.disabled) .value-box:focus-within {\n  border-color: var(--tb-service-accent);\n  caret-color: var(--tb-service-accent);\n}\n#edit-customerL2-user-form .value-box *::placeholder {\n  color: var(--tb-service-font-4);\n}\n#edit-customerL2-user-form .value-box input {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  caret-color: var(--tb-service-accent);\n}\n#edit-customerL2-user-form .input-box.disabled .value-box {\n  background-color: var(--tb-service-background-1);\n}\n#edit-customerL2-user-form .input-box.disabled .value-box input {\n  color: var(--tb-service-font-2);\n  cursor: default;\n}\n#edit-customerL2-user-form .radio-btn {\n  all: unset;\n  color: var(--tb-service-font-5);\n  border: 1px solid var(--tb-service-border-0);\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  cursor: pointer;\n}\n#edit-customerL2-user-form .input-box:not(.disabled) .radio-btn:not(.active):hover {\n  border-color: var(--tb-service-border-3);\n}\n#edit-customerL2-user-form .input-box:not(.disabled) .radio-btn.active {\n  color: var(--tb-service-accent);\n  border-color: var(--tb-service-accent);\n}\n#edit-customerL2-user-form .input-box.disabled .radio-btn:not(.active) {\n  color: var(--tb-service-font-1);\n  cursor: default;\n}\n#edit-customerL2-user-form .input-box.disabled .radio-btn.active {\n  border-color: var(--tb-service-border-3);\n  cursor: default;\n}\n#edit-customerL2-user-form .value-box .mat-select-trigger {\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  line-height: 1;\n}\n#edit-customerL2-user-form .value-box .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n#edit-customerL2-user-form .value-box .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n#edit-customerL2-user-form .error-box {\n  display: none;\n  color: var(--tb-service-warn);\n  font-size: 1.2em;\n}\n#edit-customerL2-user-form .input-box.error .label-box {\n  color: var(--tb-service-warn);\n}\n#edit-customerL2-user-form .input-box.error .value-box {\n  border: 1px solid var(--tb-service-warn);\n}\n#edit-customerL2-user-form .input-box.error .error-box {\n  display: block;\n  margin-top: calc(0.6em / 1.2);\n}\n\n#edit-customerL2-user-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#edit-customerL2-user-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-customerL2-user-form .save-button {\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-accent);\n}\n#edit-customerL2-user-form .save-button:hover {\n  background-color: var(--tb-service-accent-hover);\n}\n#edit-customerL2-user-form .save-button:active {\n  background-color: var(--tb-service-accent-pressed);\n}\n#edit-customerL2-user-form .close-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#edit-customerL2-user-form .close-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#edit-customerL2-user-form .close-button:active {\n  background-color: var(--tb-service-border-0);\n}\n\n@media (min-width: 960px) {\n  #edit-customerL2-user-form form {\n    width: 24vw;\n  }\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nconst t = widgetContext.custom.t;\n\nif (\n  widgetContext.$scope.ownerLevel > 1 &&\n  additionalParams.userAuthority == 'admin' &&\n  entityId.id != widgetContext.currentUser.userId\n) {\n  window.alert(t('thingplus.help.error-unauthorized-with-user'));\n  return;\n}\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n  customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n  let vm = instance;\n  vm.ownerId = widgetContext.defaultSubscription.configuredDatasources[0].entity.id;\n  vm.ownerLevel = widgetContext.$scope.ownerLevel;\n  vm.t = t;\n  let additionalInfo = JSON.parse(additionalParams.additionalInfo);\n  vm.editEntityFormGroup = vm.fb.group({\n    customerL1Name: [additionalParams.customerL1Name],\n    customerL2Name: [additionalParams.customerL2Name],\n    userAuthority: [additionalInfo.userAuthority || 'general'],\n    firstName: [additionalParams.firstName, [vm.validators.maxLength(16)]],\n    department: [additionalInfo.department],\n    position: [additionalInfo.position],\n    phone: [additionalInfo.phone],\n    email: [additionalParams.email, [vm.validators.required, vm.validators.email]],\n  });\n\n  getUser(entityId.id).subscribe(user => {\n    vm.originUser = user;\n  });\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  vm.save = async function () {\n    vm.editEntityFormGroup.markAsPristine();\n    saveUser().subscribe(user => {\n      saveAttribute(user).subscribe(() => {\n        widgetContext.updateAliases();\n        vm.dialogRef.close(null);\n      });\n    });\n  };\n  vm.setUserAuthority = function (e, type) {\n    vm.editEntityFormGroup.patchValue(\n      {\n        userAuthority: type,\n      },\n      { emitEvent: false }\n    );\n  };\n\n  function getUser(userId) {\n    return userService.getUser(userId);\n  }\n\n  function saveUser() {\n    let email = vm.editEntityFormGroup.get('email').value;\n    let userAuthority = vm.editEntityFormGroup.get('userAuthority').value;\n    let phone = vm.editEntityFormGroup.get('phone').value;\n    let department = vm.editEntityFormGroup.get('department').value;\n    let position = vm.editEntityFormGroup.get('position').value;\n\n    if (_.isNil(vm.originUser)) return;\n    vm.originUser.email = email;\n    vm.originUser.additionalInfo.userAuthority = userAuthority;\n    vm.originUser.additionalInfo.phone = phone;\n    vm.originUser.additionalInfo.department = department;\n    vm.originUser.additionalInfo.position = position;\n\n    return userService.saveUser(vm.originUser);\n  }\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "06839501-9978-96be-d28f-ef2042b8ee2e"
              },
              {
                "name": "Delete",
                "icon": "delete",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"delete-customerL2-user-form\">\n  <form\n    #deleteEntityForm=\"ngForm\"\n    [formGroup]=\"deleteEntityFormGroup\"\n    (ngSubmit)=\"save()\"\n    style=\"font-size: {{calcFontSize()}}px;\"\n  >\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\" translate>thingplus.dialog.delete-customerL2-user-title</span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 4px\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n      <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\n        <div class=\"label\">\n          {{'thingplus.dialog.delete-customerL2-user-content' | translate:{entityName: entityName} }}\n        </div>\n      </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        translate\n      >\n        thingplus.action.close\n      </button>\n      <button\n        class=\"button delete-button\"\n        type=\"submit\"\n        [disabled]=\"(isLoading$ | async) || deleteEntityForm.invalid\"\n        translate\n      >\n        thingplus.action.delete\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#delete-customerL2-user-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#delete-customerL2-user-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#delete-customerL2-user-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#delete-customerL2-user-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#delete-customerL2-user-form .dialog-close i {\n  font-size: 1.4em;\n}\n#delete-customerL2-user-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#delete-customerL2-user-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#delete-customerL2-user-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#delete-customerL2-user-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#delete-customerL2-user-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#delete-customerL2-user-form .label {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n}\n\n#delete-customerL2-user-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#delete-customerL2-user-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#delete-customerL2-user-form .delete-button {\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-warn);\n}\n#delete-customerL2-user-form .delete-button:hover {\n  background-color: var(--tb-service-warn-hover);\n}\n#delete-customerL2-user-form .delete-button:active {\n  background-color: var(--tb-service-warn-pressed);\n}\n#delete-customerL2-user-form .close-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#delete-customerL2-user-form .close-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#delete-customerL2-user-form .close-button:active {\n  background-color: var(--tb-service-border-0);\n}\n\n@media (min-width: 960px) {\n  #delete-customerL2-user-form form {\n    width: 24vw;\n  }\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\n\nconst t = widgetContext.custom.t;\n\nif (\n  widgetContext.$scope.ownerLevel > 1 &&\n  additionalParams.userType == 'admin' &&\n  entityId.id != widgetContext.currentUser.userId\n) {\n  window.alert(t('thingplus.help.error-unauthorized-with-user'));\n  return;\n}\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n  customDialog.customDialog(htmlTemplate, DeleteEntityDialogController).subscribe();\n}\n\nfunction DeleteEntityDialogController(instance) {\n  let vm = instance;\n  vm.entityName = entityName;\n  vm.deleteEntityFormGroup = vm.fb.group({});\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  vm.save = function () {\n    vm.deleteEntityFormGroup.markAsPristine();\n    deleteEntityObservable(entityId).subscribe(\n      function success() {\n        widgetContext.updateAliases();\n        vm.dialogRef.close(null);\n      },\n      function fail() {\n        showErrorDialog();\n        vm.dialogRef.close(null);\n      }\n    );\n  };\n\n  function deleteEntityObservable(entityId) {\n    return userService.deleteUser(entityId.id);\n  }\n\n  function showErrorDialog() {\n    let title = t('thingplus.dialog.error-delete-title');\n    let content = t('thingplus.dialog.error-delete-content');\n    dialogs.alert(title, content, 'CLOSE').subscribe(function (result) {});\n  }\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "5fee5f40-43ae-e064-09b2-4e8f47eb4a94"
              },
              {
                "name": "Activate",
                "icon": "wifi",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"activate-customerL2-user-form\">\n  <form\n    #activateEntityForm=\"ngForm\"\n    [formGroup]=\"activateEntityFormGroup\"\n    (ngSubmit)=\"save()\"\n    style=\"font-size: {{calcFontSize()}}px;\"\n  >\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\">\n        {{action == 'activate' ? ('thingplus.dialog.activate-customerL2-user-title' | translate) :\n        ('thingplus.dialog.reset-customerL2-user-title' | translate)}}\n      </span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 4px\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\" fxLayoutGap=\"2em\">\n      <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\" *ngIf=\"phase == 0\">\n        <div class=\"label\">\n          {{action == 'activate' ? ('thingplus.dialog.activate-customerL2-user-content' |\n          translate:{entityName:entityName}) : ('thingplus.dialog.reset-customerL2-user-content' |\n          translate:{entityName:entityName}) }}\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\" *ngIf=\"phase == 1 && action == 'activate'\">\n        <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.create-password-now</label>\n          </div>\n          <div class=\"value-box no-border\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <button\n              class=\"link-button\"\n              fxFlex\n              fxLayout=\"row\"\n              fxLayoutAlign=\"space-between center\"\n              fxLayoutGap=\"1em\"\n              (click)=\"link($event)\"\n            >\n              <span translate>thingplus.action.go-to-create-password</span>\n              <i class=\"material-icons\">arrow_forward</i>\n            </button>\n          </div>\n          <div class=\"help-box\" translate>thingplus.help.help-activate-password</div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\" *ngIf=\"phase == 1 && action == 'activate'\">\n        <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n            <label translate>thingplus.label.share-link</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n            <span>{{activationLink}}</span>\n            <button class=\"copy-btn\" (click)=\"copy($event)\" translate>thingplus.action.copy</button>\n          </div>\n        </div>\n      </div>\n      <div class=\"label\" *ngIf=\"phase == 1 && action == 'reset'\">\n        {{'thingplus.dialog.reset-customer-user-send-msg' | translate:{email:user.email} }}\n      </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        translate\n      >\n        thingplus.action.close\n      </button>\n      <button\n        class=\"button activate-button\"\n        [ngClass]=\"{'activate-button': action == 'activate', 'reset-button': action == 'reset'}\"\n        type=\"submit\"\n        [disabled]=\"(isLoading$ | async)\"\n        *ngIf=\"phase == 0\"\n      >\n        {{'thingplus.action.' + action | translate}}\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#activate-customerL2-user-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#activate-customerL2-user-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#activate-customerL2-user-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#activate-customerL2-user-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#activate-customerL2-user-form .dialog-close i {\n  font-size: 1.4em;\n}\n#activate-customerL2-user-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#activate-customerL2-user-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#activate-customerL2-user-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#activate-customerL2-user-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#activate-customerL2-user-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#activate-customerL2-user-form .label {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n  white-space: pre-line;\n}\n#activate-customerL2-user-form .label-box {\n  color: var(--tb-service-font-4);\n  font-size: 1.2em;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#activate-customerL2-user-form .value-box {\n  max-width: 100%;\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  color: var(--tb-service-font-5);\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#activate-customerL2-user-form .value-box.no-border {\n  border: none !important;\n}\n#activate-customerL2-user-form .link-button {\n  all: unset;\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-accent);\n  cursor: pointer;\n  transition-property: color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#activate-customerL2-user-form .link-button:hover {\n  border-color: var(--tb-service-accent-hover);\n  color: var(--tb-service-accent-hover);\n}\n#activate-customerL2-user-form .link-button:active {\n  border-color: var(--tb-service-accent-pressed);\n  color: var(--tb-service-accent-pressed);\n}\n#activate-customerL2-user-form .link-button span {\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n#activate-customerL2-user-form .link-button i {\n  font-size: 1.6em;\n  padding: 1em;\n}\n#activate-customerL2-user-form .value-box > span {\n  font-size: 1.6em;\n  padding: 1em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n#activate-customerL2-user-form .value-box .copy-btn {\n  all: unset;\n  font-size: 1.4em;\n  padding: 0.5em;\n  margin-right: 0.5em;\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-accent);\n  cursor: pointer;\n  white-space: nowrap;\n  transition-property: color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#activate-customerL2-user-form .value-box .copy-btn:hover {\n  border-color: var(--tb-service-accent-hover);\n  color: var(--tb-service-accent-hover);\n}\n#activate-customerL2-user-form .value-box .copy-btn:active {\n  border-color: var(--tb-service-accent-pressed);\n  color: var(--tb-service-accent-pressed);\n}\n\n#activate-customerL2-user-form .help-box {\n  color: var(--tb-service-accent);\n  font-size: 1.2em;\n}\n\n#activate-customerL2-user-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#activate-customerL2-user-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#activate-customerL2-user-form .activate-button {\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-accent);\n}\n#activate-customerL2-user-form .activate-button:hover {\n  background-color: var(--tb-service-accent-hover);\n}\n#activate-customerL2-user-form .activate-button:active {\n  background-color: var(--tb-service-accent-pressed);\n}\n#activate-customerL2-user-form .reset-button {\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-warn);\n}\n#activate-customerL2-user-form .reset-button:hover {\n  background-color: var(--tb-service-warn-hover);\n}\n#activate-customerL2-user-form .reset-button:active {\n  background-color: var(--tb-service-warn-pressed);\n}\n#activate-customerL2-user-form .close-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#activate-customerL2-user-form .close-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#activate-customerL2-user-form .close-button:active {\n  background-color: var(--tb-service-border-0);\n}\n\n@media (min-width: 960px) {\n  #activate-customerL2-user-form form {\n    width: 24vw;\n  }\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\n\nconst t = widgetContext.custom.t;\n\nif (\n  widgetContext.$scope.ownerLevel > 1 &&\n  additionalParams.userType == 'admin' &&\n  entityId.id != widgetContext.currentUser.userId\n) {\n  window.alert(t('thingplus.help.error-unauthorized-with-user'));\n  return;\n}\n\nopenActivateEntityDialog();\n\nfunction openActivateEntityDialog() {\n  customDialog.customDialog(htmlTemplate, ActivateEntityDialogController).subscribe();\n}\n\nfunction ActivateEntityDialogController(instance) {\n  let vm = instance;\n  vm.entityName = additionalParams.email;\n  vm.action = '';\n  vm.activationLink = '';\n  vm.activateEntityFormGroup = vm.fb.group({});\n  vm.phase = 0;\n\n  userService.getUser(entityId.id).subscribe(user => {\n    vm.user = user;\n    if (\n      !_.isNil(user.additionalInfo.userPasswordHistory) &&\n      Object.keys(user.additionalInfo.userPasswordHistory).length > 0\n    ) {\n      vm.action = 'reset';\n    } else {\n      vm.action = 'activate';\n    }\n  });\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  vm.save = function () {\n    vm.activateEntityFormGroup.markAsPristine();\n    if (vm.phase == 0) {\n      if (vm.action == 'reset') {\n        widgetContext.http.post(`/api/noauth/resetPasswordByEmail`, { email: vm.user.email }).subscribe(() => {\n          vm.phase = 1;\n        });\n      } else {\n        userService.getActivationLink(vm.user.id.id).subscribe(link => {\n          vm.phase = 1;\n          let code = link.split('activateToken=')[1];\n          vm.activationLink = window.location.origin + '/api/noauth/activate?activateToken=' + code;\n        });\n      }\n    }\n  };\n  vm.copy = function (e) {\n    navigator.clipboard\n      .writeText(vm.activationLink)\n      .then(() => window.alert(t('thingplus.dialog.reset-customer-user-copy-msg')));\n  };\n  vm.link = function (e) {\n    window.open(vm.activationLink);\n  };\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "9780c5eb-e9f4-76c6-b244-e6fe172940e2"
              }
            ],
            "headerButton": []
          }
        },
        "row": 0,
        "col": 0,
        "id": "e4e46c38-1dca-9ad3-171f-614668a9b1da"
      }
    },
    "states": {
      "customerL1-user-management": {
        "name": "{i18n:thingplus.menu.user-management}",
        "root": true,
        "layouts": {
          "main": {
            "widgets": {
              "06836d98-82f6-2ef2-eab8-6be7e7d0e7cb": {
                "sizeX": 95,
                "sizeY": 47,
                "row": 1,
                "col": 1
              }
            },
            "gridSettings": {
              "backgroundColor": "var(--tb-service-background-4)",
              "columns": 97,
              "margin": 0,
              "marginUnit": "px",
              "mobileMargin": 0,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": false,
              "mobileRowHeight": 70
            }
          }
        }
      },
      "customerL2-user-management": {
        "name": "{i18n:thingplus.menu.user-management}",
        "root": false,
        "layouts": {
          "main": {
            "widgets": {
              "e4e46c38-1dca-9ad3-171f-614668a9b1da": {
                "sizeX": 95,
                "sizeY": 47,
                "row": 2,
                "col": 1
              }
            },
            "gridSettings": {
              "backgroundColor": "var(--tb-service-background-4)",
              "columns": 97,
              "margin": 0,
              "marginUnit": "px",
              "mobileMargin": 0,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": true,
              "mobileRowHeight": 70
            }
          }
        }
      }
    },
    "entityAliases": {
      "104fea86-3d10-38f3-e8f0-c336b0d8ce1d": {
        "id": "104fea86-3d10-38f3-e8f0-c336b0d8ce1d",
        "alias": "Current User Owner",
        "filter": {
          "type": "singleEntity",
          "resolveMultiple": false,
          "singleEntity": {
            "entityType": "CURRENT_USER_OWNER",
            "id": "13814000-1dd2-11b2-8080-808080808080"
          }
        }
      },
      "5d9aa730-0372-039f-03ea-4d1d693364ee": {
        "id": "5d9aa730-0372-039f-03ea-4d1d693364ee",
        "alias": "Customer Users",
        "filter": {
          "type": "relationsQuery",
          "resolveMultiple": true,
          "rootStateEntity": true,
          "stateEntityParamName": null,
          "defaultStateEntity": {
            "entityType": "CURRENT_USER_OWNER",
            "id": "13814000-1dd2-11b2-8080-808080808080"
          },
          "rootEntity": null,
          "direction": "FROM",
          "maxLevel": 3,
          "fetchLastLevelOnly": false,
          "filters": [
            {
              "relationType": "Contains",
              "entityTypes": [
                "USER"
              ]
            }
          ]
        }
      }
    },
    "filters": {
      "b560db76-be75-7c38-1d69-7812f8d267ef": {
        "id": "b560db76-be75-7c38-1d69-7812f8d267ef",
        "filter": "Is CustomerL1 User",
        "keyFilters": [
          {
            "key": {
              "type": "ATTRIBUTE",
              "key": "customerType"
            },
            "valueType": "STRING",
            "predicates": [
              {
                "keyFilterPredicate": {
                  "operation": "EQUAL",
                  "value": {
                    "defaultValue": "CUSTOMER_L1",
                    "dynamicValue": null
                  },
                  "ignoreCase": false,
                  "type": "STRING"
                },
                "userInfo": {
                  "editable": true,
                  "label": "",
                  "autogeneratedLabel": true,
                  "order": 0
                }
              }
            ]
          }
        ],
        "editable": true
      },
      "202abe9e-31d1-05a1-bb32-fdffd7d3187c": {
        "id": "202abe9e-31d1-05a1-bb32-fdffd7d3187c",
        "filter": "Is CustomerL2 User",
        "keyFilters": [
          {
            "key": {
              "type": "ATTRIBUTE",
              "key": "customerType"
            },
            "valueType": "STRING",
            "predicates": [
              {
                "keyFilterPredicate": {
                  "operation": "EQUAL",
                  "value": {
                    "defaultValue": "CUSTOMER_L2",
                    "dynamicValue": null
                  },
                  "ignoreCase": false,
                  "type": "STRING"
                },
                "userInfo": {
                  "editable": true,
                  "label": "",
                  "autogeneratedLabel": true,
                  "order": 0
                }
              }
            ]
          }
        ],
        "editable": true
      }
    },
    "timewindow": {
      "displayValue": "",
      "hideInterval": false,
      "hideAggregation": false,
      "hideAggInterval": false,
      "hideTimezone": false,
      "selectedTab": 0,
      "realtime": {
        "realtimeType": 0,
        "interval": 1000,
        "timewindowMs": 60000,
        "quickInterval": "CURRENT_DAY"
      },
      "history": {
        "historyType": 0,
        "interval": 1000,
        "timewindowMs": 60000,
        "fixedTimewindow": {
          "startTimeMs": 1674707636328,
          "endTimeMs": 1674794036328
        },
        "quickInterval": "CURRENT_DAY"
      },
      "aggregation": {
        "type": "AVG",
        "limit": 25000
      }
    },
    "settings": {
      "stateControllerId": "entity",
      "showTitle": false,
      "showDashboardsSelect": false,
      "showEntitiesSelect": false,
      "showDashboardTimewindow": false,
      "showDashboardExport": false,
      "toolbarAlwaysOpen": true,
      "titleColor": "rgba(0,0,0,0.870588)",
      "showDashboardLogo": false,
      "dashboardLogoUrl": null,
      "hideToolbar": true,
      "showFilters": false,
      "showUpdateDashboardImage": false
    }
  },
  "name": "User Management"
}