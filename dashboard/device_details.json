{
  "title": "Device Details",
  "image": null,
  "mobileHide": false,
  "mobileOrder": null,
  "configuration": {
    "description": "",
    "widgets": {
      "19889780-8872-04d7-adc3-6012b977b85d": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_selector_widgets",
        "typeAlias": "device_selector",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 7.5,
        "sizeY": 3,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "a7bf5b84-5624-0a8d-0971-2366d1b9a055",
              "filterId": null,
              "dataKeys": []
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "rgba(255,255,255,0)",
          "color": "var(--tb-service-accent)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 1669,
              "dashboardState": "default"
            }
          },
          "title": "thingplus.menu.device-details",
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default"
          },
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "2em",
            "font-weight": 500,
            "letter-spacing": "-0.05em",
            "color": "var(--tb-service-font-5)"
          },
          "noDataDisplayMessage": "",
          "showLegend": false
        },
        "row": 0,
        "col": 0,
        "id": "19889780-8872-04d7-adc3-6012b977b85d"
      },
      "07cad930-4b56-4437-cbf8-856434ae6815": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_main_widgets",
        "typeAlias": "device_details",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 7.5,
        "sizeY": 3,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "a7bf5b84-5624-0a8d-0971-2366d1b9a055",
              "filterId": null,
              "dataKeys": []
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "cc5ee948-2b89-6fc6-61ef-196511d4e9f7",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "model",
                  "type": "attribute",
                  "label": "model",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.2809191643202116
                }
              ]
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 361
            }
          },
          "title": "thingplus.page.device-details.device-info",
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default",
            "box-shadow": "0px 2px 10px 0 rgba(0, 0, 0, 0.04)"
          },
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "1.6em",
            "font-weight": 600,
            "letter-spacing": "-0.04em",
            "color": "var(--tb-service-font-5)"
          },
          "noDataDisplayMessage": "",
          "showLegend": false,
          "actions": {
            "headerButton": []
          }
        },
        "row": 0,
        "col": 0,
        "id": "07cad930-4b56-4437-cbf8-856434ae6815"
      },
      "a393fd84-d1c4-0468-34ef-9429a0e11170": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_main_widgets",
        "typeAlias": "device_state",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 7.5,
        "sizeY": 2,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "a7bf5b84-5624-0a8d-0971-2366d1b9a055",
              "filterId": null,
              "dataKeys": []
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "cc5ee948-2b89-6fc6-61ef-196511d4e9f7",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "TP_ActivationState",
                  "type": "timeseries",
                  "label": "TP_ActivationState",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.08833173326123034
                },
                {
                  "name": "TP_ConnectionState",
                  "type": "timeseries",
                  "label": "TP_ConnectionState",
                  "color": "#4caf50",
                  "settings": {},
                  "_hash": 0.31041235926920696
                },
                {
                  "name": "TP_OperationState",
                  "type": "timeseries",
                  "label": "TP_OperationState",
                  "color": "#f44336",
                  "settings": {},
                  "_hash": 0.30494083090787716
                }
              ]
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 360
            }
          },
          "title": "thingplus.page.device-details.current-state",
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default",
            "box-shadow": "0px 2px 10px 0 rgba(0, 0, 0, 0.04)"
          },
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "1.6em",
            "font-weight": 500,
            "letter-spacing": "-0.04em",
            "color": "var(--tb-service-font-5)"
          },
          "noDataDisplayMessage": "",
          "showLegend": false
        },
        "row": 0,
        "col": 0,
        "id": "a393fd84-d1c4-0468-34ef-9429a0e11170"
      },
      "682fbf55-3954-07ab-be1a-4657368b14aa": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_main_widgets",
        "typeAlias": "device_operation",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 5.5,
        "sizeY": 8,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "a7bf5b84-5624-0a8d-0971-2366d1b9a055",
              "filterId": null,
              "dataKeys": []
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "cc5ee948-2b89-6fc6-61ef-196511d4e9f7",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "TP_ActivationState",
                  "type": "timeseries",
                  "label": "TP_ActivationState",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.3989023646925025
                },
                {
                  "name": "TP_WorkTimeDay",
                  "type": "timeseries",
                  "label": "TP_WorkTimeDay",
                  "color": "#4caf50",
                  "settings": {},
                  "_hash": 0.619136090659965
                },
                {
                  "name": "TP_PlannedWorkTimeDay",
                  "type": "timeseries",
                  "label": "TP_PlannedWorkTimeDay",
                  "color": "#f44336",
                  "settings": {},
                  "_hash": 0.87612600267128
                }
              ]
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 361
            }
          },
          "title": "thingplus.page.device-details.current-kpi",
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default",
            "box-shadow": "0px 2px 10px 0 rgba(0, 0, 0, 0.04)"
          },
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "1.6em",
            "font-weight": 600,
            "letter-spacing": "-0.05em",
            "color": "var(--tb-service-font-5)"
          },
          "noDataDisplayMessage": "",
          "showLegend": false,
          "actions": {
            "headerButton": []
          }
        },
        "row": 0,
        "col": 0,
        "id": "682fbf55-3954-07ab-be1a-4657368b14aa"
      },
      "45a12803-b794-e43d-4064-94f9a6150092": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_main_widgets",
        "typeAlias": "compare_chart",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 5,
        "sizeY": 4.5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "a7bf5b84-5624-0a8d-0971-2366d1b9a055",
              "filterId": null,
              "dataKeys": []
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "cc5ee948-2b89-6fc6-61ef-196511d4e9f7",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "TP_TotalPowerUsageRaw",
                  "type": "timeseries",
                  "label": "TP_TotalPowerUsageRaw",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.5101123118918485,
                  "units": "kWh",
                  "decimals": 1,
                  "funcBody": null,
                  "usePostProcessing": true,
                  "postFuncBody": "return value / 1000;"
                }
              ]
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 361
            }
          },
          "title": "thingplus.page.device-details.usage-compare",
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default",
            "box-shadow": "0px 2px 10px 0 rgba(0, 0, 0, 0.04)"
          },
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "1.6em",
            "font-weight": 600,
            "letter-spacing": "var(--tb-config-letter-spacing)",
            "color": "var(--tb-service-font-5)"
          },
          "noDataDisplayMessage": "",
          "showLegend": false,
          "actions": {
            "widgetHeaderButton": [
              {
                "name": "Go",
                "icon": "assessment",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "openDashboard",
                "targetDashboardStateId": "default",
                "setEntityId": true,
                "stateEntityParamName": null,
                "openNewBrowserTab": false,
                "targetDashboardId": "12feb130-a843-11ed-8d0d-21e1d787e420",
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "9a88a3d1-07e5-ace4-8f7d-9fd316469136"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "45a12803-b794-e43d-4064-94f9a6150092"
      },
      "08249af0-873e-b5df-0aea-1e13bcd6a5fe": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_main_widgets",
        "typeAlias": "electric_parameter",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 6.5,
        "sizeY": 6,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "a7bf5b84-5624-0a8d-0971-2366d1b9a055",
              "filterId": null,
              "dataKeys": []
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "cc5ee948-2b89-6fc6-61ef-196511d4e9f7",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "f1_volt1",
                  "type": "timeseries",
                  "label": "f1_volt1",
                  "color": "#2196f3",
                  "settings": {
                    "row": 0,
                    "group": 0,
                    "cell": 0
                  },
                  "_hash": 0.1037378836098759,
                  "units": "V",
                  "decimals": 3,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "f1_volt2",
                  "type": "timeseries",
                  "label": "f1_volt2",
                  "color": "#4caf50",
                  "settings": {
                    "row": 0,
                    "group": 0,
                    "cell": 1
                  },
                  "_hash": 0.5911840353791273,
                  "units": "V",
                  "decimals": 3,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "f1_volt3",
                  "type": "timeseries",
                  "label": "f1_volt3",
                  "color": "#f44336",
                  "settings": {
                    "row": 0,
                    "group": 0,
                    "cell": 2
                  },
                  "_hash": 0.6442550612644469,
                  "units": "V",
                  "decimals": 3,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "f1_amp1",
                  "type": "timeseries",
                  "label": "f1_amp1",
                  "color": "#ffc107",
                  "settings": {
                    "row": 1,
                    "group": 0,
                    "cell": 0
                  },
                  "_hash": 0.6568257341270027,
                  "units": "A",
                  "decimals": 3,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "f1_amp2",
                  "type": "timeseries",
                  "label": "f1_amp2",
                  "color": "#607d8b",
                  "settings": {
                    "row": 1,
                    "group": 0,
                    "cell": 1
                  },
                  "_hash": 0.19471087915150997,
                  "units": "A",
                  "decimals": 3,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "f1_amp3",
                  "type": "timeseries",
                  "label": "f1_amp3",
                  "color": "#9c27b0",
                  "settings": {
                    "row": 1,
                    "group": 0,
                    "cell": 2
                  },
                  "_hash": 0.35158941335366634,
                  "units": "A",
                  "decimals": 3,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "f1_watt",
                  "type": "timeseries",
                  "label": "f1_watt",
                  "color": "#e91e63",
                  "settings": {
                    "row": 4,
                    "group": 0,
                    "cell": 0
                  },
                  "_hash": 0.04325736942760039,
                  "units": "",
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": true,
                  "postFuncBody": "return round(value / 1000, 3);\n\nfunction round(value, pos){\n    return Math.round(value * Math.pow(10, pos)) / Math.pow(10, pos)\n}"
                },
                {
                  "name": "f1_var",
                  "type": "timeseries",
                  "label": "f1_var",
                  "color": "#ffeb3b",
                  "settings": {
                    "row": 4,
                    "group": 1,
                    "cell": 0
                  },
                  "_hash": 0.567594120955516,
                  "units": "",
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": true,
                  "postFuncBody": "return round(value / 1000, 3);\n\nfunction round(value, pos){\n    return Math.round(value * Math.pow(10, pos)) / Math.pow(10, pos)\n}"
                },
                {
                  "name": "TP_TotalPowerUsageDay",
                  "type": "timeseries",
                  "label": "TP_TotalPowerUsageDay",
                  "color": "#e91e63",
                  "settings": {},
                  "_hash": 0.2616934901846055,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": true,
                  "postFuncBody": "return round(value / 1000, 3);\n\nfunction round(value, pos){\n    return Math.round(value * Math.pow(10, pos)) / Math.pow(10, pos)\n}"
                },
                {
                  "name": "unbal",
                  "type": "timeseries",
                  "label": "unbal",
                  "color": "#ffeb3b",
                  "settings": {},
                  "_hash": 0.762545716089968
                },
                {
                  "name": "f1_unbal",
                  "type": "timeseries",
                  "label": "f1_unbal",
                  "color": "#03a9f4",
                  "settings": {},
                  "_hash": 0.9944248792499633
                },
                {
                  "name": "electricLimit",
                  "type": "attribute",
                  "label": "electricLimit",
                  "color": "#ff9800",
                  "settings": {},
                  "_hash": 0.835824269306324
                }
              ]
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 499
            }
          },
          "title": "thingplus.page.device-details.electric-parameter",
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default",
            "box-shadow": "0px 2px 10px 0 rgba(0, 0, 0, 0.04)"
          },
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "1.6em",
            "font-weight": 600,
            "letter-spacing": "var(--tb-config-letter-spacing)",
            "color": "var(--tb-service-font-5)"
          },
          "noDataDisplayMessage": "",
          "showLegend": false
        },
        "row": 0,
        "col": 0,
        "id": "08249af0-873e-b5df-0aea-1e13bcd6a5fe"
      },
      "f718d858-4729-7e5a-c21b-b045c693c98b": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_main_widgets",
        "typeAlias": "electric_quality",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 7.5,
        "sizeY": 3,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "a7bf5b84-5624-0a8d-0971-2366d1b9a055",
              "filterId": null,
              "dataKeys": []
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "cc5ee948-2b89-6fc6-61ef-196511d4e9f7",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "f1_PF",
                  "type": "timeseries",
                  "label": "f1_PF",
                  "color": "#f44336",
                  "settings": {
                    "row": 1,
                    "group": 0,
                    "cell": 0
                  },
                  "_hash": 0.30598642946555854,
                  "units": "%",
                  "decimals": 2,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "f1_thd",
                  "type": "timeseries",
                  "label": "f1_thd",
                  "color": "#ffc107",
                  "settings": {
                    "row": 1,
                    "group": 1,
                    "cell": 0
                  },
                  "_hash": 0.8843568774677342,
                  "units": "%",
                  "decimals": 5,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "electricLimit",
                  "type": "attribute",
                  "label": "electricLimit",
                  "color": "#f44336",
                  "settings": {
                    "row": 0,
                    "group": 0,
                    "cell": 0
                  },
                  "_hash": 0.6361846896531169
                }
              ]
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 499
            }
          },
          "title": "thingplus.page.device-details.electric-quality",
          "showTitleIcon": false,
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default",
            "box-shadow": "0px 2px 10px 0 rgba(0, 0, 0, 0.04)"
          },
          "noDataDisplayMessage": "",
          "showLegend": false,
          "titleTooltip": "",
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "1.6em",
            "font-weight": 600,
            "letter-spacing": "var(--tb-config-letter-spacing)",
            "color": "var(--tb-service-font-5)"
          }
        },
        "row": 0,
        "col": 0,
        "id": "f718d858-4729-7e5a-c21b-b045c693c98b"
      },
      "4d118aa2-85cd-6859-ad92-c509f7ce5200": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_main_widgets",
        "typeAlias": "state_timeline_realtime",
        "type": "timeseries",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 8,
        "sizeY": 2,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "a7bf5b84-5624-0a8d-0971-2366d1b9a055",
              "filterId": null,
              "dataKeys": []
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "cc5ee948-2b89-6fc6-61ef-196511d4e9f7",
              "filterId": null,
              "dataKeys": null
            }
          ],
          "timewindow": {
            "hideInterval": false,
            "hideAggregation": false,
            "hideAggInterval": false,
            "hideTimezone": false,
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 0,
              "timewindowMs": 604800000,
              "quickInterval": "CURRENT_DAY",
              "interval": 1800000
            },
            "aggregation": {
              "type": "NONE",
              "limit": 50000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 1634
            }
          },
          "title": "thingplus.menu.state-timeline",
          "dropShadow": false,
          "enableFullscreen": false,
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "1.6em",
            "font-weight": 600,
            "letter-spacing": "var(--tb-config-letter-spacing)",
            "color": "var(--tb-service-font-5)"
          },
          "showTitleIcon": false,
          "titleTooltip": "",
          "widgetStyle": {
            "cursor": "default",
            "box-shadow": "0px 2px 10px 0 rgba(0, 0, 0, 0.04)"
          },
          "noDataDisplayMessage": "",
          "showLegend": false,
          "legendConfig": {
            "direction": "column",
            "position": "bottom",
            "sortDataKeys": false,
            "showMin": false,
            "showMax": false,
            "showAvg": true,
            "showTotal": false
          },
          "useDashboardTimewindow": false,
          "displayTimewindow": false,
          "actions": {
            "headerButton": [],
            "viewChart": [
              {
                "name": "View Chart",
                "icon": "show_chart",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"active-power-form\">\n  <form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\" style=\"font-size: {{calcFontSize()}}px;\">\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\">{{entityLabel}} {{\"thingplus.dialog.detail-active-power\" | translate}}</span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 0.4em\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content>\n      <div class=\"legend\" fxLayoutAlign=\"start center\" fxLayoutGap=\"2.4em\">\n        <div\n          class=\"legend-box\"\n          *ngFor=\"let legend of legendList\"\n          fxLayoutAlign=\"start center\"\n          fxLayoutGap=\"0.5em\"\n          (mouseenter)=\"legendEnter($event, legend)\"\n          (mouseleave)=\"legendLeave($event, legend)\"\n        >\n          <div class=\"legend-circle\" [ngStyle]=\"{'color': legend.color}\"></div>\n          <div class=\"legend-label\">{{legend.label}}</div>\n        </div>\n      </div>\n      <div class=\"chart\"></div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        translate\n      >\n        thingplus.action.close\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#active-power-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  cursor: default;\n  width: 40vw;\n}\n#active-power-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#active-power-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#active-power-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#active-power-form .dialog-close i {\n  font-size: 1.4em;\n}\n#active-power-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#active-power-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#active-power-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#active-power-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#active-power-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#active-power-form .legend {\n  width: 100%;\n  padding-bottom: 2em;\n}\n#active-power-form .legend-circle {\n  width: 0.6em;\n  height: 0.6em;\n  background-color: currentColor;\n}\n#active-power-form .legend-label {\n  font-size: 1.2em;\n  color: var(--tb-service-font-4);\n}\n#active-power-form .legend-box.hidden .legend-label {\n  text-decoration: line-through;\n}\n\n#active-power-form .chart {\n  width: 100%;\n}\n#active-power-form .chart svg {\n  width: 100%;\n  height: auto;\n}\n#active-power-form .chart .tooltip:hover {\n  stroke: var(--tb-service-font-5);\n}\n#active-power-form .bar-rect {\n  transition-property: transform, height;\n  transition-duration: var(--tb-config-color-duration);\n}\n#active-power-form .bar-rect-active {\n  transform: translateY(2px);\n  height: 6px;\n}\n#active-power-form .bar-rect-target {\n  transform: translateY(-2px);\n  height: 14px;\n}\n\n#active-power-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#active-power-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#active-power-form .close-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#active-power-form .close-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#active-power-form .close-button:active {\n  background-color: var(--tb-service-border-0);\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nconst t = widgetContext.custom.t;\nconst STANDARD_WINDOW_SIZE = 1920 / 100;\nconst HOUR_MS = 3600000;\nconst DAY_MS = 24 * HOUR_MS;\nconst ANALYSIS_MAP = ['stopped', 'waiting', 'working', 'trial', 'unconnected'];\nconst STATUS = {\n  stopped: { priority: 0, content: 'thingplus.state.stopped', color: 'var(--tb-service-state-stopped)' },\n  waiting: { priority: 1, content: 'thingplus.state.waiting', color: 'var(--tb-service-state-waiting)' },\n  working: { priority: 2, content: 'thingplus.state.working', color: 'var(--tb-service-state-working)' },\n  trial: { priority: 3, content: 'thingplus.state.trial', color: 'var(--tb-service-state-trial)' },\n  unconnected: { priority: 4, content: 'thingplus.state.unconnected', color: 'var(--tb-service-state-unconnected)' },\n};\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n  customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n  let vm = instance;\n  vm.ownerId = widgetContext.defaultSubscription.configuredDatasources[0].entity.id;\n  vm.t = t;\n  vm.isFirstLoad = true;\n  vm.entityLabel = entityLabel;\n\n  vm.editEntityFormGroup = vm.fb.group({});\n\n  vm.isLoading$.subscribe(async x => {\n    if (vm.isFirstLoad) {\n      vm.isFirstLoad = false;\n      vm.$form = $('#active-power-form');\n      vm.lineData = await loadData();\n      if (vm.lineData['f1_watt']) {\n        vm.lineData = vm.lineData['f1_watt'].map(d => {\n          if (d.value < 0) d.value = 0;\n          return { ts: moment(d.ts).valueOf(), value: d.value };\n        });\n      } else {\n        vm.lineData = [];\n      }\n      drawChart();\n    }\n  });\n\n  vm.legendList = [\n    { key: 'watt', color: 'var(--tb-alarm-major)', label: t('thingplus.parameter.active-power') },\n    { key: 'stopped', color: 'var(--tb-service-state-stopped)', label: t('thingplus.state.stopped') },\n    { key: 'waiting', color: 'var(--tb-service-state-waiting)', label: t('thingplus.state.waiting') },\n    { key: 'working', color: 'var(--tb-service-state-working)', label: t('thingplus.state.working') },\n    { key: 'trial', color: 'var(--tb-service-state-trial)', label: t('thingplus.state.trial') },\n    { key: 'unconnected', color: 'var(--tb-service-state-unconnected)', label: t('thingplus.state.unconnected') },\n  ];\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  vm.legendEnter = function (e, d) {\n    if (d.key == 'watt') return;\n    $(`.bar-rect`, vm.$form).addClass('bar-rect-active');\n    $(`.bar-rect-${d.key}`, vm.$form).removeClass('bar-rect-active');\n    $(`.bar-rect-${d.key}`, vm.$form).addClass('bar-rect-target');\n  };\n  vm.legendLeave = function (e, d) {\n    if (d.key == 'watt') return;\n    $(`.bar-rect`, vm.$form).removeClass('bar-rect-active');\n    $(`.bar-rect`, vm.$form).removeClass('bar-rect-target');\n  };\n\n  // Add the event listeners that show or hide the tooltip.\n  const bisect = d3.bisector(d => d.ts).center;\n\n  function drawChart() {\n    vm.d3Config = {\n      viewWidth: 960,\n      viewHeight: 540,\n      barHeight: 10,\n      barMargin: 15,\n      margin: {\n        top: 5,\n        right: 0,\n        bottom: 40,\n        left: 60,\n      },\n    };\n\n    // svg 영역 정의\n    vm.$d3 = d3\n      .select($('.chart', vm.$form)[0])\n      .append('svg')\n      .attr('viewBox', `0 0 ${vm.d3Config.viewWidth} ${vm.d3Config.viewHeight}`)\n      .attr('width', vm.d3Config.viewWidth)\n      .attr('height', vm.d3Config.viewHeight);\n\n    if (vm.lineData.length > 0) {\n      vm.$d3\n        .on('pointerenter pointermove', pointermoved)\n        .on('pointerleave', pointerleft)\n        .on('touchstart', event => event.preventDefault());\n    }\n\n    drawXAxis();\n    drawYAxis();\n    drawMain();\n    drawBar();\n    vm.$vertical = vm.$d3.select('.main-group').append('g');\n    vm.$horizontal = vm.$d3.select('.main-group').append('g');\n    if (vm.lineData.length > 0) {\n      drawLine();\n    }\n\n    // Create the tooltip container.\n\n    vm.$tooltip = vm.$d3.select('.main-group').append('g');\n  }\n\n  function drawXAxis() {\n    let { custom } = widgetContext;\n    let { viewWidth, viewHeight, margin } = vm.d3Config;\n    const width = viewWidth - margin.left - margin.right;\n    const height = margin.bottom;\n\n    // xAxis 그리기\n    vm.xAxis = d3\n      .scaleTime()\n      .domain(d3.extent([custom.startTs, custom.endTs]))\n      .range([0, width]);\n    vm.$xAxis = vm.$d3\n      .append('g')\n      .attr('class', 'axis')\n      .attr('transform', 'translate(' + margin.left + ', ' + (viewHeight - height) + ')')\n      .style('font-size', '12px')\n      .style('font-family', 'var(--tb-config-font-family)')\n      .style('color', 'var(--tb-service-font-4)')\n      .style('stroke-width', '0.1em')\n      .call(\n        d3\n          .axisBottom(vm.xAxis)\n          .ticks(7)\n          .tickFormat(date => formatDate(date))\n      );\n  }\n\n  function drawYAxis() {\n    let { custom } = widgetContext;\n    let { viewWidth, viewHeight, margin, barHeight, barMargin } = vm.d3Config;\n    const width = viewWidth - margin.left - margin.right;\n    const height = viewHeight - margin.top - margin.bottom;\n\n    // xAxis 그리기\n    vm.yAxis = d3.scaleLinear([d3.max(vm.lineData, d => d.value), 0], [0, height - barHeight - 2 * barMargin]);\n    vm.$yAxis = vm.$d3\n      .append('g')\n      .attr('class', 'axis')\n      .attr('transform', 'translate(' + (viewWidth - width) + ', ' + margin.top + ')')\n      .style('font-size', '12px')\n      .style('font-family', 'var(--tb-config-font-family)')\n      .style('color', 'var(--tb-service-font-4)')\n      .style('stroke-width', '0.1em')\n      .call(d3.axisLeft(vm.yAxis).ticks(5));\n  }\n\n  function drawMain() {\n    let { custom } = widgetContext;\n    let { viewWidth, viewHeight, barMargin, barHeight, margin } = vm.d3Config;\n    const x = vm.xAxis;\n\n    vm.$d3\n      .append('g')\n      .attr('class', 'main-group')\n      .append('rect')\n      .attr('class', 'background')\n      .attr('x', margin.left)\n      .attr('width', viewWidth - margin.left - margin.right)\n      .attr('height', viewHeight - margin.bottom)\n      .attr('fill', 'var(--tb-service-background-1)')\n      .attr('stroke', 'var(--tb-service-border-1)');\n\n    let dayLineList = [custom.startTs];\n    let interval = (_.floor((custom.endTs - custom.startTs - 1) / (7 * DAY_MS)) + 1) * DAY_MS;\n    for (let i = custom.startTs; i < moment(custom.endTs).endOf('day').valueOf(); i += interval) {\n      if (moment(i).startOf('day').valueOf() > custom.startTs) {\n        dayLineList.push(moment(i).startOf('day').valueOf());\n      }\n    }\n    dayLineList.sort();\n\n    vm.$d3\n      .select(`.main-group`)\n      .append('g')\n      .attr('class', `day-group`)\n      .selectAll('g')\n      .data(dayLineList)\n      .enter()\n      .append('rect')\n      .attr('class', 'day-line')\n      .attr('x', d => margin.left + x(d))\n      .attr('width', d => {\n        let endTs = d + interval;\n        if (endTs > custom.endTs) {\n          endTs = custom.endTs;\n        }\n        if (d == custom.startTs) {\n          endTs = moment(d)\n            .add(_.floor(interval / DAY_MS), 'days')\n            .startOf('day')\n            .valueOf();\n        }\n        return x(endTs) - x(d);\n      })\n      .attr('height', viewHeight - margin.bottom)\n      .attr('fill', (d, i) => {\n        return i % 2 == 0 ? 'var(--tb-service-background-4)' : 'var(--tb-service-background-2)';\n      })\n      .attr('opacity', 0.5)\n      .attr('stroke', 'var(--tb-service-border-1)');\n  }\n\n  function drawBar() {\n    let { custom } = widgetContext;\n    let { viewWidth, viewHeight, barMargin, barHeight, margin } = vm.d3Config;\n    const x = vm.xAxis;\n\n    // 상태 변화 막대 그리기\n    vm.$d3.select('.main-group').append('g').attr('class', `bar`);\n\n    vm.$d3\n      .select(`.bar`)\n      .append('g')\n      .selectAll('g')\n      .data(custom.timeline)\n      .enter()\n      .append('rect')\n      .attr('class', d => `bar-rect bar-rect-${ANALYSIS_MAP[d.value]} tooltip tooltip-${d.index}`)\n      .attr('fill', d => {\n        return STATUS[ANALYSIS_MAP[d.value]].color;\n      })\n      .attr('x', d => margin.left + x(d.startTs))\n      .attr('y', viewHeight - margin.bottom - barHeight - barMargin)\n      .attr('width', d => x(d.endTs) - x(d.startTs))\n      .attr('height', barHeight);\n\n    for (let i in custom.timeline) {\n      let $content = $('<div></div>');\n      $content.css({\n        color: 'var(--tb-service-font-0)',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        lineHeight: 1.5,\n        borderRadius: `${8 / STANDARD_WINDOW_SIZE}vw`,\n        padding: `${12 / STANDARD_WINDOW_SIZE}vw`,\n      });\n\n      let startTime = moment(custom.timeline[i].startTs).format(custom.ymdhm);\n      let endTime = moment(custom.timeline[i].endTs).format(custom.ymdhm);\n      let $date = $(`<div>${startTime} ~ ${endTime}</div>`);\n      $date.css({\n        textAlign: 'center',\n        fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n      });\n\n      let $description = $(`<div></div>`);\n      if (!_.isNil(custom.timeline[i].value) && custom.timeline[i].value !== '') {\n        $description.html(`(${t(STATUS[ANALYSIS_MAP[custom.timeline[i].value]].content)})`);\n      }\n      $description.css({\n        textAlign: 'center',\n        fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n      });\n\n      $content.append($date);\n      $content.append($description);\n\n      $(`.tooltip-${custom.timeline[i].index}`, vm.$form).tooltipster({\n        content: $content,\n        interactive: true,\n        theme: 'tooltipster-transparent',\n        trigger: 'hover',\n        delay: 100,\n      });\n    }\n  }\n\n  function drawLine() {\n    let { custom } = widgetContext;\n    let { viewWidth, viewHeight, barHeight, barMargin, margin } = vm.d3Config;\n    const x = vm.xAxis;\n    const y = vm.yAxis;\n\n    vm.$d3.select('.main-group').append('g').attr('class', `line`);\n\n    const line = d3\n      .line()\n      .x(d => x(d.ts))\n      .y(d => y(d.value));\n\n    vm.$d3\n      .select(`.line`)\n      .append('path')\n      .style('transform', `translate(${margin.left}px, ${margin.top}px)`)\n      .attr('fill', 'none')\n      .attr('stroke', 'var(--tb-service-font-3)')\n      .attr('stroke-width', 1)\n      .attr(\n        'd',\n        line([\n          { ts: custom.startTs, value: 0 },\n          { ts: custom.endTs, value: 0 },\n        ])\n      );\n\n    // 상태 변화 막대 그리기\n\n    vm.$d3\n      .select(`.line`)\n      .append('path')\n      .style('transform', `translate(${margin.left}px, ${margin.top}px)`)\n      .attr('fill', 'none')\n      .attr('stroke', 'var(--tb-alarm-major)')\n      .attr('stroke-width', 1.5)\n      .attr('d', line(vm.lineData));\n  }\n\n  function pointermoved(event) {\n    let { custom } = widgetContext;\n    let { viewWidth, viewHeight, barMargin, barHeight, margin } = vm.d3Config;\n    const i = bisect(vm.lineData, vm.xAxis.invert(d3.pointer(event)[0] - margin.left));\n    vm.$tooltip.style('display', null);\n    vm.$vertical.style('display', null);\n    vm.$horizontal.style('display', null);\n    let standard = (viewHeight - margin.bottom - barHeight - 2 * barMargin) / 2;\n    let yTrans = 0;\n    let xTrans = 0;\n    if (vm.xAxis(vm.lineData[i].ts) < margin.left + 60) {\n      xTrans = 60;\n    }\n    if (vm.xAxis(vm.lineData[i].ts) > viewWidth - margin.left - margin.right - 60) {\n      xTrans = -60;\n    }\n    if (vm.yAxis(vm.lineData[i].value) > standard) {\n      yTrans = -60;\n    } else {\n      yTrans = 0;\n    }\n    vm.$tooltip.attr(\n      'transform',\n      `translate(${margin.left + vm.xAxis(vm.lineData[i].ts) + xTrans},${vm.yAxis(vm.lineData[i].value) + yTrans})`\n    );\n    vm.$vertical.attr('transform', `translate(${margin.left + vm.xAxis(vm.lineData[i].ts)},0)`);\n    vm.$horizontal.attr('transform', `translate(0,${vm.yAxis(vm.lineData[i].value) + margin.top})`);\n\n    const path = vm.$tooltip.selectAll('path').data([,]).join('path').attr('fill', 'rgba(25,25,25,0.9)');\n    const text = vm.$tooltip\n      .selectAll('text')\n      .data([,])\n      .join('text')\n      .call(text =>\n        text\n          .selectAll('tspan')\n          .data([formatFullDate(vm.lineData[i].ts), formatValue(vm.lineData[i].value)])\n          .join('tspan')\n          .attr('x', 0)\n          .attr('y', (_, i) => `${i * 1.1}em`)\n          .attr('font-weight', (_, i) => (i ? null : 'bold'))\n          .attr('fill', 'var(--tb-service-font-0)')\n          .attr('font-size', '12px')\n          .text(d => d)\n      );\n\n    vm.$vertical\n      .selectAll('path')\n      .data([,])\n      .join('path')\n      .attr('stroke', 'var(--tb-service-font-3)')\n      .attr('stroke-width', 1)\n      .attr('d', `M0,0V${viewHeight - margin.bottom - barHeight - 2 * barMargin}`);\n    vm.$horizontal\n      .selectAll('path')\n      .data([,])\n      .join('path')\n      .attr('stroke', 'var(--tb-service-font-3)')\n      .attr('stroke-width', 1)\n      .attr('d', `M${margin.left},0H${viewWidth - margin.right}`);\n\n    size(text, path);\n  }\n\n  function pointerleft() {\n    vm.$tooltip.style('display', 'none');\n    vm.$vertical.style('display', 'none');\n    vm.$horizontal.style('display', 'none');\n  }\n\n  function size(text, path) {\n    const { x, y, width: w, height: h } = text.node().getBBox();\n    text.attr('transform', `translate(${-w / 2},${15 - y})`);\n    path.attr('d', `M${-w / 2 - 10},5H-15H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n  }\n}\n\nfunction loadData() {\n  return new Promise((resolve, reject) => {\n    let acc = 'NONE';\n    if (widgetContext.custom.endTs - widgetContext.custom.startTs > 31 * DAY_MS) {\n      acc = 'MAX';\n    }\n    attributeService\n      .getEntityTimeseries(\n        entityId,\n        ['f1_watt'],\n        widgetContext.custom.startTs,\n        widgetContext.custom.endTs,\n        50000,\n        acc,\n        Math.floor((widgetContext.custom.endTs - widgetContext.custom.startTs) / 500),\n        'ASC',\n        true\n      )\n      .subscribe(datas => {\n        resolve(datas);\n      });\n  });\n}\n\nfunction getStyle(target) {\n  return widgetContext.custom.computedStyle.getPropertyValue(target);\n}\n\nfunction formatDate(date) {\n  if (d3.timeHour(date) < date) {\n    return d3.timeFormat(t('thingplus.time-format.d3-hm'))(date);\n  } else if (d3.timeDay(date) < date) {\n    return d3.timeFormat(t('thingplus.time-format.d3-dh'))(date);\n  } else {\n    return d3.timeFormat(t('thingplus.time-format.d3-md'))(date);\n  }\n}\n\nfunction formatFullDate(date) {\n  return moment(date).format('YYYY-MM-DD HH:mm');\n}\n\nfunction formatValue(value) {\n  return value.toLocaleString() + 'W';\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "65b54fa0-265c-cfb3-974f-61634fdbcb53"
              }
            ],
            "toEdit": [
              {
                "name": "To Edit",
                "icon": "more_horiz",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "openDashboard",
                "targetDashboardStateId": "change-timeline",
                "setEntityId": true,
                "stateEntityParamName": null,
                "openNewBrowserTab": false,
                "targetDashboardId": "0dd791e0-a843-11ed-8d0d-21e1d787e420",
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "877bea99-af8b-5d36-2fb1-68d91b4f632b"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "4d118aa2-85cd-6859-ad92-c509f7ce5200"
      },
      "e330d96d-effd-c5dc-09db-476f130c9ed9": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_main_widgets",
        "typeAlias": "manager_info",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 7.5,
        "sizeY": 3,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "a7bf5b84-5624-0a8d-0971-2366d1b9a055",
              "filterId": null,
              "dataKeys": []
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "cc5ee948-2b89-6fc6-61ef-196511d4e9f7",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "manager",
                  "type": "attribute",
                  "label": "thingplus.label.manager",
                  "color": "#2196f3",
                  "settings": {
                    "icon": "person"
                  },
                  "_hash": 0.6207616118491832,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": true,
                  "postFuncBody": "if(!value){\n    return '-'\n}\nreturn value"
                },
                {
                  "name": "phone",
                  "type": "attribute",
                  "label": "thingplus.label.phone",
                  "color": "#4caf50",
                  "settings": {
                    "icon": "phone"
                  },
                  "_hash": 0.7538552866820794,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": true,
                  "postFuncBody": "if(!value){\n    return '-'\n}\nreturn value"
                },
                {
                  "name": "email",
                  "type": "attribute",
                  "label": "thingplus.label.email",
                  "color": "#f44336",
                  "settings": {
                    "icon": "mail"
                  },
                  "_hash": 0.23599712666500228,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": true,
                  "postFuncBody": "if(!value){\n    return '-'\n}\nreturn value"
                }
              ]
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "ad52c102-7808-5a29-c62f-0d793624ee33",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "firstName",
                  "type": "entityField",
                  "label": "thingplus.label.manager",
                  "color": "#9c27b0",
                  "settings": {
                    "icon": "person",
                    "useCellContentFunction": true,
                    "cellContentFunction": "if(!value){\n    return '-'\n}\nreturn value"
                  },
                  "_hash": 0.34053785887619936,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "additionalInfo",
                  "type": "entityField",
                  "label": "thingplus.label.phone",
                  "color": "#607d8b",
                  "settings": {
                    "icon": "phone",
                    "useCellContentFunction": true,
                    "cellContentFunction": "if(!value){\n    return '-'\n}\nlet json = JSON.parse(value)\nreturn json.phone;"
                  },
                  "_hash": 0.29524535484743275,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "email",
                  "type": "entityField",
                  "label": "thingplus.label.email",
                  "color": "#9c27b0",
                  "settings": {
                    "icon": "mail",
                    "cellContentFunction": "if(!value){\n    return '-'\n}\nreturn value",
                    "useCellContentFunction": true
                  },
                  "_hash": 0.774773435570391,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ]
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 360
            }
          },
          "title": "thingplus.page.device-details.manager-info",
          "showTitleIcon": false,
          "titleIcon": "",
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default",
            "box-shadow": "0px 2px 10px 0 rgba(0, 0, 0, 0.04)"
          },
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "1.6em",
            "font-weight": 600,
            "letter-spacing": "-0.05em",
            "color": "var(--tb-service-font-5)"
          },
          "noDataDisplayMessage": "",
          "showLegend": false
        },
        "row": 0,
        "col": 0,
        "id": "e330d96d-effd-c5dc-09db-476f130c9ed9"
      },
      "7924f268-a0e0-6388-88e8-ac68cc0f8968": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_main_widgets",
        "typeAlias": "alarm_realtime",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 7.5,
        "sizeY": 3,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "a7bf5b84-5624-0a8d-0971-2366d1b9a055",
              "filterId": null,
              "dataKeys": []
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "cc5ee948-2b89-6fc6-61ef-196511d4e9f7",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "createdTime",
                  "type": "timeseries",
                  "label": "thingplus.label.created-time",
                  "color": "#2196f3",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if(value != 0){\n    var timeFormat = ctx.custom.t('thingplus.time-format.ymdhms') \n    return moment(value).format(timeFormat)\n}else {\n    return '-'\n}\n"
                  },
                  "_hash": 0.36360906019154404,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "customerL1Name",
                  "type": "timeseries",
                  "label": "thingplus.label.customerL1-name",
                  "color": "#4caf50",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "useCellActionFunction": false
                  },
                  "_hash": 0.21299289872647087,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "customerL2Name",
                  "type": "timeseries",
                  "label": "thingplus.label.customerL2-name",
                  "color": "#f44336",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "useCellActionFunction": false
                  },
                  "_hash": 0.7390266464265383,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "originatorLabel",
                  "type": "timeseries",
                  "label": "thingplus.label.device-name",
                  "color": "#ffc107",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "useCellActionFunction": false
                  },
                  "_hash": 0.12377245170070705,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "category",
                  "type": "timeseries",
                  "label": "thingplus.label.alarm-category",
                  "color": "#607d8b",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "return ctx.custom.t('thingplus.alarm-category.' + value)"
                  },
                  "_hash": 0.39865502927799135,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "type",
                  "type": "timeseries",
                  "label": "thingplus.label.alarm-type",
                  "color": "#9c27b0",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "return ctx.custom.t('thingplus.alarm-type.' + value)"
                  },
                  "_hash": 0.17926434626443744,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "severity",
                  "type": "timeseries",
                  "label": "thingplus.label.alarm-severity",
                  "color": "#8bc34a",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "const MAP = {\n    CRITICAL: {label: ctx.custom.t('thingplus.alarm-severity.CRITICAL'), icon: 'error_outline'},\n    MAJOR: {label: ctx.custom.t('thingplus.alarm-severity.MAJOR'), icon: 'report_problem'},\n    MINOR: {label: ctx.custom.t('thingplus.alarm-severity.MINOR'), icon: 'report_problem'},\n    WARNING: {label: ctx.custom.t('thingplus.alarm-severity.WARNING'), icon: 'report_problem'},\n    INTERMIDIATE: {label: ctx.custom.t('thingplus.alarm-severity.INTERMIDIATE'), icon: 'info'}\n}\nreturn `<div class=\"severity-box ${value}\"><i class=\"material-icons-outlined\">${MAP[value].icon}</i><span>${MAP[value].label}</span></div>`"
                  },
                  "_hash": 0.6726724616390494,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "ackTs",
                  "type": "timeseries",
                  "label": "thingplus.label.ack-time",
                  "color": "#3f51b5",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if(value != 0){\n    var timeFormat = ctx.custom.t('thingplus.time-format.ymdhms') \n    return moment(value).format(timeFormat)\n}else {\n    return '-'\n}\n"
                  },
                  "_hash": 0.5730797416936908,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "clearTs",
                  "type": "timeseries",
                  "label": "thingplus.label.clear-time",
                  "color": "#e91e63",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if(value != 0){\n    var timeFormat = ctx.custom.t('thingplus.time-format.ymdhms') \n    return moment(value).format(timeFormat)\n}else {\n    return '-'\n}\n"
                  },
                  "_hash": 0.7524334183517507,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ]
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 1630
            }
          },
          "title": "thingplus.page.event.event-list",
          "showTitleIcon": false,
          "dropShadow": true,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default"
          },
          "noDataDisplayMessage": "",
          "showLegend": false,
          "titleTooltip": "",
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "1.6em",
            "font-weight": 600,
            "letter-spacing": "var(--tb-config-letter-spacing)",
            "color": "var(--tb-service-font-5)"
          },
          "actions": {
            "actionCellButton": [
              {
                "name": "Ack",
                "icon": "check",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "custom",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet alarmService = $injector.get(widgetContext.servicesMap.get('alarmService'));\n\nconsole.log(additionalParams)\n\nlet t = widgetContext.custom.t;\nconst TIME_FORMAT = t('thingplus.time-format.ymdhms');\n\nopenAckAlarmDialog();\n\nfunction openAckAlarmDialog() {\n  let alarm = additionalParams;\n  let createdTime = alarm.createdTime == 0 ? '-' : moment(alarm.createdTime).format(TIME_FORMAT);\n  let type = t('thingplus.alarm-type.' + alarm.type);\n\n  let title = t('thingplus.dialog.ack-event-title');\n  let content = t('thingplus.dialog.ack-event-msg', { createdTime: createdTime, type: type });\n  dialogs.confirm(title, content, t('thingplus.action.ack'), t('thingplus.action.close')).subscribe(function (result) {\n    if (!result) {\n      alarmService.ackAlarm(entityId.id).subscribe(() => {\n        widgetContext.updateAliases();\n      });\n    }\n  });\n}\n",
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "8b012069-2f00-f663-e8f7-20c3910a2bb1"
              },
              {
                "name": "Details",
                "icon": "search",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"view-details-form\">\n  <form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\" style=\"font-size: {{calcFontSize()}}px;\">\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\">{{entityLabel}} {{\"thingplus.dialog.detail-alarm\" | translate}}</span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 0.4em\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content>\n      <div class=\"info\" fxLayoutAlign=\"space-between\">\n        <div\n          class=\"label-box\"\n          fxFlex=\"33.33\"\n          *ngFor=\"let label of labelList\"\n          fxFlex\n          fxLayout=\"column\"\n          fxLayoutAlign=\"start start\"\n        >\n          <div class=\"label\">{{label.label}}</div>\n          <div class=\"value\">{{label.value}}</div>\n        </div>\n      </div>\n      <div class=\"info\" fxLayoutAlign=\"space-between\">\n        <div\n          class=\"label-box\"\n          fxFlex=\"33.33\"\n          *ngFor=\"let label of labelList2\"\n          fxFlex\n          fxLayout=\"column\"\n          fxLayoutAlign=\"start start\"\n        >\n          <div class=\"label\">{{label.label}}</div>\n          <div class=\"value\">{{label.value}}</div>\n        </div>\n      </div>\n      <div class=\"legend\" fxLayoutAlign=\"start center\" fxLayoutGap=\"2.4em\" *ngIf=\"showTrend\">\n        <div class=\"legend-box\" *ngFor=\"let legend of legendList\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n          <div class=\"legend-circle\" [ngStyle]=\"{'color': legend.color}\"></div>\n          <div class=\"legend-label\">{{legend.label}}</div>\n        </div>\n      </div>\n      <div class=\"chart\" *ngIf=\"showTrend\"></div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        translate\n      >\n        thingplus.action.close\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#view-details-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  cursor: default;\n  width: 40vw;\n}\n#view-details-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#view-details-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#view-details-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#view-details-form .dialog-close i {\n  font-size: 1.4em;\n}\n#view-details-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#view-details-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#view-details-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#view-details-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#view-details-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#view-details-form .info {\n  width: 100%;\n  padding: 2em 0em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#view-details-form .info:first-child {\n  border-top: none;\n  padding-top: 0em;\n}\n#view-details-form .label-box {\n  padding: 0em 2em;\n  border-left: 1px solid var(--tb-service-border-1);\n}\n#view-details-form .label-box:first-child {\n  padding-left: 0;\n  border-left: none;\n}\n#view-details-form .label-box:last-child {\n  padding-right: 0;\n}\n#view-details-form .label {\n  color: var(--tb-service-font-3);\n  font-size: 1.2em;\n}\n#view-details-form .value {\n  color: var(--tb-service-font-5);\n  font-weight: 500;\n  font-size: 1.4em;\n}\n\n#view-details-form .legend {\n  width: 100%;\n  padding-top: 2em;\n  padding-bottom: 1em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#view-details-form .legend-circle {\n  width: 0.6em;\n  height: 0.6em;\n  background-color: currentColor;\n}\n#view-details-form .legend-label {\n  font-size: 1.2em;\n  color: var(--tb-service-font-4);\n}\n#view-details-form .legend-box.hidden .legend-label {\n  text-decoration: line-through;\n}\n\n#view-details-form .chart {\n  width: 100%;\n}\n#view-details-form .chart svg {\n  width: 100%;\n  height: auto;\n}\n#view-details-form .chart .tooltip:hover {\n  stroke: var(--tb-service-font-5);\n}\n#view-details-form .bar-rect {\n  transition-property: transform, height;\n  transition-duration: var(--tb-config-color-duration);\n}\n#view-details-form .bar-rect-active {\n  transform: translateY(2px);\n  height: 6px;\n}\n#view-details-form .bar-rect-target {\n  transform: translateY(-2px);\n  height: 14px;\n}\n\n#view-details-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#view-details-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#view-details-form .close-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#view-details-form .close-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#view-details-form .close-button:active {\n  background-color: var(--tb-service-border-0);\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nconst t = widgetContext.custom.t;\nconst STANDARD_WINDOW_SIZE = 1920 / 100;\nconst HOUR_MS = 3600000;\nconst DAY_MS = 24 * HOUR_MS;\nconst TREND = {\n  'volt-imbalance': { label: t('thingplus.alarm-type.volt-imbalance'), key: 'unbal' },\n  'curr-imbalance': { label: t('thingplus.alarm-type.curr-imbalance'), key: 'f1_unbal' },\n  thd: { label: t('thingplus.alarm-type.thd'), key: 'f1_thd' },\n  'power-factor': { label: t('thingplus.alarm-type.power-factor'), key: 'f1_PF' },\n};\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n  customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n  let vm = instance;\n  vm.ownerId = widgetContext.defaultSubscription.configuredDatasources[0].entity.id;\n  vm.t = t;\n  vm.isFirstLoad = true;\n  vm.entityLabel = entityLabel;\n\n  vm.editEntityFormGroup = vm.fb.group({});\n  vm.showTrend = false;\n  vm.legendList = [];\n  vm.labelList = [\n    { label: t('thingplus.label.customerL1-name'), value: additionalParams.customerL1Name },\n    { label: t('thingplus.label.customerL2-name'), value: additionalParams.customerL2Name },\n    { label: t('thingplus.label.device-name'), value: additionalParams.originatorLabel },\n  ];\n  vm.labelList2 = [\n    { label: t('thingplus.label.alarm-category'), value: t('thingplus.alarm-category.' + additionalParams.category) },\n    { label: t('thingplus.label.alarm-type'), value: t('thingplus.alarm-type.' + additionalParams.type) },\n    { label: t('thingplus.label.alarm-severity'), value: t('thingplus.alarm-severity.' + additionalParams.severity) },\n  ];\n\n  vm.isLoading$.subscribe(async x => {\n    if (vm.isFirstLoad) {\n      vm.isFirstLoad = false;\n      vm.$form = $('#view-details-form');\n      if (TREND[additionalParams.type]) {\n        vm.showTrend = true;\n        vm.key = TREND[additionalParams.type].key;\n        vm.startTs = additionalParams.createdTime;\n        vm.endTs = moment().valueOf();\n        if (additionalParams.clearTs != 0) {\n          vm.endTs = additionalParams.clearTs;\n        }\n        vm.legendList = [\n          { key: additionalParams.type, color: 'var(--tb-alarm-major)', label: TREND[additionalParams.type].label },\n        ];\n        vm.lineData = await loadData(vm.key);\n        if (vm.lineData[vm.key]) {\n          vm.lineData = vm.lineData[vm.key].map(d => {\n            if (d.value < 0) d.value = 0;\n            return { ts: moment(d.ts).valueOf(), value: d.value };\n          });\n        } else {\n          vm.lineData = [];\n        }\n        console.log(vm.lineData);\n        drawChart();\n      }\n    }\n  });\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n\n  // Add the event listeners that show or hide the tooltip.\n  const bisect = d3.bisector(d => d.ts).center;\n\n  function drawChart() {\n    vm.d3Config = {\n      viewWidth: 960,\n      viewHeight: 540,\n      margin: {\n        top: 10,\n        right: 0,\n        bottom: 40,\n        left: 60,\n      },\n    };\n\n    // svg 영역 정의\n    vm.$d3 = d3\n      .select($('.chart', vm.$form)[0])\n      .append('svg')\n      .attr('viewBox', `0 0 ${vm.d3Config.viewWidth} ${vm.d3Config.viewHeight}`)\n      .attr('width', vm.d3Config.viewWidth)\n      .attr('height', vm.d3Config.viewHeight);\n\n    if (vm.lineData.length > 0) {\n      vm.$d3\n        .on('pointerenter pointermove', pointermoved)\n        .on('pointerleave', pointerleft)\n        .on('touchstart', event => event.preventDefault());\n    }\n\n    drawXAxis();\n    drawYAxis();\n    drawMain();\n    vm.$vertical = vm.$d3.select('.main-group').append('g');\n    vm.$horizontal = vm.$d3.select('.main-group').append('g');\n    if (vm.lineData.length > 0) {\n      drawLine();\n    }\n\n    // Create the tooltip container.\n    vm.$tooltip = vm.$d3.select('.main-group').append('g');\n  }\n\n  function drawXAxis() {\n    let { custom } = widgetContext;\n    let { viewWidth, viewHeight, margin } = vm.d3Config;\n    const width = viewWidth - margin.left - margin.right;\n    const height = margin.bottom;\n\n    // xAxis 그리기\n    vm.xAxis = d3\n      .scaleTime()\n      .domain(d3.extent([vm.startTs, vm.endTs]))\n      .range([0, width]);\n    vm.$xAxis = vm.$d3\n      .append('g')\n      .attr('class', 'axis')\n      .attr('transform', 'translate(' + margin.left + ', ' + (viewHeight - height) + ')')\n      .style('font-size', '12px')\n      .style('font-family', 'var(--tb-config-font-family)')\n      .style('color', 'var(--tb-service-font-4)')\n      .style('stroke-width', '0.1em')\n      .call(\n        d3\n          .axisBottom(vm.xAxis)\n          .ticks(4)\n          .tickFormat(date => formatDate(date))\n      );\n  }\n\n  function drawYAxis() {\n    let { custom } = widgetContext;\n    let { viewWidth, viewHeight, margin } = vm.d3Config;\n    const width = viewWidth - margin.left - margin.right;\n    const height = viewHeight - margin.top - margin.bottom;\n\n    // xAxis 그리기\n    //d3.max(vm.lineData, d => d.value)\n    vm.yAxis = d3.scaleLinear([100, 0], [0, height]);\n    vm.$yAxis = vm.$d3\n      .append('g')\n      .attr('class', 'axis')\n      .attr('transform', 'translate(' + (viewWidth - width) + ', ' + margin.top + ')')\n      .style('font-size', '12px')\n      .style('font-family', 'var(--tb-config-font-family)')\n      .style('color', 'var(--tb-service-font-4)')\n      .style('stroke-width', '0.1em')\n      .call(d3.axisLeft(vm.yAxis).ticks(5));\n  }\n\n  function drawMain() {\n    let { custom } = widgetContext;\n    let { viewWidth, viewHeight, margin } = vm.d3Config;\n    const x = vm.xAxis;\n\n    vm.$d3\n      .append('g')\n      .attr('class', 'main-group')\n      .append('rect')\n      .attr('class', 'background')\n      .attr('x', margin.left)\n      .attr('width', viewWidth - margin.left - margin.right)\n      .attr('height', viewHeight - margin.bottom)\n      .attr('fill', 'var(--tb-service-background-1)')\n      .attr('stroke', 'var(--tb-service-border-1)');\n\n    let dayLineList = [vm.startTs];\n    let interval = (_.floor((vm.endTs - vm.startTs) / (7 * DAY_MS)) + 1) * DAY_MS;\n    for (let i = vm.startTs; i < moment(vm.endTs).endOf('day').valueOf(); i += interval) {\n      if (moment(i).startOf('day').valueOf() > vm.startTs) {\n        dayLineList.push(moment(i).startOf('day').valueOf());\n      }\n    }\n    dayLineList.sort();\n    if (vm.endTs - vm.startTs <= DAY_MS) {\n      dayLineList = [];\n    }\n\n    vm.$d3\n      .select(`.main-group`)\n      .append('g')\n      .attr('class', `day-group`)\n      .selectAll('g')\n      .data(dayLineList)\n      .enter()\n      .append('rect')\n      .attr('class', 'day-line')\n      .attr('x', d => margin.left + x(d))\n      .attr('width', d => {\n        let endTs = d + interval;\n        if (endTs > vm.endTs) {\n          endTs = vm.endTs;\n        }\n        if (d == vm.startTs) {\n          endTs = moment(d)\n            .add(_.floor(interval / DAY_MS), 'days')\n            .startOf('day')\n            .valueOf();\n        }\n        return x(endTs) - x(d);\n      })\n      .attr('height', viewHeight - margin.bottom)\n      .attr('fill', (d, i) => {\n        return i % 2 == 0 ? 'var(--tb-service-background-4)' : 'var(--tb-service-background-2)';\n      })\n      .attr('opacity', 0.5)\n      .attr('stroke', 'var(--tb-service-border-1)');\n  }\n\n  function drawLine() {\n    let { viewWidth, viewHeight, margin } = vm.d3Config;\n    const x = vm.xAxis;\n    const y = vm.yAxis;\n\n    vm.$d3.select('.main-group').append('g').attr('class', `line`);\n\n    const line = d3\n      .line()\n      .x(d => x(d.ts))\n      .y(d => y(d.value));\n\n    vm.$d3\n      .select(`.line`)\n      .append('path')\n      .style('transform', `translate(${margin.left}px, ${margin.top}px)`)\n      .attr('fill', 'none')\n      .attr('stroke', 'var(--tb-service-font-3)')\n      .attr('stroke-width', 1)\n      .attr(\n        'd',\n        line([\n          { ts: vm.startTs, value: 0 },\n          { ts: vm.endTs, value: 0 },\n        ])\n      );\n\n    // 상태 변화 막대 그리기\n\n    vm.$d3\n      .select(`.line`)\n      .append('path')\n      .style('transform', `translate(${margin.left}px, ${margin.top}px)`)\n      .attr('fill', 'none')\n      .attr('stroke', 'var(--tb-alarm-major)')\n      .attr('stroke-width', 1.5)\n      .attr('d', line(vm.lineData));\n  }\n\n  function pointermoved(event) {\n    let { custom } = widgetContext;\n    let { viewWidth, viewHeight, margin } = vm.d3Config;\n    const i = bisect(vm.lineData, vm.xAxis.invert(d3.pointer(event)[0] - margin.left));\n    vm.$tooltip.style('display', null);\n    vm.$vertical.style('display', null);\n    vm.$horizontal.style('display', null);\n    let standard = (viewHeight - margin.bottom) / 2;\n    let yTrans = 0;\n    let xTrans = 0;\n    if (vm.xAxis(vm.lineData[i].ts) < margin.left + 60) {\n      xTrans = 60;\n    }\n    if (vm.xAxis(vm.lineData[i].ts) > viewWidth - margin.left - margin.right - 60) {\n      xTrans = -60;\n    }\n    if (vm.yAxis(vm.lineData[i].value) > standard) {\n      yTrans = -60;\n    } else {\n      yTrans = 0;\n    }\n    vm.$tooltip.attr(\n      'transform',\n      `translate(${margin.left + vm.xAxis(vm.lineData[i].ts) + xTrans},${vm.yAxis(vm.lineData[i].value) + yTrans})`\n    );\n    vm.$vertical.attr('transform', `translate(${margin.left + vm.xAxis(vm.lineData[i].ts)},0)`);\n    vm.$horizontal.attr('transform', `translate(0,${vm.yAxis(vm.lineData[i].value) + margin.top})`);\n\n    const path = vm.$tooltip.selectAll('path').data([,]).join('path').attr('fill', 'rgba(25,25,25,0.9)');\n    const text = vm.$tooltip\n      .selectAll('text')\n      .data([,])\n      .join('text')\n      .call(text =>\n        text\n          .selectAll('tspan')\n          .data([formatFullDate(vm.lineData[i].ts), vm.lineData[i].value])\n          .join('tspan')\n          .attr('x', 0)\n          .attr('y', (_, i) => `${i * 1.1}em`)\n          .attr('font-weight', (_, i) => (i ? null : 'bold'))\n          .attr('fill', 'var(--tb-service-font-0)')\n          .attr('font-size', '12px')\n          .text(d => d)\n      );\n\n    vm.$vertical\n      .selectAll('path')\n      .data([,])\n      .join('path')\n      .attr('stroke', 'var(--tb-service-font-3)')\n      .attr('stroke-width', 1)\n      .attr('d', `M0,0V${viewHeight - margin.bottom}`);\n    vm.$horizontal\n      .selectAll('path')\n      .data([,])\n      .join('path')\n      .attr('stroke', 'var(--tb-service-font-3)')\n      .attr('stroke-width', 1)\n      .attr('d', `M${margin.left},0H${viewWidth - margin.right}`);\n\n    size(text, path);\n  }\n\n  function pointerleft() {\n    vm.$tooltip.style('display', 'none');\n    vm.$vertical.style('display', 'none');\n    vm.$horizontal.style('display', 'none');\n  }\n\n  function size(text, path) {\n    const { x, y, width: w, height: h } = text.node().getBBox();\n    text.attr('transform', `translate(${-w / 2},${15 - y})`);\n    path.attr('d', `M${-w / 2 - 10},5H-15H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n  }\n\n  function loadData(key) {\n    return new Promise((resolve, reject) => {\n      let acc = 'NONE';\n      if (vm.endTs - vm.startTs > 31 * DAY_MS) {\n        acc = 'AVG';\n      }\n      attributeService\n        .getEntityTimeseries(\n          additionalParams.originator,\n          [key],\n          vm.startTs,\n          vm.endTs,\n          50000,\n          acc,\n          Math.floor((vm.endTs - vm.startTs) / 500),\n          'ASC',\n          true\n        )\n        .subscribe(datas => {\n          resolve(datas);\n        });\n    });\n  }\n}\n\nfunction getStyle(target) {\n  return widgetContext.custom.computedStyle.getPropertyValue(target);\n}\n\nfunction formatDate(date) {\n  if (d3.timeHour(date) < date) {\n    return d3.timeFormat(t('thingplus.time-format.d3-hm'))(date);\n  } else if (d3.timeDay(date) < date) {\n    return d3.timeFormat(t('thingplus.time-format.d3-dh'))(date);\n  } else {\n    return d3.timeFormat(t('thingplus.time-format.d3-md'))(date);\n  }\n}\n\nfunction formatFullDate(date) {\n  return moment(date).format('YYYY-MM-DD HH:mm');\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "d450962f-e129-6969-0005-30071e52825b"
              }
            ],
            "customAction": []
          }
        },
        "row": 0,
        "col": 0,
        "id": "7924f268-a0e0-6388-88e8-ac68cc0f8968"
      },
      "21f60164-5fc3-5e20-0e97-5153a889167f": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_main_widgets",
        "typeAlias": "time_compare_chart",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 5,
        "sizeY": 4.5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "a7bf5b84-5624-0a8d-0971-2366d1b9a055",
              "filterId": null,
              "dataKeys": []
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "cc5ee948-2b89-6fc6-61ef-196511d4e9f7",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "TP_AnalysisState",
                  "type": "timeseries",
                  "label": "TP_AnalysisState",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.3911955362197346,
                  "units": "시간",
                  "decimals": 1,
                  "funcBody": null,
                  "usePostProcessing": true,
                  "postFuncBody": "return value / (60 * 60 * 1000);"
                }
              ]
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 361
            }
          },
          "title": "thingplus.page.device-details.operation-time-compare",
          "showTitleIcon": false,
          "titleTooltip": "",
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default",
            "box-shadow": "0px 2px 10px 0 rgba(0, 0, 0, 0.04)"
          },
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "1.6em",
            "font-weight": 600,
            "letter-spacing": "var(--tb-config-letter-spacing)",
            "color": "var(--tb-service-font-5)"
          },
          "noDataDisplayMessage": "",
          "showLegend": false,
          "actions": {
            "widgetHeaderButton": [
              {
                "name": "Go",
                "icon": "timelapse",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "openDashboard",
                "targetDashboardStateId": "default",
                "setEntityId": true,
                "stateEntityParamName": null,
                "openNewBrowserTab": false,
                "targetDashboardId": "848884b0-2125-11ee-8d0d-21e1d787e420",
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "8ce6aaf0-1ea3-0350-9e10-f91cf914d688"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "21f60164-5fc3-5e20-0e97-5153a889167f"
      }
    },
    "states": {
      "default": {
        "name": "{i18n:thingplus.menu.device-details}",
        "root": true,
        "layouts": {
          "main": {
            "widgets": {
              "19889780-8872-04d7-adc3-6012b977b85d": {
                "sizeX": 97,
                "sizeY": 4,
                "row": 0,
                "col": 0,
                "mobileHeight": 1,
                "mobileOrder": 0
              },
              "07cad930-4b56-4437-cbf8-856434ae6815": {
                "sizeX": 21,
                "sizeY": 37,
                "row": 4,
                "col": 1,
                "mobileHeight": 7,
                "mobileOrder": 2
              },
              "a393fd84-d1c4-0468-34ef-9429a0e11170": {
                "sizeX": 21,
                "sizeY": 5,
                "row": 4,
                "col": 23,
                "mobileOrder": 1,
                "mobileHeight": 2,
                "mobileHide": true
              },
              "682fbf55-3954-07ab-be1a-4657368b14aa": {
                "sizeX": 21,
                "sizeY": 18,
                "row": 23,
                "col": 23,
                "mobileOrder": 3,
                "mobileHeight": 5
              },
              "45a12803-b794-e43d-4064-94f9a6150092": {
                "sizeX": 21,
                "sizeY": 18,
                "row": 23,
                "col": 45,
                "mobileOrder": 5,
                "mobileHeight": 5
              },
              "08249af0-873e-b5df-0aea-1e13bcd6a5fe": {
                "sizeX": 29,
                "sizeY": 24,
                "row": 4,
                "col": 67,
                "mobileOrder": 6,
                "mobileHeight": 6
              },
              "f718d858-4729-7e5a-c21b-b045c693c98b": {
                "sizeX": 29,
                "sizeY": 12,
                "row": 29,
                "col": 67,
                "mobileOrder": 7,
                "mobileHeight": 3
              },
              "4d118aa2-85cd-6859-ad92-c509f7ce5200": {
                "sizeX": 95,
                "sizeY": 9,
                "row": 42,
                "col": 1,
                "mobileOrder": 8,
                "mobileHeight": 3
              },
              "e330d96d-effd-c5dc-09db-476f130c9ed9": {
                "sizeX": 21,
                "sizeY": 12,
                "row": 10,
                "col": 23
              },
              "7924f268-a0e0-6388-88e8-ac68cc0f8968": {
                "sizeX": 95,
                "sizeY": 40,
                "row": 52,
                "col": 1
              },
              "21f60164-5fc3-5e20-0e97-5153a889167f": {
                "sizeX": 21,
                "sizeY": 18,
                "row": 4,
                "col": 45
              }
            },
            "gridSettings": {
              "backgroundColor": "var(--tb-service-background-4)",
              "columns": 97,
              "margin": 0,
              "marginUnit": "px",
              "mobileMargin": 0,
              "backgroundSizeMode": "100%",
              "autoFillHeight": false,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": false,
              "mobileRowHeight": 70
            }
          }
        }
      }
    },
    "entityAliases": {
      "a7bf5b84-5624-0a8d-0971-2366d1b9a055": {
        "id": "a7bf5b84-5624-0a8d-0971-2366d1b9a055",
        "alias": "Current User Owner",
        "filter": {
          "type": "singleEntity",
          "resolveMultiple": false,
          "singleEntity": {
            "entityType": "CURRENT_USER_OWNER",
            "id": "13814000-1dd2-11b2-8080-808080808080"
          }
        }
      },
      "cc5ee948-2b89-6fc6-61ef-196511d4e9f7": {
        "id": "cc5ee948-2b89-6fc6-61ef-196511d4e9f7",
        "alias": "Selected Entity",
        "filter": {
          "type": "stateEntity",
          "resolveMultiple": false,
          "stateEntityParamName": "",
          "defaultStateEntity": null
        }
      },
      "ad52c102-7808-5a29-c62f-0d793624ee33": {
        "id": "ad52c102-7808-5a29-c62f-0d793624ee33",
        "alias": "Owner User",
        "filter": {
          "type": "relationsQuery",
          "resolveMultiple": false,
          "rootStateEntity": true,
          "stateEntityParamName": null,
          "defaultStateEntity": null,
          "rootEntity": null,
          "direction": "TO",
          "maxLevel": 1,
          "fetchLastLevelOnly": false,
          "filters": [
            {
              "relationType": "Manages",
              "entityTypes": [
                "USER"
              ]
            }
          ]
        }
      }
    },
    "filters": {},
    "timewindow": {
      "displayValue": "",
      "hideInterval": false,
      "hideAggregation": false,
      "hideAggInterval": false,
      "hideTimezone": false,
      "selectedTab": 0,
      "realtime": {
        "realtimeType": 0,
        "interval": 1000,
        "timewindowMs": 60000,
        "quickInterval": "CURRENT_DAY"
      },
      "history": {
        "historyType": 0,
        "interval": 1000,
        "timewindowMs": 60000,
        "fixedTimewindow": {
          "startTimeMs": 1674634830958,
          "endTimeMs": 1674721230958
        },
        "quickInterval": "CURRENT_DAY"
      },
      "aggregation": {
        "type": "AVG",
        "limit": 25000
      }
    },
    "settings": {
      "stateControllerId": "entity",
      "showTitle": false,
      "showDashboardsSelect": false,
      "showEntitiesSelect": false,
      "showDashboardTimewindow": false,
      "showDashboardExport": false,
      "toolbarAlwaysOpen": true,
      "titleColor": "rgba(0,0,0,0.870588)",
      "showDashboardLogo": false,
      "dashboardLogoUrl": null,
      "hideToolbar": true,
      "showFilters": false,
      "showUpdateDashboardImage": false
    }
  },
  "name": "Device Details"
}