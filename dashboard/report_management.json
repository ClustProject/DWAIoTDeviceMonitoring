{
  "title": "Report Management",
  "image": null,
  "mobileHide": false,
  "mobileOrder": null,
  "configuration": {
    "description": "",
    "widgets": {
      "6c66b00d-d9fe-f735-42c2-436bcccb448e": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_selector_widgets",
        "typeAlias": "simple_workspace_selector",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 9,
        "sizeY": 1,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "333e6cd5-5e78-17e4-47b0-4357cc213265",
              "filterId": null,
              "dataKeys": []
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "rgba(255,255,255,0)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 1635
            }
          },
          "title": "thingplus.page.admin.report-list",
          "showTitleIcon": false,
          "dropShadow": false,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default"
          },
          "noDataDisplayMessage": "",
          "showLegend": false,
          "titleTooltip": "",
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "2em",
            "font-weight": 500,
            "letter-spacing": "-0.05em",
            "color": "var(--tb-service-font-5)"
          }
        },
        "row": 0,
        "col": 0,
        "id": "6c66b00d-d9fe-f735-42c2-436bcccb448e"
      },
      "96286376-cdc1-8d26-e67b-cf1cf96cb5fa": {
        "isSystemType": false,
        "bundleAlias": "moldmecca_maintain_widgets",
        "typeAlias": "maintain_report",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 7.5,
        "sizeY": 3,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "333e6cd5-5e78-17e4-47b0-4357cc213265",
              "filterId": null,
              "dataKeys": []
            },
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "da5c2592-df41-fa71-cac1-1312f936885b",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "reportDashboard",
                  "type": "attribute",
                  "label": "thingplus.page.report.report",
                  "color": "#3f51b5",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "let dashboards = {\n    'Report': ctx.custom.t('thingplus.page.report.entire') + ' : ' + ctx.custom.t('thingplus.page.report.entire-report'),\n    'Total Work Report': ctx.custom.t('thingplus.page.report.entire') + ' : ' + ctx.custom.t('thingplus.page.report.total-work-report'),\n    'Cost Report': ctx.custom.t('thingplus.page.report.entire') + ' : ' + ctx.custom.t('thingplus.page.report.cost-report'),\n    'Work Report': ctx.custom.t('thingplus.page.report.single') + ' : ' + ctx.custom.t('thingplus.page.report.work-report'),\n    'Dalay Report': ctx.custom.t('thingplus.page.report.single') + ' : ' + ctx.custom.t('thingplus.page.report.delay-report')\n}\nreturn dashboards[value];"
                  },
                  "_hash": 0.7563193601712606,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "name",
                  "type": "attribute",
                  "label": "thingplus.page.report.report-name",
                  "color": "#8bc34a",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "useCellActionFunction": false
                  },
                  "_hash": 0.16115442622847231,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "customerL1",
                  "type": "attribute",
                  "label": "thingplus.label.customerL1",
                  "color": "#2196f3",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if(value == ''){\n    return ctx.custom.t('thingplus.selector.entire-customerL1')\n}\nlet target = ctx.custom.relations[value]\nif(target){\n    return target.name\n}\nreturn value"
                  },
                  "_hash": 0.9374034059413403,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "customerL2",
                  "type": "attribute",
                  "label": "thingplus.label.customerL2",
                  "color": "#4caf50",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if(value == ''){\n    return ctx.custom.t('thingplus.selector.entire-customerL2')\n}\nlet target = ctx.custom.relations[value]\nif(target){\n    return target.name\n}\nreturn value"
                  },
                  "_hash": 0.07561631532785418,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "device",
                  "type": "attribute",
                  "label": "thingplus.selector.selected-device",
                  "color": "#ffeb3b",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if(row.reportCategory != 'single'){\n    return ctx.custom.t('thingplus.selector.entire-device');\n}\nlet devices = value.split(',')\nif(devices.length == 0){\n    return '-';\n}\nif(devices.length == 1){\n    return ctx.custom.relations[devices[0]].label;\n}\nreturn ctx.custom.relations[devices[0]].label + ' ' + ctx.custom.t('thingplus.label.and-other', {count: devices.length - 1})"
                  },
                  "_hash": 0.5872587011201655,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "reportType",
                  "type": "attribute",
                  "label": "thingplus.label.report-repeat",
                  "color": "#f44336",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if(value == 'DAILY'){\n    return ctx.custom.t('thingplus.time-format.day-by-day');\n}else if(value == 'WEEKLY'){\n    return ctx.custom.t('thingplus.time-format.week-by-week');\n}else if(value == 'MONTHLY'){\n    return ctx.custom.t('thingplus.time-format.month-by-month');\n}\nreturn ctx.custom.t('thingplus.label.custom-input');"
                  },
                  "_hash": 0.6751728096249714,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "reportTime",
                  "type": "attribute",
                  "label": "thingplus.label.report-time",
                  "color": "#ffc107",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "if (value) {\n  return ctx.custom.toTime(value);\n}\nreturn '-';\n"
                  },
                  "_hash": 0.4120665324901962,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "reportContent",
                  "type": "attribute",
                  "label": "thingplus.label.report-date",
                  "color": "#607d8b",
                  "settings": {
                    "hidden": false,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": true,
                    "useCellActionFunction": false,
                    "cellContentFunction": "let days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\nif (row.reportType == 'DAILY') {\n  let target = value.split(',');\n  for (let i in target) {\n    if (target[i]) {\n      target[i] = ctx.custom.t('thingplus.time-format.weekday-short.' + days[target[i]]);\n    }\n  }\n  return target.join(', ');\n}\nif (row.reportType == 'WEEKLY') {\n  return ctx.custom.t('thingplus.time-format.weekday-long.' + days[value]);\n}\nif (row.reportType == 'MONTHLY') {\n  return ctx.custom.t('thingplus.time-format.day-value', { day: value });\n}\nif (row.reportType == 'CUSTOM') {\n  return ctx.custom.t('thingplus.time-format.day-interval', { day: value });\n}\nreturn value;\n"
                  },
                  "_hash": 0.8714126472797674,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "receiver",
                  "type": "attribute",
                  "label": "receiver",
                  "color": "#9c27b0",
                  "settings": {
                    "hidden": true,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "useCellActionFunction": false
                  },
                  "_hash": 0.6749953503610431,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                },
                {
                  "name": "reportCategory",
                  "type": "attribute",
                  "label": "reportCategory",
                  "color": "#ffeb3b",
                  "settings": {
                    "hidden": true,
                    "useCellStyleFunction": false,
                    "useCellContentFunction": false,
                    "useCellActionFunction": false
                  },
                  "_hash": 0.9867441658595768,
                  "units": null,
                  "decimals": null,
                  "funcBody": null,
                  "usePostProcessing": null,
                  "postFuncBody": null
                }
              ]
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "widget": {
              "originWidth": 1635
            }
          },
          "title": "thingplus.page.admin.report",
          "showTitleIcon": false,
          "dropShadow": true,
          "enableFullscreen": false,
          "widgetStyle": {
            "cursor": "default"
          },
          "noDataDisplayMessage": "",
          "showLegend": false,
          "titleTooltip": "",
          "titleStyle": {
            "font-family": "var(--tb-config-font-family)",
            "font-size": "1.6em",
            "font-weight": 500,
            "letter-spacing": "-0.04em",
            "color": "var(--tb-service-font-5)"
          },
          "actions": {
            "widgetHeaderButton": [
              {
                "name": "thingplus.action.new",
                "icon": "add",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"add-report-form\">\n  <form\n    #addEntityForm=\"ngForm\"\n    [formGroup]=\"addEntityFormGroup\"\n    (ngSubmit)=\"save()\"\n    style=\"font-size: {{calcFontSize()}}px;\"\n  >\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\" translate>thingplus.dialog.create-report-title</span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 0.4em\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div class=\"step-controller\" fxLayoutAlign=\"space-between center\">\n      <div\n        class=\"step\"\n        [ngClass]=\"{'prev': currentStep > 0, 'current': currentStep == 0, 'next': currentStep < 0}\"\n        (click)=\"selectStep($event, 0)\"\n        fxLayoutAlign=\"center center\"\n        [attr.data-label]=\"t('thingplus.label.step-set-page')\"\n      >\n        <i class=\"material-icons\">check</i>\n      </div>\n      <div class=\"step-progress-line\" [ngClass]=\"{'prev': currentStep > 0, 'next': currentStep < 0}\"></div>\n      <div\n        class=\"step\"\n        [ngClass]=\"{'prev': currentStep > 1, 'current': currentStep == 1, 'next': currentStep < 1}\"\n        (click)=\"selectStep($event, 1)\"\n        fxLayoutAlign=\"center center\"\n        [attr.data-label]=\"t('thingplus.label.step-set-send')\"\n      >\n        <i class=\"material-icons\">check</i>\n      </div>\n      <div class=\"step-progress-line\" [ngClass]=\"{'prev': currentStep > 1, 'next': currentStep < 1}\"></div>\n      <div\n        class=\"step\"\n        [ngClass]=\"{'prev': currentStep > 2, 'current': currentStep == 2, 'next': currentStep < 2}\"\n        (click)=\"selectStep($event, 2)\"\n        fxLayoutAlign=\"center center\"\n        [attr.data-label]=\"t('thingplus.label.step-set-receive')\"\n      >\n        <i class=\"material-icons\">check</i>\n      </div>\n    </div>\n    <div mat-dialog-content fxFlex fxLayout=\"column\" fxLayoutGap=\"2em\">\n      <div class=\"step-content step-content-0\" *ngIf=\"currentStep == 0\" fxLayout=\"column\" fxLayoutGap=\"2em\">\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex=\"100\"\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{error: addEntityFormGroup.get('title').hasError('required')}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.page.report.report-name</label>\n            </div>\n            <div fxFlex=\"100\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\">\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"0.6em\">\n                <input matInput formControlName=\"title\" required />\n              </div>\n            </div>\n            <div class=\"error-box\" *ngIf=\"addEntityFormGroup.get('title').hasError('required')\" translate>\n              thingplus.help.error-required-report-name\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.page.report.report-category</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select formControlName=\"reportCategory\" (selectionChange)=\"setReportCategory($event)\">\n                <mat-option *ngFor=\"let reportCategory of reportCategoryList\" [value]=\"reportCategory.value\">\n                  {{reportCategory.name}}\n                </mat-option>\n              </mat-select>\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.page.report.report-dashboard</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select formControlName=\"reportDashboard\">\n                <mat-option *ngFor=\"let reportDashboard of reportDashboardList\" [value]=\"reportDashboard.value\">\n                  {{reportDashboard.name}}\n                </mat-option>\n              </mat-select>\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex=\"100\"\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{'disabled': ownerLevel != 0}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.customerL1</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select\n                formControlName=\"customerL1\"\n                (selectionChange)=\"setCustomerL1($event)\"\n                *ngIf=\"ownerLevel == 0\"\n              >\n                <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n                  {{customerL1.name}}\n                </mat-option>\n              </mat-select>\n              <input matInput formControlName=\"customerL1Name\" *ngIf=\"ownerLevel != 0\" readonly />\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex=\"100\"\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{'disabled': ownerLevel > 1}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.customerL2</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select\n                formControlName=\"customerL2\"\n                (selectionChange)=\"setCustomerL2($event)\"\n                *ngIf=\"ownerLevel <= 1\"\n              >\n                <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n                  {{customerL2.name}}\n                </mat-option>\n              </mat-select>\n              <input matInput formControlName=\"customerL2Name\" *ngIf=\"ownerLevel > 1\" readonly />\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\" *ngIf=\"isSingleReport\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.device</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select\n                formControlName=\"device\"\n                multiple\n                (selectionChange)=\"setDevice($event)\"\n                placeholder=\"{{'thingplus.selector.select-device' | translate}}\"\n              >\n                <mat-select-trigger>\n                  <span *ngIf=\"addEntityFormGroup.get('device').value.length > 0\">\n                    {{'thingplus.selector.selected-count' | translate:{count:\n                    addEntityFormGroup.get('device').value.length} }}\n                  </span>\n                </mat-select-trigger>\n                <mat-option *ngFor=\"let device of deviceList\" [value]=\"device.value\"> {{device.name}} </mat-option>\n              </mat-select>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"step-content step-content-1\" *ngIf=\"currentStep == 1\" fxLayout=\"column\" fxLayoutGap=\"2em\">\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.report-repeat</label>\n            </div>\n            <div\n              class=\"value-box no-border\"\n              fxFlex\n              fxLayout=\"row\"\n              fxLayoutAlign=\"space-evenly center\"\n              fxLayoutGap=\"0.5em\"\n            >\n              <button\n                class=\"radio-btn\"\n                type=\"button\"\n                fxFlex=\"25\"\n                [ngClass]=\"{'active': addEntityFormGroup.get('reportType').value == 'DAILY'}\"\n                (click)=\"setReportType($event, 'DAILY')\"\n                translate\n              >\n                thingplus.time-format.day-by-day\n              </button>\n              <button\n                class=\"radio-btn\"\n                type=\"button\"\n                fxFlex=\"25\"\n                [ngClass]=\"{'active': addEntityFormGroup.get('reportType').value == 'WEEKLY'}\"\n                (click)=\"setReportType($event, 'WEEKLY')\"\n                translate\n              >\n                thingplus.time-format.week-by-week\n              </button>\n              <button\n                class=\"radio-btn\"\n                type=\"button\"\n                fxFlex=\"25\"\n                [ngClass]=\"{'active': addEntityFormGroup.get('reportType').value == 'MONTHLY'}\"\n                (click)=\"setReportType($event, 'MONTHLY')\"\n                translate\n              >\n                thingplus.time-format.month-by-month\n              </button>\n              <button\n                class=\"radio-btn\"\n                type=\"button\"\n                fxFlex=\"25\"\n                [ngClass]=\"{'active': addEntityFormGroup.get('reportType').value == 'CUSTOM'}\"\n                (click)=\"setReportType($event, 'CUSTOM')\"\n                translate\n              >\n                thingplus.label.custom-input\n              </button>\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.report-time</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-datetimepicker #reportTimePicker type=\"time\" openOnFocus=\"true\"></mat-datetimepicker>\n              <input class=\"row-input\" matInput formControlName=\"reportTime\" [matDatetimepicker]=\"reportTimePicker\" />\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.report-date</label>\n            </div>\n            <div\n              class=\"group-box\"\n              fxFlex=\"100\"\n              fxLayout=\"column\"\n              fxLayoutAlign=\"start stretch\"\n              fxLayoutGap=\"1em\"\n              *ngIf=\"addEntityFormGroup.get('reportType').value == 'DAILY'\"\n            >\n              <div fxFlex=\"100\" fxLayoutAlign=\"space-between center\" formGroupName=\"dailyContent\">\n                <mat-checkbox formControlName=\"0\">\n                  {{'thingplus.time-format.weekday-short.mon' | translate}}\n                </mat-checkbox>\n                <mat-checkbox formControlName=\"1\">\n                  {{'thingplus.time-format.weekday-short.tue' | translate}}\n                </mat-checkbox>\n                <mat-checkbox formControlName=\"2\">\n                  {{'thingplus.time-format.weekday-short.wed' | translate}}\n                </mat-checkbox>\n                <mat-checkbox formControlName=\"3\">\n                  {{'thingplus.time-format.weekday-short.thu' | translate}}\n                </mat-checkbox>\n                <mat-checkbox formControlName=\"4\">\n                  {{'thingplus.time-format.weekday-short.fri' | translate}}\n                </mat-checkbox>\n                <mat-checkbox formControlName=\"5\">\n                  {{'thingplus.time-format.weekday-short.sat' | translate}}\n                </mat-checkbox>\n                <mat-checkbox formControlName=\"6\">\n                  {{'thingplus.time-format.weekday-short.sun' | translate}}\n                </mat-checkbox>\n              </div>\n            </div>\n            <div\n              class=\"value-box\"\n              fxFlex\n              fxLayout=\"row\"\n              fxLayoutAlign=\"start center\"\n              fxLayoutGap=\"0.6em\"\n              *ngIf=\"addEntityFormGroup.get('reportType').value == 'WEEKLY'\"\n            >\n              <mat-select formControlName=\"weeklyContent\">\n                <mat-option *ngFor=\"let day of dayList\" [value]=\"day.value\"> {{day.name}} </mat-option>\n              </mat-select>\n            </div>\n            <div\n              class=\"value-box\"\n              fxFlex\n              fxLayout=\"row\"\n              fxLayoutAlign=\"start center\"\n              fxLayoutGap=\"0.6em\"\n              *ngIf=\"addEntityFormGroup.get('reportType').value == 'MONTHLY'\"\n            >\n              <mat-select formControlName=\"monthlyContent\">\n                <mat-option *ngFor=\"let date of dateList\" [value]=\"date.value\"> {{date.name}} </mat-option>\n              </mat-select>\n            </div>\n            <div\n              class=\"value-box\"\n              fxFlex\n              fxLayout=\"row\"\n              fxLayoutAlign=\"start center\"\n              fxLayoutGap=\"0.6em\"\n              *ngIf=\"addEntityFormGroup.get('reportType').value == 'CUSTOM'\"\n            >\n              <input matInput type=\"number\" step=\"1\" formControlName=\"customContent\" />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"step-content step-content-2\" *ngIf=\"currentStep == 2\" fxLayout=\"column\" fxLayoutGap=\"2em\">\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start end\">\n          <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.add-user</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select\n                formControlName=\"user\"\n                multiple\n                (selectionChange)=\"setUser($event)\"\n                placeholder=\"{{'thingplus.selector.select-user' | translate}}\"\n              >\n                <mat-select-trigger>\n                  <span *ngIf=\"addEntityFormGroup.get('user').value.length > 0\">\n                    {{'thingplus.selector.selected-count' | translate:{count:\n                    addEntityFormGroup.get('user').value.length} }}\n                  </span>\n                </mat-select-trigger>\n                <mat-option *ngFor=\"let user of userList\" [value]=\"user.value\">\n                  {{user.name}}{{user.email ? \" : \" + user.email : \"\"}}\n                </mat-option>\n              </mat-select>\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex=\"100\"\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{error: addEntityFormGroup.get('newEmail').hasError('email')}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.email</label>\n            </div>\n            <div fxFlex=\"100\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\">\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"0.6em\">\n                <input matInput type=\"email\" email fxFlex formControlName=\"newEmail\" />\n                <button class=\"email-add-button\" type=\"button\" (click)=\"addEmail($event)\" translate>\n                  thingplus.action.add\n                </button>\n              </div>\n            </div>\n            <div class=\"error-box\" *ngIf=\"addEntityFormGroup.get('newEmail').hasError('email')\" translate>\n              thingplus.help.error-invalid-email\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div class=\"grid-box\" fxLayout=\"row wrap\" fxLayoutAlign=\"start\">\n            <div\n              class=\"chip email-chip\"\n              *ngFor=\"let email of emailList\"\n              fxLayoutAlign=\"space-between center\"\n              fxLayoutGap=\"1em\"\n            >\n              <label class=\"chip-label\" fxFlex>{{email}}</label>\n              <button class=\"email-delete-button material-icons\" type=\"button\" (click)=\"deleteEmail($event, email)\">\n                close\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button prev-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"prevStep()\"\n        *ngIf=\"currentStep > 0\"\n        translate\n      >\n        thingplus.action.prev-step\n      </button>\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        *ngIf=\"currentStep == 0\"\n        translate\n      >\n        thingplus.action.close\n      </button>\n      <button\n        class=\"button next-button\"\n        type=\"button\"\n        (click)=\"nextStep()\"\n        [disabled]=\"(isLoading$ | async)\"\n        *ngIf=\"currentStep < 2\"\n        translate\n      >\n        thingplus.action.next-step\n      </button>\n      <button\n        class=\"button save-button\"\n        type=\"submit\"\n        [disabled]=\"(isLoading$ | async) || addEntityForm.invalid\"\n        *ngIf=\"currentStep == 2\"\n        translate\n      >\n        thingplus.action.save\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#add-report-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  min-height: 70vh;\n}\n#add-report-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#add-report-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#add-report-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-report-form .dialog-close i {\n  font-size: 1.4em;\n}\n#add-report-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#add-report-form .step-controller {\n  padding: 4em;\n}\n#add-report-form .step {\n  position: relative;\n  display: inline-block;\n  padding: 0.3em;\n  background-color: var(--tb-service-border-1);\n  border: 1px solid var(--tb-service-border-1);\n  color: var(--tb-service-border-1);\n  transition-property: color, border-color, background-color;\n  transition-duration: var(--tb-config-color-duration);\n  border-radius: 50%;\n  cursor: pointer;\n}\n#add-report-form .step i {\n  font-size: 1.4em;\n}\n#add-report-form .step.prev {\n  background-color: var(--tb-service-accent);\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-font-0);\n}\n#add-report-form .step.current {\n  background-color: var(--tb-service-font-0);\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-font-0);\n}\n#add-report-form .step:after {\n  content: attr(data-label);\n  position: absolute;\n  top: 125%;\n  left: 50%;\n  transform: translateX(-50%);\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n  font-size: 1.2em;\n}\n#add-report-form .step.current:after {\n  color: var(--tb-service-font-5);\n}\n#add-report-form .step-progress-line {\n  width: 100%;\n  height: 2px;\n  background-color: var(--tb-service-border-1);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-report-form .step-progress-line.prev {\n  background-color: var(--tb-service-accent);\n}\n\n#add-report-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#add-report-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#add-report-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#add-report-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#add-report-form .label-box {\n  color: var(--tb-service-font-3);\n  font-size: 1.2em;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-report-form .input-box.disabled .label-box {\n  color: var(--tb-service-font-1);\n}\n#add-report-form .value-box {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-report-form .value-box.no-border {\n  border: none !important;\n}\n\n#add-report-form .input-box:not(.disabled) .value-box:hover {\n  border-color: var(--tb-service-border-3);\n}\n#add-report-form .input-box:not(.disabled) .value-box:focus-within {\n  border-color: var(--tb-service-accent);\n  caret-color: var(--tb-service-accent);\n}\n#add-report-form .value-box *::placeholder {\n  color: var(--tb-service-font-4);\n}\n#add-report-form .value-box input {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  caret-color: var(--tb-service-accent);\n}\n#add-report-form .input-box.disabled .value-box {\n  background-color: var(--tb-service-background-1);\n}\n#add-report-form .input-box.disabled .value-box input {\n  color: var(--tb-service-font-2);\n  cursor: default;\n}\n#add-report-form .radio-btn {\n  all: unset;\n  color: var(--tb-service-font-5);\n  border: 1px solid var(--tb-service-border-0);\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  text-align: center;\n  cursor: pointer;\n}\n#add-report-form .input-box:not(.disabled) .radio-btn:not(.active):hover {\n  border-color: var(--tb-service-border-3);\n}\n#add-report-form .input-box:not(.disabled) .radio-btn.active {\n  color: var(--tb-service-accent);\n  border-color: var(--tb-service-accent);\n}\n#add-report-form .input-box.disabled .radio-btn:not(.active) {\n  color: var(--tb-service-font-1);\n  cursor: default;\n}\n#add-report-form .input-box.disabled .radio-btn.active {\n  border-color: var(--tb-service-border-3);\n  cursor: default;\n}\n\n#add-report-form .grid-box {\n  gap: 1em;\n  max-width: 100%;\n}\n#add-report-form .chip {\n  border: 1px solid var(--tb-service-border-0);\n  color: var(--tb-service-font-5);\n  padding: 1em;\n  overflow: hidden;\n}\n#add-report-form .chip-label {\n  font-size: 1.4em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n#add-report-form .email-add-button {\n  border: none;\n  padding: 0.4em 1em;\n  margin-right: calc(16em / 14);\n  font-size: 1.4em;\n  color: var(--tb-service-accent);\n  border: 1px solid var(--tb-service-accent);\n  background-color: var(--tb-service-background-0);\n  cursor: pointer;\n  transition-property: color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-report-form .input-box.error .email-add-button {\n  cursor: default;\n  color: var(--tb-service-disabled);\n  border-color: var(--tb-service-disabled);\n}\n#add-report-form .input-box:not(.error) .email-add-button:hover {\n  color: var(--tb-service-accent-hover);\n  border-color: var(--tb-service-accent-hover);\n}\n#add-report-form .input-box:not(.error) .email-add-button:active {\n  color: var(--tb-service-accent-pressed);\n  border-color: var(--tb-service-accent-pressed);\n}\n#add-report-form .email-delete-button {\n  border: none;\n  padding: 0.1em;\n  font-size: 1.4em;\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-font-1);\n  border-radius: 50%;\n  cursor: pointer;\n  transition-property: color, background-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-report-form .email-delete-button:hover {\n  background-color: var(--tb-service-font-2);\n}\n#add-report-form .email-delete-button:active {\n  background-color: var(--tb-service-font-3);\n}\n\n#add-report-form .value-box .mat-select-trigger {\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  line-height: 1;\n}\n#add-report-form .value-box .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n#add-report-form .value-box .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n#add-report-form .group-box {\n  border: 1px solid var(--tb-service-border-0);\n  padding: 1.6em;\n}\n#add-report-form .mat-checkbox.mat-checkbox-checked .mat-checkbox-background {\n  background-color: var(--tb-service-accent);\n}\n#add-report-form .mat-checkbox-checkmark-path {\n  stroke: var(--tb-service-font-0) !important;\n}\n#add-report-form .mat-checkbox .mat-checkbox-inner-container {\n  width: 1.8em;\n  height: 1.8em;\n}\n#add-report-form .mat-checkbox .mat-checkbox-label {\n  color: var(--tb-service-font-3);\n  font-size: 1.4em;\n}\n#add-report-form .mat-checkbox .mat-checkbox-frame {\n  border-color: var(--tb-service-border-0);\n}\n#add-report-form .mat-checkbox.mat-checkbox-checked .mat-checkbox-frame {\n  border-color: var(--tb-service-accent);\n}\n#add-report-form .error-box {\n  color: var(--tb-service-warn);\n  font-size: 1.2em;\n  margin-top: calc(0.6em / 1.2);\n}\n#add-report-form .input-box.error .label-box {\n  color: var(--tb-service-warn);\n}\n#add-report-form .input-box.error .value-box {\n  border: 1px solid var(--tb-service-warn);\n}\n#add-report-form .input-box.error .error-box {\n  display: block;\n  margin-top: calc(0.6em / 1.2);\n}\n\n#add-report-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#add-report-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#add-report-form .save-button,\n#add-report-form .next-button {\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-accent);\n}\n#add-report-form .save-button:hover,\n#add-report-form .next-button:hover {\n  background-color: var(--tb-service-accent-hover);\n}\n#add-report-form .save-button:active,\n#add-report-form .next-button:active {\n  background-color: var(--tb-service-accent-pressed);\n}\n#add-report-form .close-button,\n#add-report-form .prev-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#add-report-form .close-button:hover,\n#add-report-form .prev-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#add-report-form .close-button:active,\n#add-report-form .prev-button:active {\n  background-color: var(--tb-service-border-0);\n}\n\n@media (min-width: 960px) {\n  #add-report-form form {\n    width: 24vw;\n  }\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nconst t = widgetContext.custom.t;\n\nopenAddEntityDialog();\n\nfunction openAddEntityDialog() {\n  customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\n}\n\nfunction AddEntityDialogController(instance) {\n  let vm = instance;\n  vm.ownerId = widgetContext.defaultSubscription.configuredDatasources[0].entity.id;\n  vm.ownerLevel = widgetContext.$scope.ownerLevel;\n  vm.t = t;\n  vm.currentStep = 0;\n  vm.newEmail = '';\n  vm.emailList = [];\n  vm.isSingleReport = false;\n  vm.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  vm.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n  vm.deviceList = [{ name: t('thingplus.selector.select-all'), value: 'ENTIRE' }];\n  vm.userList = [{ name: t('thingplus.selector.select-all'), value: 'ENTIRE', email: '' }];\n  if (vm.ownerLevel == 0) {\n    vm.customerL1List = vm.customerL1List.concat(\n      widgetContext.custom.customerL1List\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  }\n  if (vm.ownerLevel <= 1) {\n    vm.customerL2List = vm.customerL2List.concat(\n      widgetContext.custom.customerL2List\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  }\n  vm.deviceList = vm.deviceList.concat(\n    widgetContext.custom.deviceList\n      .map(x => {\n        return {\n          name: x.label,\n          value: x.id.id,\n        };\n      })\n      .sort((a, b) => {\n        if (a.name > b.name) return 1;\n        if (a.name < b.name) return -1;\n        return 0;\n      })\n  );\n  vm.userList = vm.userList.concat(\n    widgetContext.custom.userList\n      .map(x => {\n        return {\n          name: x.details.firstName,\n          value: x.id.id,\n          email: x.details.email,\n        };\n      })\n      .sort((a, b) => {\n        if (a.name > b.name) return 1;\n        if (a.name < b.name) return -1;\n        return 0;\n      })\n  );\n  vm.originDevices = [];\n  vm.originUsers = [];\n  vm.reportCategoryList = [\n    { name: t('thingplus.page.report.report-entire'), value: 'entire' },\n    { name: t('thingplus.page.report.report-single'), value: 'single' },\n  ];\n  vm.reportDashboardList = [\n    { name: t('thingplus.page.report.entire-report'), value: 'Report' },\n    { name: t('thingplus.page.report.total-work-report'), value: 'Total Work Report' },\n    { name: t('thingplus.page.report.cost-report'), value: 'Cost Report' },\n  ];\n  vm.dayList = [\n    { name: t('thingplus.time-format.weekday-long.mon'), value: 0 },\n    { name: t('thingplus.time-format.weekday-long.tue'), value: 1 },\n    { name: t('thingplus.time-format.weekday-long.wed'), value: 2 },\n    { name: t('thingplus.time-format.weekday-long.thu'), value: 3 },\n    { name: t('thingplus.time-format.weekday-long.fri'), value: 4 },\n    { name: t('thingplus.time-format.weekday-long.sat'), value: 5 },\n    { name: t('thingplus.time-format.weekday-long.sun'), value: 6 },\n  ];\n  vm.dateList = [];\n  for (let i = 1; i <= 31; i++) {\n    vm.dateList.push({ name: t('thingplus.time-format.day-value', { day: i }), value: i });\n  }\n  let defaultCustomerL1Name = widgetContext.custom.relations[entityId.id].parent\n    ? widgetContext.custom.relations[entityId.id].parent.name\n    : entityName;\n  vm.addEntityFormGroup = vm.fb.group({\n    title: ['', [vm.validators.required]],\n    reportCategory: ['entire'],\n    reportDashboard: ['Report'],\n    customerL1Name: [defaultCustomerL1Name],\n    customerL2Name: [entityName],\n    device: [vm.originDevices],\n    reportType: ['DAILY'],\n    reportTime: [moment().toDate()],\n    dailyContent: vm.fb.group({\n      0: [true],\n      1: [true],\n      2: [true],\n      3: [true],\n      4: [true],\n      5: [true],\n      6: [true],\n    }),\n    weeklyContent: [0],\n    monthlyContent: [1],\n    customContent: [2],\n    user: [vm.originUsers],\n    newEmail: [''],\n  });\n  if (vm.ownerLevel == 0) {\n    vm.addEntityFormGroup.controls.customerL1 = vm.fb.control('');\n  }\n  if (vm.ownerLevel <= 1) {\n    vm.addEntityFormGroup.controls.customerL2 = vm.fb.control('');\n  }\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  vm.save = function () {\n    vm.addEntityFormGroup.markAsPristine();\n    let users = vm.addEntityFormGroup.get('user').value;\n    if (vm.emailList.length == 0 && users.length == 0) {\n      window.alert(t('thingplus.help.error-required-receiver'));\n      return;\n    }\n    saveAsset().subscribe(asset => {\n      widgetContext.rxjs\n        .forkJoin([changeName(asset), assignAsset(asset), saveRelation(asset), saveAttribute(asset)])\n        .subscribe(() => {\n          widgetContext.updateAliases();\n          vm.dialogRef.close(null);\n        });\n    });\n  };\n  vm.selectStep = function (e, index) {\n    vm.currentStep = index;\n  };\n  vm.prevStep = function () {\n    vm.currentStep--;\n  };\n  vm.nextStep = function () {\n    vm.currentStep++;\n  };\n  vm.setCustomerL1 = function (e) {\n    let customerL1 = vm.addEntityFormGroup.get('customerL1').value;\n    vm.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n    vm.deviceList = [{ name: t('thingplus.selector.select-all'), value: 'ENTIRE' }];\n    vm.addEntityFormGroup.patchValue(\n      {\n        customerL2: '',\n        device: [],\n      },\n      { emitEvent: false }\n    );\n    vm.customerL2List = vm.customerL2List.concat(\n      widgetContext.custom.customerL2List\n        .filter(x => {\n          return customerL1 == '' || x.parent.id.id == customerL1;\n        })\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n    vm.deviceList = vm.deviceList.concat(\n      widgetContext.custom.deviceList\n        .filter(x => {\n          return customerL1 == '' || x.parent.parent.id.id == customerL1;\n        })\n        .map(x => {\n          return {\n            name: x.label,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  };\n  vm.setCustomerL2 = function (e) {\n    let customerL1 = vm.addEntityFormGroup.get('customerL1').value;\n    let customerL2 = vm.addEntityFormGroup.get('customerL2').value;\n    vm.deviceList = [{ name: t('thingplus.selector.select-all'), value: 'ENTIRE' }];\n    vm.addEntityFormGroup.patchValue(\n      {\n        device: [],\n      },\n      { emitEvent: false }\n    );\n    vm.deviceList = vm.deviceList.concat(\n      widgetContext.custom.deviceList\n        .filter(x => {\n          return (\n            (customerL2 == '' && (customerL1 == '' || x.parent.parent.id.id == customerL1)) ||\n            x.parent.id.id == customerL2\n          );\n        })\n        .map(x => {\n          return {\n            name: x.label,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  };\n  vm.setDevice = function (e) {\n    // 기존에 Entire이 선택되어 있던 경우\n    let newValue = _.cloneDeep(e.value);\n    if (vm.originDevices.includes('ENTIRE')) {\n      // Entire가 빠진 경우 모두 선택 해제\n      if (!e.value.includes('ENTIRE')) {\n        newValue = [];\n        // Entire가 아닌 요소가 빠진 경우 Entire 삭제\n      } else if (e.value.length < vm.originDevices.length) {\n        newValue = e.value.filter(x => x != 'ENTIRE');\n      }\n      // 기존에 Entire이 선택되어 있지 않은 경우\n    } else {\n      // Entire가 선택된 경우 모두 선택\n      if (e.value.includes('ENTIRE')) {\n        newValue = vm.deviceList.map(x => x.value);\n      }\n    }\n    vm.addEntityFormGroup.patchValue(\n      {\n        device: newValue,\n      },\n      { emitEvent: false }\n    );\n    vm.originDevices = newValue;\n  };\n  vm.setUser = function (e) {\n    // 기존에 Entire이 선택되어 있던 경우\n    let newValue = _.cloneDeep(e.value);\n    if (vm.originUsers.includes('ENTIRE')) {\n      // Entire가 빠진 경우 모두 선택 해제\n      if (!e.value.includes('ENTIRE')) {\n        newValue = [];\n        // Entire가 아닌 요소가 빠진 경우 Entire 삭제\n      } else if (e.value.length < vm.originUsers.length) {\n        newValue = e.value.filter(x => x != 'ENTIRE');\n      }\n      // 기존에 Entire이 선택되어 있지 않은 경우\n    } else {\n      // Entire가 선택된 경우 모두 선택\n      if (e.value.includes('ENTIRE')) {\n        newValue = vm.userList.map(x => x.value);\n      }\n    }\n    vm.addEntityFormGroup.patchValue(\n      {\n        user: newValue,\n      },\n      { emitEvent: false }\n    );\n    vm.originUsers = newValue;\n  };\n  vm.setReportCategory = function (e) {\n    if (e.value == 'single') {\n      vm.isSingleReport = true;\n      vm.reportDashboardList = [\n        { name: t('thingplus.page.report.work-report'), value: 'Work Report' },\n        { name: t('thingplus.page.report.delay-report'), value: 'Delay Report' },\n      ];\n      vm.addEntityFormGroup.patchValue(\n        {\n          reportDashboard: 'Work Report',\n        },\n        { emitEvent: false }\n      );\n    } else if (e.value == 'entire') {\n      vm.isSingleReport = false;\n      vm.reportDashboardList = [\n        { name: t('thingplus.page.report.entire-report'), value: 'Report' },\n        { name: t('thingplus.page.report.total-work-report'), value: 'Total Work Report' },\n        { name: t('thingplus.page.report.cost-report'), value: 'Cost Report' },\n      ];\n      vm.addEntityFormGroup.patchValue(\n        {\n          reportDashboard: 'Report',\n        },\n        { emitEvent: false }\n      );\n    }\n  };\n  vm.setReportType = function (e, type) {\n    vm.addEntityFormGroup.patchValue(\n      {\n        reportType: type,\n      },\n      { emitEvent: false }\n    );\n  };\n  vm.addEmail = function (e) {\n    let newEmail = vm.addEntityFormGroup.get('newEmail');\n    if (newEmail.hasError('email')) return;\n    if (newEmail.value != '') {\n      vm.emailList.push(newEmail.value);\n      vm.addEntityFormGroup.patchValue(\n        {\n          newEmail: '',\n        },\n        { emitEvent: false }\n      );\n    }\n  };\n  vm.deleteEmail = function (e, email) {\n    let targetIndex = vm.emailList.indexOf(email);\n    vm.emailList.splice(targetIndex, 1);\n  };\n\n  function saveAsset() {\n    let name = moment().valueOf() + '-' + Math.floor(1000000000000 * Math.random());\n    let body = {\n      name: name,\n      label: vm.addEntityFormGroup.get('title').value,\n      type: 'report',\n    };\n    return assetService.saveAsset(body);\n  }\n  function changeName(asset) {\n    asset.name = asset.id.id;\n    return assetService.saveAsset(asset);\n  }\n\n  function assignAsset(asset) {\n    if (vm.ownerLevel > 0) {\n      return assetService.assignAssetToCustomer(entityId.id, asset.id.id);\n    } else {\n      return widgetContext.rxjs.of([]);\n    }\n  }\n\n  function saveRelation(asset) {\n    let relationBody = {\n      from: entityId,\n      to: asset.id,\n      type: 'Reports',\n    };\n    return entityRelationService.saveRelation(relationBody);\n  }\n\n  function saveAttribute(asset) {\n    let title = vm.addEntityFormGroup.get('title').value;\n    let reportCategory = vm.addEntityFormGroup.get('reportCategory').value;\n    let reportDashboard = vm.addEntityFormGroup.get('reportDashboard').value;\n    let customerL1Id = '',\n      customerL2Id = '';\n    if (vm.ownerLevel == 0) {\n      customerL1Id = vm.addEntityFormGroup.get('customerL1').value;\n      customerL2Id = vm.addEntityFormGroup.get('customerL2').value;\n    } else if (vm.ownerLevel == 1) {\n      customerL1Id = entityId.id;\n      customerL2Id = vm.addEntityFormGroup.get('customerL2').value;\n    } else {\n      customerL2Id = entityId.id;\n      customerL1Id = widgetContext.custom.relations[customerL2Id].parent.id.id;\n    }\n    let reportType = vm.addEntityFormGroup.get('reportType').value;\n    let reportTime = vm.addEntityFormGroup.get('reportTime').value;\n    reportTime = moment(reportTime).hour() * 3600000 + moment(reportTime).minute() * 60000;\n    let reportContent = '';\n    if (reportType == 'DAILY') {\n      reportContent = vm.addEntityFormGroup.get('dailyContent').value;\n      let result = [];\n      for (let i in reportContent) {\n        if (reportContent[i]) {\n          result.push(i);\n        }\n      }\n      reportContent = result.join(',');\n    } else if (reportType == 'WEEKLY') {\n      reportContent = vm.addEntityFormGroup.get('weeklyContent').value;\n    } else if (reportType == 'MONTHLY') {\n      reportContent = vm.addEntityFormGroup.get('monthlyContent').value;\n    } else {\n      reportContent = vm.addEntityFormGroup.get('customContent').value;\n    }\n    let reportPage = [\n      {\n        dashboardId: widgetContext.custom.dashboardList[reportDashboard].id.id,\n        stateId: 'default',\n      },\n    ];\n\n    let users = vm.addEntityFormGroup.get('user').value;\n    users = users.filter(x => x != 'ENTIRE');\n\n    let emailList = vm.userList.filter(x => users.includes(x.value)).map(x => x.email);\n    emailList = emailList.concat(vm.emailList);\n    emailList = _.uniq(emailList);\n\n    let attributeBody = [\n      { key: 'name', value: title },\n      { key: 'reportCategory', value: reportCategory },\n      { key: 'reportDashboard', value: reportDashboard },\n      { key: 'customerL1', value: customerL1Id },\n      { key: 'customerL2', value: customerL2Id },\n      { key: 'reportType', value: reportType },\n      { key: 'reportTime', value: reportTime },\n      { key: 'reportContent', value: reportContent },\n      { key: 'reportPage', value: reportPage },\n      { key: 'reportUpdateTime', value: moment().valueOf() },\n      { key: 'receiver', value: emailList.join(',') },\n    ];\n\n    if (vm.isSingleReport) {\n      let deviceIds = vm.addEntityFormGroup.get('device').value;\n      deviceIds = deviceIds.filter(x => x != 'ENTIRE');\n      attributeBody.push({ key: 'device', value: deviceIds.join(',') });\n    }\n\n    return attributeService.saveEntityAttributes(asset.id, 'SERVER_SCOPE', attributeBody);\n  }\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "e3ea4ec5-b360-8693-863f-ace874c197d5"
              }
            ],
            "actionCellButton": [
              {
                "name": "Detail",
                "icon": "search",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"detail-report-form\">\n  <form\n    #detailEntityForm=\"ngForm\"\n    [formGroup]=\"detailEntityFormGroup\"\n    (ngSubmit)=\"save()\"\n    style=\"font-size: {{calcFontSize()}}px;\"\n  >\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\" translate>thingplus.dialog.detail-report-title</span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 0.4em\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxFlex fxLayout=\"column\" fxLayoutGap=\"calc(16em / 14)\">\n      <label class=\"section-label\">1. {{'thingplus.label.step-basic' | translate}}</label>\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n        <div fxFlex=\"100\" fxLayout=\"column\" class=\"input-box disabled\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <label translate>thingplus.page.report.report-name</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <input matInput formControlName=\"title\" readonly />\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n        <div fxFlex=\"100\" fxLayout=\"column\" class=\"input-box disabled\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <label translate>thingplus.page.report.report-category</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <input matInput formControlName=\"reportCategory\" readonly />\n          </div>\n        </div>\n        <div fxFlex=\"100\" fxLayout=\"column\" class=\"input-box disabled\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <label translate>thingplus.page.report.report-dashboard</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <input matInput formControlName=\"reportDashboard\" readonly />\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n        <div fxFlex=\"100\" fxLayout=\"column\" class=\"input-box disabled\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <label translate>thingplus.label.customerL1</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <input matInput formControlName=\"customerL1Name\" readonly />\n          </div>\n        </div>\n        <div fxFlex=\"100\" fxLayout=\"column\" class=\"input-box disabled\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <label translate>thingplus.label.customerL2</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <input matInput formControlName=\"customerL2Name\" readonly />\n          </div>\n        </div>\n      </div>\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" *ngIf=\"isSingleReport\">\n        <div fxFlex=\"100\" fxLayout=\"column\" class=\"input-box disabled\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <label translate>thingplus.label.device</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <div class=\"grid-box grid-box-pad\" fxLayout=\"row wrap\" fxLayoutAlign=\"start\">\n              <div\n                class=\"chip\"\n                *ngFor=\"let device of deviceList\"\n                fxLayoutAlign=\"space-between center\"\n                fxLayoutGap=\"1em\"\n              >\n                <label class=\"chip-label\" fxFlex>{{device}}</label>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <label class=\"section-label\">2. {{'thingplus.label.step-set-send' | translate}}</label>\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n        <div fxFlex=\"100\" fxLayout=\"column\" class=\"input-box disabled\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <label translate>thingplus.label.report-repeat</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <input matInput formControlName=\"reportType\" readonly />\n          </div>\n        </div>\n        <div fxFlex=\"100\" fxLayout=\"column\" class=\"input-box disabled\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <label translate>thingplus.label.report-time</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <input matInput formControlName=\"reportTime\" readonly />\n          </div>\n        </div>\n        <div fxFlex=\"100\" fxLayout=\"column\" class=\"input-box disabled\">\n          <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <label translate>thingplus.label.report-date</label>\n          </div>\n          <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <input matInput formControlName=\"reportDate\" readonly />\n          </div>\n        </div>\n      </div>\n      <label class=\"section-label\">3. {{'thingplus.label.step-set-receive' | translate}}</label>\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n        <div class=\"grid-box\" fxLayout=\"row wrap\" fxLayoutAlign=\"start\">\n          <div\n            class=\"chip email-chip\"\n            *ngFor=\"let email of emailList\"\n            fxLayoutAlign=\"space-between center\"\n            fxLayoutGap=\"1em\"\n          >\n            <label class=\"chip-label\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"0.3em\">\n              <span class=\"chip-name\" *ngIf=\"email.name\">{{email.name}}</span>\n              <span *ngIf=\"email.name\">:</span>\n              <span>{{email.value}}</span>\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        translate\n      >\n        thingplus.action.close\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#detail-report-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  min-height: 70vh;\n}\n#detail-report-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#detail-report-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#detail-report-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#detail-report-form .dialog-close i {\n  font-size: 1.4em;\n}\n#detail-report-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#detail-report-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#detail-report-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#detail-report-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#detail-report-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#detail-report-form .section-label {\n  font-size: 1.4em;\n  font-weight: 500;\n  color: var(--tb-service-font-5);\n  margin-top: calc(16em / 14);\n}\n#detail-report-form .section-label:first-child {\n  margin-top: 0;\n}\n#detail-report-form .label-box {\n  color: var(--tb-service-font-4);\n  background-color: var(--tb-service-background-1);\n  font-size: 1.2em;\n  padding: calc(9em / 12) calc(16em / 12);\n  border: 1px solid var(--tb-service-border-0);\n  border-bottom: none;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#detail-report-form .value-box {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#detail-report-form .value-box.no-border {\n  border: none !important;\n}\n#detail-report-form .value-box input {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  caret-color: var(--tb-service-accent);\n  cursor: default;\n}\n\n#detail-report-form .radio-btn {\n  all: unset;\n  color: var(--tb-service-font-5);\n  border: 1px solid var(--tb-service-border-0);\n  background-color: var(--tb-service-background-1);\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  text-align: center;\n  cursor: pointer;\n}\n#detail-report-form .input-box:not(.disabled) .radio-btn:not(.active):hover {\n  border-color: var(--tb-service-border-3);\n}\n#detail-report-form .input-box:not(.disabled) .radio-btn.active {\n  color: var(--tb-service-accent);\n  border-color: var(--tb-service-accent);\n}\n#detail-report-form .input-box.disabled .radio-btn:not(.active) {\n  color: var(--tb-service-font-1);\n  cursor: default;\n}\n#detail-report-form .input-box.disabled .radio-btn.active {\n  border-color: var(--tb-service-border-3);\n  background-color: var(--tb-service-background-0);\n  cursor: default;\n}\n\n#detail-report-form .grid-box {\n  gap: 1em;\n  max-width: 100%;\n}\n#detail-report-form .grid-box.grid-box-pad {\n  padding: 1.6em;\n}\n#detail-report-form .chip {\n  border: 1px solid var(--tb-service-border-0);\n  color: var(--tb-service-font-5);\n  padding: 1em;\n  overflow: hidden;\n  max-width: 100%;\n}\n#detail-report-form .chip-label {\n  font-size: 1.4em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n#detail-report-form .chip-name {\n  color: var(--tb-service-accent);\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n\n#detail-report-form .group-box {\n  border: 1px solid var(--tb-service-border-0);\n  padding: 1.6em;\n}\n#detail-report-form .mat-checkbox-background {\n  background-color: var(--tb-service-background-1);\n}\n#detail-report-form .mat-checkbox.mat-checkbox-checked .mat-checkbox-background {\n  background-color: var(--tb-service-font-3);\n}\n#detail-report-form .mat-checkbox-checkmark-path {\n  stroke: var(--tb-service-font-0) !important;\n}\n#detail-report-form .mat-checkbox .mat-checkbox-inner-container {\n  width: 1.8em;\n  height: 1.8em;\n}\n#detail-report-form .mat-checkbox .mat-checkbox-label {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n}\n#detail-report-form .mat-checkbox .mat-checkbox-frame {\n  border-color: var(--tb-service-border-0);\n  z-index: 1;\n}\n#detail-report-form .mat-checkbox.mat-checkbox-checked .mat-checkbox-frame {\n  border-color: var(--tb-service-font-3);\n}\n\n#detail-report-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#detail-report-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#detail-report-form .close-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#detail-report-form .close-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#detail-report-form .close-button:active {\n  background-color: var(--tb-service-border-0);\n}\n\n@media (min-width: 960px) {\n  #detail-report-form form {\n    width: 24vw;\n  }\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nconst t = widgetContext.custom.t;\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n  customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n  let vm = instance;\n  vm.ownerId = widgetContext.defaultSubscription.configuredDatasources[0].entity.id;\n  vm.ownerLevel = widgetContext.$scope.ownerLevel;\n  vm.t = t;\n  vm.isSingleReport = additionalParams.reportCategory == 'single';\n  vm.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  vm.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n  vm.deviceList = [{ name: t('thingplus.selector.select-all'), value: 'ENTIRE' }];\n  vm.userList = [{ name: t('thingplus.selector.select-all'), value: 'ENTIRE', email: '' }];\n  if (vm.ownerLevel == 0) {\n    vm.customerL1List = vm.customerL1List.concat(\n      widgetContext.custom.customerL1List\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  }\n  if (vm.ownerLevel <= 1) {\n    vm.customerL2List = vm.customerL2List.concat(\n      widgetContext.custom.customerL2List\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  }\n  vm.userList = vm.userList.concat(\n    widgetContext.custom.userList\n      .map(x => {\n        return {\n          name: x.details.firstName,\n          value: x.id.id,\n          email: x.details.email,\n        };\n      })\n      .sort((a, b) => {\n        if (a.name > b.name) return 1;\n        if (a.name < b.name) return -1;\n        return 0;\n      })\n  );\n\n  vm.deviceList = [];\n  vm.emailList = [];\n  if (additionalParams.receiver) {\n    let originReceiver = additionalParams.receiver.split(',');\n    vm.emailList = vm.userList\n      .filter(x => originReceiver.includes(x.email))\n      .map(x => {\n        return { name: x.name, value: x.email };\n      });\n    vm.emailList = vm.emailList.concat(\n      originReceiver\n        .filter(x => !vm.userList.map(y => y.email).includes(x))\n        .map(x => {\n          return { value: x };\n        })\n    );\n  }\n  if (additionalParams.device) {\n    vm.deviceList = additionalParams.device.split(',').map(x => widgetContext.custom.relations[x].label);\n  }\n  const REPORT_CATEGORY = {\n    entire: t('thingplus.page.report.report-entire'),\n    single: t('thingplus.page.report.report-single'),\n  };\n  const REPORT_DASHBOARD = {\n    Report: t('thingplus.page.report.entire-report'),\n    'Total Work Report': t('thingplus.page.report.total-work-report'),\n    'Cost Report': t('thingplus.page.report.cost-report'),\n    'Work Report': t('thingplus.page.report.work-report'),\n    'Delay Report': t('thingplus.page.report.delay-report'),\n  };\n  const REPORT_TYPE = {\n    DAILY: t('thingplus.time-format.day-by-day'),\n    WEEKLY: t('thingplus.time-format.week-by-week'),\n    MONTHLY: t('thingplus.time-format.month-by-month'),\n    CUSTOM: t('thingplus.label.custom-input'),\n  };\n  let dayList = [\n    { name: t('thingplus.time-format.weekday-short.mon'), value: 0 },\n    { name: t('thingplus.time-format.weekday-short.tue'), value: 1 },\n    { name: t('thingplus.time-format.weekday-short.wed'), value: 2 },\n    { name: t('thingplus.time-format.weekday-short.thu'), value: 3 },\n    { name: t('thingplus.time-format.weekday-short.fri'), value: 4 },\n    { name: t('thingplus.time-format.weekday-short.sat'), value: 5 },\n    { name: t('thingplus.time-format.weekday-short.sun'), value: 6 },\n  ];\n\n  let customerL1Index = vm.customerL1List.findIndex(x => x.value == additionalParams.customerL1);\n  let customerL1Name = customerL1Index > -1 ? vm.customerL1List[customerL1Index].name : '';\n  let customerL2Index = vm.customerL2List.findIndex(x => x.value == additionalParams.customerL2);\n  let customerL2Name = customerL2Index > -1 ? vm.customerL2List[customerL2Index].name : '';\n\n  let reportTime = moment().startOf('day').valueOf() + Number(additionalParams.reportTime);\n  let reportDate = additionalParams.reportContent;\n  if (additionalParams.reportType == 'DAILY') {\n    let dailyContent = additionalParams.reportContent\n      .split(',')\n      .map(x => dayList[x].name)\n      .join(',');\n    reportDate = dailyContent;\n  }\n  if (additionalParams.reportType == 'WEEKLY') {\n    reportDate = dayList[additionalParams.reportContent].name;\n  }\n  vm.detailEntityFormGroup = vm.fb.group({\n    title: [additionalParams.name, [vm.validators.required]],\n    reportCategory: [REPORT_CATEGORY[additionalParams.reportCategory]],\n    reportDashboard: [REPORT_DASHBOARD[additionalParams.reportDashboard]],\n    customerL1Name: [customerL1Name],\n    customerL2Name: [customerL2Name],\n    reportType: [REPORT_TYPE[additionalParams.reportType]],\n    reportTime: [moment(reportTime).format('HH:mm')],\n    reportDate: [reportDate],\n  });\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "2d744bd9-4a7a-9218-62e5-4c939e0b073c"
              },
              {
                "name": "Edit",
                "icon": "edit",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"edit-report-form\">\n  <form\n    #editEntityForm=\"ngForm\"\n    [formGroup]=\"editEntityFormGroup\"\n    (ngSubmit)=\"save()\"\n    style=\"font-size: {{calcFontSize()}}px;\"\n  >\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\" translate>thingplus.dialog.create-report-title</span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 0.4em\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div class=\"step-controller\" fxLayoutAlign=\"space-between center\">\n      <div\n        class=\"step\"\n        [ngClass]=\"{'prev': currentStep > 0, 'current': currentStep == 0, 'next': currentStep < 0}\"\n        (click)=\"selectStep($event, 0)\"\n        fxLayoutAlign=\"center center\"\n        [attr.data-label]=\"t('thingplus.label.step-set-page')\"\n      >\n        <i class=\"material-icons\">check</i>\n      </div>\n      <div class=\"step-progress-line\" [ngClass]=\"{'prev': currentStep > 0, 'next': currentStep < 0}\"></div>\n      <div\n        class=\"step\"\n        [ngClass]=\"{'prev': currentStep > 1, 'current': currentStep == 1, 'next': currentStep < 1}\"\n        (click)=\"selectStep($event, 1)\"\n        fxLayoutAlign=\"center center\"\n        [attr.data-label]=\"t('thingplus.label.step-set-send')\"\n      >\n        <i class=\"material-icons\">check</i>\n      </div>\n      <div class=\"step-progress-line\" [ngClass]=\"{'prev': currentStep > 1, 'next': currentStep < 1}\"></div>\n      <div\n        class=\"step\"\n        [ngClass]=\"{'prev': currentStep > 2, 'current': currentStep == 2, 'next': currentStep < 2}\"\n        (click)=\"selectStep($event, 2)\"\n        fxLayoutAlign=\"center center\"\n        [attr.data-label]=\"t('thingplus.label.step-set-receive')\"\n      >\n        <i class=\"material-icons\">check</i>\n      </div>\n    </div>\n    <div mat-dialog-content fxFlex fxLayout=\"column\" fxLayoutGap=\"2em\">\n      <div class=\"step-content step-content-0\" *ngIf=\"currentStep == 0\" fxLayout=\"column\" fxLayoutGap=\"2em\">\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex=\"100\"\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{error: editEntityFormGroup.get('title').hasError('required')}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.page.report.report-name</label>\n            </div>\n            <div fxFlex=\"100\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\">\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"0.6em\">\n                <input matInput formControlName=\"title\" required />\n              </div>\n            </div>\n            <div class=\"error-box\" *ngIf=\"editEntityFormGroup.get('title').hasError('required')\" translate>\n              thingplus.help.error-required-report-name\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.page.report.report-category</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select formControlName=\"reportCategory\" (selectionChange)=\"setReportCategory($event)\">\n                <mat-option *ngFor=\"let reportCategory of reportCategoryList\" [value]=\"reportCategory.value\">\n                  {{reportCategory.name}}\n                </mat-option>\n              </mat-select>\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.page.report.report-dashboard</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select formControlName=\"reportDashboard\">\n                <mat-option *ngFor=\"let reportDashboard of reportDashboardList\" [value]=\"reportDashboard.value\">\n                  {{reportDashboard.name}}\n                </mat-option>\n              </mat-select>\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex=\"100\"\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{'disabled': ownerLevel != 0}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.customerL1</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select\n                formControlName=\"customerL1\"\n                (selectionChange)=\"setCustomerL1($event)\"\n                *ngIf=\"ownerLevel == 0\"\n              >\n                <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n                  {{customerL1.name}}\n                </mat-option>\n              </mat-select>\n              <input matInput formControlName=\"customerL1Name\" *ngIf=\"ownerLevel != 0\" readonly />\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex=\"100\"\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{'disabled': ownerLevel > 1}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.customerL2</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select\n                formControlName=\"customerL2\"\n                (selectionChange)=\"setCustomerL2($event)\"\n                *ngIf=\"ownerLevel <= 1\"\n              >\n                <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n                  {{customerL2.name}}\n                </mat-option>\n              </mat-select>\n              <input matInput formControlName=\"customerL2Name\" *ngIf=\"ownerLevel > 1\" readonly />\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\" *ngIf=\"isSingleReport\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.device</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select\n                formControlName=\"device\"\n                multiple\n                (selectionChange)=\"setDevice($event)\"\n                placeholder=\"{{'thingplus.selector.select-device' | translate}}\"\n              >\n                <mat-select-trigger>\n                  <span *ngIf=\"editEntityFormGroup.get('device').value.length > 0\">\n                    {{'thingplus.selector.selected-count' | translate:{count:\n                    editEntityFormGroup.get('device').value.length} }}\n                  </span>\n                </mat-select-trigger>\n                <mat-option *ngFor=\"let device of deviceList\" [value]=\"device.value\"> {{device.name}} </mat-option>\n              </mat-select>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"step-content step-content-1\" *ngIf=\"currentStep == 1\" fxLayout=\"column\" fxLayoutGap=\"2em\">\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.report-repeat</label>\n            </div>\n            <div\n              class=\"value-box no-border\"\n              fxFlex\n              fxLayout=\"row\"\n              fxLayoutAlign=\"space-evenly center\"\n              fxLayoutGap=\"0.5em\"\n            >\n              <button\n                class=\"radio-btn\"\n                type=\"button\"\n                fxFlex=\"25\"\n                [ngClass]=\"{'active': editEntityFormGroup.get('reportType').value == 'DAILY'}\"\n                (click)=\"setReportType($event, 'DAILY')\"\n                translate\n              >\n                thingplus.time-format.day-by-day\n              </button>\n              <button\n                class=\"radio-btn\"\n                type=\"button\"\n                fxFlex=\"25\"\n                [ngClass]=\"{'active': editEntityFormGroup.get('reportType').value == 'WEEKLY'}\"\n                (click)=\"setReportType($event, 'WEEKLY')\"\n                translate\n              >\n                thingplus.time-format.week-by-week\n              </button>\n              <button\n                class=\"radio-btn\"\n                type=\"button\"\n                fxFlex=\"25\"\n                [ngClass]=\"{'active': editEntityFormGroup.get('reportType').value == 'MONTHLY'}\"\n                (click)=\"setReportType($event, 'MONTHLY')\"\n                translate\n              >\n                thingplus.time-format.month-by-month\n              </button>\n              <button\n                class=\"radio-btn\"\n                type=\"button\"\n                fxFlex=\"25\"\n                [ngClass]=\"{'active': editEntityFormGroup.get('reportType').value == 'CUSTOM'}\"\n                (click)=\"setReportType($event, 'CUSTOM')\"\n                translate\n              >\n                thingplus.label.custom-input\n              </button>\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.report-time</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-datetimepicker #reportTimePicker type=\"time\" openOnFocus=\"true\"></mat-datetimepicker>\n              <input class=\"row-input\" matInput formControlName=\"reportTime\" [matDatetimepicker]=\"reportTimePicker\" />\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.report-date</label>\n            </div>\n            <div\n              class=\"group-box\"\n              fxFlex=\"100\"\n              fxLayout=\"column\"\n              fxLayoutAlign=\"start stretch\"\n              fxLayoutGap=\"1em\"\n              *ngIf=\"editEntityFormGroup.get('reportType').value == 'DAILY'\"\n            >\n              <div fxFlex=\"100\" fxLayoutAlign=\"space-between center\" formGroupName=\"dailyContent\">\n                <mat-checkbox formControlName=\"0\">\n                  {{'thingplus.time-format.weekday-short.mon' | translate}}\n                </mat-checkbox>\n                <mat-checkbox formControlName=\"1\">\n                  {{'thingplus.time-format.weekday-short.tue' | translate}}\n                </mat-checkbox>\n                <mat-checkbox formControlName=\"2\">\n                  {{'thingplus.time-format.weekday-short.wed' | translate}}\n                </mat-checkbox>\n                <mat-checkbox formControlName=\"3\">\n                  {{'thingplus.time-format.weekday-short.thu' | translate}}\n                </mat-checkbox>\n                <mat-checkbox formControlName=\"4\">\n                  {{'thingplus.time-format.weekday-short.fri' | translate}}\n                </mat-checkbox>\n                <mat-checkbox formControlName=\"5\">\n                  {{'thingplus.time-format.weekday-short.sat' | translate}}\n                </mat-checkbox>\n                <mat-checkbox formControlName=\"6\">\n                  {{'thingplus.time-format.weekday-short.sun' | translate}}\n                </mat-checkbox>\n              </div>\n            </div>\n            <div\n              class=\"value-box\"\n              fxFlex\n              fxLayout=\"row\"\n              fxLayoutAlign=\"start center\"\n              fxLayoutGap=\"0.6em\"\n              *ngIf=\"editEntityFormGroup.get('reportType').value == 'WEEKLY'\"\n            >\n              <mat-select formControlName=\"weeklyContent\">\n                <mat-option *ngFor=\"let day of dayList\" [value]=\"day.value\"> {{day.name}} </mat-option>\n              </mat-select>\n            </div>\n            <div\n              class=\"value-box\"\n              fxFlex\n              fxLayout=\"row\"\n              fxLayoutAlign=\"start center\"\n              fxLayoutGap=\"0.6em\"\n              *ngIf=\"editEntityFormGroup.get('reportType').value == 'MONTHLY'\"\n            >\n              <mat-select formControlName=\"monthlyContent\">\n                <mat-option *ngFor=\"let date of dateList\" [value]=\"date.value\"> {{date.name}} </mat-option>\n              </mat-select>\n            </div>\n            <div\n              class=\"value-box\"\n              fxFlex\n              fxLayout=\"row\"\n              fxLayoutAlign=\"start center\"\n              fxLayoutGap=\"0.6em\"\n              *ngIf=\"editEntityFormGroup.get('reportType').value == 'CUSTOM'\"\n            >\n              <input matInput type=\"number\" step=\"1\" formControlName=\"customContent\" />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"step-content step-content-2\" *ngIf=\"currentStep == 2\" fxLayout=\"column\" fxLayoutGap=\"2em\">\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start end\">\n          <div fxFlex fxLayout=\"column\" fxLayoutGap=\"0.6em\" class=\"input-box\">\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.add-user</label>\n            </div>\n            <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.6em\">\n              <mat-select\n                formControlName=\"user\"\n                multiple\n                (selectionChange)=\"setUser($event)\"\n                placeholder=\"{{'thingplus.selector.select-user' | translate}}\"\n              >\n                <mat-select-trigger>\n                  <span *ngIf=\"editEntityFormGroup.get('user').value.length > 0\">\n                    {{'thingplus.selector.selected-count' | translate:{count:\n                    editEntityFormGroup.get('user').value.length} }}\n                  </span>\n                </mat-select-trigger>\n                <mat-option *ngFor=\"let user of userList\" [value]=\"user.value\">\n                  {{user.name}}{{user.email ? \" : \" + user.email : \"\"}}\n                </mat-option>\n              </mat-select>\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div\n            fxFlex=\"100\"\n            fxLayout=\"column\"\n            fxLayoutGap=\"0.6em\"\n            class=\"input-box\"\n            [ngClass]=\"{error: editEntityFormGroup.get('newEmail').hasError('email')}\"\n          >\n            <div class=\"label-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n              <label translate>thingplus.label.email</label>\n            </div>\n            <div fxFlex=\"100\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\">\n              <div class=\"value-box\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"0.6em\">\n                <input matInput type=\"email\" email fxFlex formControlName=\"newEmail\" />\n                <button class=\"email-add-button\" type=\"button\" (click)=\"addEmail($event)\" translate>\n                  thingplus.action.add\n                </button>\n              </div>\n            </div>\n            <div class=\"error-box\" *ngIf=\"editEntityFormGroup.get('newEmail').hasError('email')\" translate>\n              thingplus.help.error-invalid-email\n            </div>\n          </div>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"1em\" fxLayoutAlign=\"start center\">\n          <div class=\"grid-box\" fxLayout=\"row wrap\" fxLayoutAlign=\"start\">\n            <div\n              class=\"chip email-chip\"\n              *ngFor=\"let email of emailList\"\n              fxLayoutAlign=\"space-between center\"\n              fxLayoutGap=\"1em\"\n            >\n              <label class=\"chip-label\" fxFlex>{{email}}</label>\n              <button class=\"email-delete-button material-icons\" type=\"button\" (click)=\"deleteEmail($event, email)\">\n                close\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button prev-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"prevStep()\"\n        *ngIf=\"currentStep > 0\"\n        translate\n      >\n        thingplus.action.prev-step\n      </button>\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        *ngIf=\"currentStep == 0\"\n        translate\n      >\n        thingplus.action.close\n      </button>\n      <button\n        class=\"button next-button\"\n        type=\"button\"\n        (click)=\"nextStep()\"\n        [disabled]=\"(isLoading$ | async)\"\n        *ngIf=\"currentStep < 2\"\n        translate\n      >\n        thingplus.action.next-step\n      </button>\n      <button\n        class=\"button save-button\"\n        type=\"submit\"\n        [disabled]=\"(isLoading$ | async) || editEntityForm.invalid\"\n        *ngIf=\"currentStep == 2\"\n        translate\n      >\n        thingplus.action.save\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#edit-report-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  min-height: 70vh;\n}\n#edit-report-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#edit-report-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#edit-report-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-report-form .dialog-close i {\n  font-size: 1.4em;\n}\n#edit-report-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#edit-report-form .step-controller {\n  padding: 4em;\n}\n#edit-report-form .step {\n  position: relative;\n  display: inline-block;\n  padding: 0.3em;\n  background-color: var(--tb-service-border-1);\n  border: 1px solid var(--tb-service-border-1);\n  color: var(--tb-service-border-1);\n  transition-property: color, border-color, background-color;\n  transition-duration: var(--tb-config-color-duration);\n  border-radius: 50%;\n  cursor: pointer;\n}\n#edit-report-form .step i {\n  font-size: 1.4em;\n}\n#edit-report-form .step.prev {\n  background-color: var(--tb-service-accent);\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-font-0);\n}\n#edit-report-form .step.current {\n  background-color: var(--tb-service-font-0);\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-font-0);\n}\n#edit-report-form .step:after {\n  content: attr(data-label);\n  position: absolute;\n  top: 125%;\n  left: 50%;\n  transform: translateX(-50%);\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n  font-size: 1.2em;\n}\n#edit-report-form .step.current:after {\n  color: var(--tb-service-font-5);\n}\n#edit-report-form .step-progress-line {\n  width: 100%;\n  height: 2px;\n  background-color: var(--tb-service-border-1);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-report-form .step-progress-line.prev {\n  background-color: var(--tb-service-accent);\n}\n\n#edit-report-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#edit-report-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#edit-report-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#edit-report-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#edit-report-form .label-box {\n  color: var(--tb-service-font-3);\n  font-size: 1.2em;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-report-form .input-box.disabled .label-box {\n  color: var(--tb-service-font-1);\n}\n#edit-report-form .value-box {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-report-form .value-box.no-border {\n  border: none !important;\n}\n\n#edit-report-form .input-box:not(.disabled) .value-box:hover {\n  border-color: var(--tb-service-border-3);\n}\n#edit-report-form .input-box:not(.disabled) .value-box:focus-within {\n  border-color: var(--tb-service-accent);\n  caret-color: var(--tb-service-accent);\n}\n#edit-report-form .value-box *::placeholder {\n  color: var(--tb-service-font-4);\n}\n#edit-report-form .value-box input {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  caret-color: var(--tb-service-accent);\n}\n#edit-report-form .input-box.disabled .value-box {\n  background-color: var(--tb-service-background-1);\n}\n#edit-report-form .input-box.disabled .value-box input {\n  color: var(--tb-service-font-2);\n  cursor: default;\n}\n#edit-report-form .radio-btn {\n  all: unset;\n  color: var(--tb-service-font-5);\n  border: 1px solid var(--tb-service-border-0);\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  text-align: center;\n  cursor: pointer;\n}\n#edit-report-form .input-box:not(.disabled) .radio-btn:not(.active):hover {\n  border-color: var(--tb-service-border-3);\n}\n#edit-report-form .input-box:not(.disabled) .radio-btn.active {\n  color: var(--tb-service-accent);\n  border-color: var(--tb-service-accent);\n}\n#edit-report-form .input-box.disabled .radio-btn:not(.active) {\n  color: var(--tb-service-font-1);\n  cursor: default;\n}\n#edit-report-form .input-box.disabled .radio-btn.active {\n  border-color: var(--tb-service-border-3);\n  cursor: default;\n}\n\n#edit-report-form .grid-box {\n  gap: 1em;\n  max-width: 100%;\n}\n#edit-report-form .chip {\n  border: 1px solid var(--tb-service-border-0);\n  color: var(--tb-service-font-5);\n  padding: 1em;\n  overflow: hidden;\n}\n#edit-report-form .chip-label {\n  font-size: 1.4em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n#edit-report-form .email-add-button {\n  border: none;\n  padding: 0.4em 1em;\n  margin-right: calc(16em / 14);\n  font-size: 1.4em;\n  color: var(--tb-service-accent);\n  border: 1px solid var(--tb-service-accent);\n  background-color: var(--tb-service-background-0);\n  cursor: pointer;\n  transition-property: color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-report-form .input-box.error .email-add-button {\n  cursor: default;\n  color: var(--tb-service-disabled);\n  border-color: var(--tb-service-disabled);\n}\n#edit-report-form .input-box:not(.error) .email-add-button:hover {\n  color: var(--tb-service-accent-hover);\n  border-color: var(--tb-service-accent-hover);\n}\n#edit-report-form .input-box:not(.error) .email-add-button:active {\n  color: var(--tb-service-accent-pressed);\n  border-color: var(--tb-service-accent-pressed);\n}\n#edit-report-form .email-delete-button {\n  border: none;\n  padding: 0.1em;\n  font-size: 1.4em;\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-font-1);\n  border-radius: 50%;\n  cursor: pointer;\n  transition-property: color, background-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-report-form .email-delete-button:hover {\n  background-color: var(--tb-service-font-2);\n}\n#edit-report-form .email-delete-button:active {\n  background-color: var(--tb-service-font-3);\n}\n\n#edit-report-form .value-box .mat-select-trigger {\n  font-size: 1.4em;\n  padding: calc(16em / 14);\n  line-height: 1;\n}\n#edit-report-form .value-box .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n#edit-report-form .value-box .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n#edit-report-form .group-box {\n  border: 1px solid var(--tb-service-border-0);\n  padding: 1.6em;\n}\n#edit-report-form .mat-checkbox.mat-checkbox-checked .mat-checkbox-background {\n  background-color: var(--tb-service-accent);\n}\n#edit-report-form .mat-checkbox-checkmark-path {\n  stroke: var(--tb-service-font-0) !important;\n}\n#edit-report-form .mat-checkbox .mat-checkbox-inner-container {\n  width: 1.8em;\n  height: 1.8em;\n}\n#edit-report-form .mat-checkbox .mat-checkbox-label {\n  color: var(--tb-service-font-3);\n  font-size: 1.4em;\n}\n#edit-report-form .mat-checkbox .mat-checkbox-frame {\n  border-color: var(--tb-service-border-0);\n}\n#edit-report-form .mat-checkbox.mat-checkbox-checked .mat-checkbox-frame {\n  border-color: var(--tb-service-accent);\n}\n#edit-report-form .error-box {\n  color: var(--tb-service-warn);\n  font-size: 1.2em;\n  margin-top: calc(0.6em / 1.2);\n}\n#edit-report-form .input-box.error .label-box {\n  color: var(--tb-service-warn);\n}\n#edit-report-form .input-box.error .value-box {\n  border: 1px solid var(--tb-service-warn);\n}\n#edit-report-form .input-box.error .error-box {\n  display: block;\n  margin-top: calc(0.6em / 1.2);\n}\n\n#edit-report-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#edit-report-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#edit-report-form .save-button,\n#edit-report-form .next-button {\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-accent);\n}\n#edit-report-form .save-button:hover,\n#edit-report-form .next-button:hover {\n  background-color: var(--tb-service-accent-hover);\n}\n#edit-report-form .save-button:active,\n#edit-report-form .next-button:active {\n  background-color: var(--tb-service-accent-pressed);\n}\n#edit-report-form .close-button,\n#edit-report-form .prev-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#edit-report-form .close-button:hover,\n#edit-report-form .prev-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#edit-report-form .close-button:active,\n#edit-report-form .prev-button:active {\n  background-color: var(--tb-service-border-0);\n}\n\n@media (min-width: 960px) {\n  #edit-report-form form {\n    width: 24vw;\n  }\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nconst t = widgetContext.custom.t;\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n  customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n  let vm = instance;\n  vm.ownerId = widgetContext.defaultSubscription.configuredDatasources[0].entity.id;\n  vm.ownerLevel = widgetContext.$scope.ownerLevel;\n  vm.t = t;\n  vm.currentStep = 0;\n  vm.newEmail = '';\n  vm.emailList = [];\n  vm.isSingleReport = additionalParams.reportCategory == 'single';\n  vm.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  vm.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n  vm.deviceList = [{ name: t('thingplus.selector.select-all'), value: 'ENTIRE' }];\n  vm.userList = [{ name: t('thingplus.selector.select-all'), value: 'ENTIRE', email: '' }];\n  if (vm.ownerLevel == 0) {\n    vm.customerL1List = vm.customerL1List.concat(\n      widgetContext.custom.customerL1List\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  }\n  if (vm.ownerLevel <= 1) {\n    vm.customerL2List = vm.customerL2List.concat(\n      widgetContext.custom.customerL2List\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  }\n  vm.deviceList = vm.deviceList.concat(\n    widgetContext.custom.deviceList\n      .map(x => {\n        return {\n          name: x.label,\n          value: x.id.id,\n        };\n      })\n      .sort((a, b) => {\n        if (a.name > b.name) return 1;\n        if (a.name < b.name) return -1;\n        return 0;\n      })\n  );\n  vm.userList = vm.userList.concat(\n    widgetContext.custom.userList\n      .map(x => {\n        return {\n          name: x.details.firstName,\n          value: x.id.id,\n          email: x.details.email,\n        };\n      })\n      .sort((a, b) => {\n        if (a.name > b.name) return 1;\n        if (a.name < b.name) return -1;\n        return 0;\n      })\n  );\n  vm.originDevices = [];\n  vm.originUsers = [];\n  vm.emailList = [];\n  if (additionalParams.receiver) {\n    let originReceiver = additionalParams.receiver.split(',');\n    vm.originUsers = vm.userList.filter(x => originReceiver.includes(x.email)).map(x => x.value);\n    vm.emailList = originReceiver.filter(x => !vm.userList.map(x => x.email).includes(x));\n  }\n  if (additionalParams.device) {\n    vm.originDevices = additionalParams.device.split(',');\n  }\n  vm.reportCategoryList = [\n    { name: t('thingplus.page.report.report-entire'), value: 'entire' },\n    { name: t('thingplus.page.report.report-single'), value: 'single' },\n  ];\n  if (vm.isSingleReport) {\n    vm.reportDashboardList = [\n      { name: t('thingplus.page.report.work-report'), value: 'Work Report' },\n      { name: t('thingplus.page.report.delay-report'), value: 'Delay Report' },\n    ];\n  } else {\n    vm.reportDashboardList = [\n      { name: t('thingplus.page.report.entire-report'), value: 'Report' },\n      { name: t('thingplus.page.report.total-work-report'), value: 'Total Work Report' },\n      { name: t('thingplus.page.report.cost-report'), value: 'Cost Report' },\n    ];\n  }\n\n  vm.dayList = [\n    { name: t('thingplus.time-format.weekday-long.mon'), value: 0 },\n    { name: t('thingplus.time-format.weekday-long.tue'), value: 1 },\n    { name: t('thingplus.time-format.weekday-long.wed'), value: 2 },\n    { name: t('thingplus.time-format.weekday-long.thu'), value: 3 },\n    { name: t('thingplus.time-format.weekday-long.fri'), value: 4 },\n    { name: t('thingplus.time-format.weekday-long.sat'), value: 5 },\n    { name: t('thingplus.time-format.weekday-long.sun'), value: 6 },\n  ];\n  vm.dateList = [];\n  for (let i = 1; i <= 31; i++) {\n    vm.dateList.push({ name: t('thingplus.time-format.day-value', { day: i }), value: i });\n  }\n  let customerL1Name = t('thingplus.selector.entire-customerL1');\n  if (additionalParams.customerL1 && additionalParams.customerL1 != '') {\n    customerL1Name = widgetContext.custom.relations[additionalParams.customerL1].name;\n  }\n  let customerL2Name = t('thingplus.selector.entire-customerL2');\n  if (additionalParams.customerL2 && additionalParams.customerL2 != '') {\n    customerL2Name = widgetContext.custom.relations[additionalParams.customerL2].name;\n  }\n  let dailyContent = [true, true, true, true, true, true, true];\n  if (additionalParams.reportType == 'DAILY') {\n    dailyContent = [false, false, false, false, false, false, false];\n    let list = additionalParams.reportContent.split(',');\n    for (let i in list) {\n      if (list[i]) {\n        dailyContent[list[i]] = true;\n      }\n    }\n  }\n  let reportTime = moment().startOf('day').valueOf() + Number(additionalParams.reportTime);\n  vm.editEntityFormGroup = vm.fb.group({\n    title: [additionalParams.name, [vm.validators.required]],\n    reportCategory: [additionalParams.reportCategory],\n    reportDashboard: [additionalParams.reportDashboard],\n    customerL1Name: [customerL1Name],\n    customerL2Name: [customerL2Name],\n    device: [vm.originDevices],\n    reportType: [additionalParams.reportType],\n    reportTime: [moment(reportTime).toDate()],\n    dailyContent: vm.fb.group({\n      0: [dailyContent[0]],\n      1: [dailyContent[1]],\n      2: [dailyContent[2]],\n      3: [dailyContent[3]],\n      4: [dailyContent[4]],\n      5: [dailyContent[5]],\n      6: [dailyContent[6]],\n    }),\n    weeklyContent: [additionalParams.reportType == 'WEEKLY' ? additionalParams.reportContent : 0],\n    monthlyContent: [additionalParams.reportType == 'MONTHLY' ? additionalParams.reportContent : 1],\n    customContent: [additionalParams.reportType == 'CUSTOM' ? additionalParams.reportContent : 2],\n    user: [vm.originUsers],\n    newEmail: [''],\n  });\n  if (vm.ownerLevel == 0) {\n    vm.editEntityFormGroup.controls.customerL1 = vm.fb.control(additionalParams.customerL1);\n  }\n  if (vm.ownerLevel <= 1) {\n    vm.editEntityFormGroup.controls.customerL2 = vm.fb.control(additionalParams.customerL2);\n  }\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  vm.save = function () {\n    vm.editEntityFormGroup.markAsPristine();\n    let users = vm.editEntityFormGroup.get('user').value;\n    if (vm.emailList.length == 0 && users.length == 0) {\n      window.alert(t('thingplus.help.error-required-receiver'));\n      return;\n    }\n    getAsset().subscribe(asset => {\n      widgetContext.rxjs.forkJoin([saveAsset(asset), saveAttribute(asset)]).subscribe(() => {\n        widgetContext.updateAliases();\n        vm.dialogRef.close(null);\n      });\n    });\n  };\n  vm.selectStep = function (e, index) {\n    vm.currentStep = index;\n  };\n  vm.prevStep = function () {\n    vm.currentStep--;\n  };\n  vm.nextStep = function () {\n    vm.currentStep++;\n  };\n  vm.setCustomerL1 = function (e) {\n    let customerL1 = vm.editEntityFormGroup.get('customerL1').value;\n    vm.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n    vm.deviceList = [{ name: t('thingplus.selector.select-all'), value: 'ENTIRE' }];\n    vm.editEntityFormGroup.patchValue(\n      {\n        customerL2: '',\n        device: [],\n      },\n      { emitEvent: false }\n    );\n    vm.customerL2List = vm.customerL2List.concat(\n      widgetContext.custom.customerL2List\n        .filter(x => {\n          return customerL1 == '' || x.parent.id.id == customerL1;\n        })\n        .map(x => {\n          return {\n            name: x.name,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n    vm.deviceList = vm.deviceList.concat(\n      widgetContext.custom.deviceList\n        .filter(x => {\n          return customerL1 == '' || x.parent.parent.id.id == customerL1;\n        })\n        .map(x => {\n          return {\n            name: x.label,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  };\n  vm.setCustomerL2 = function (e) {\n    let customerL1 = vm.editEntityFormGroup.get('customerL1').value;\n    let customerL2 = vm.editEntityFormGroup.get('customerL2').value;\n    vm.deviceList = [{ name: t('thingplus.selector.select-all'), value: 'ENTIRE' }];\n    vm.editEntityFormGroup.patchValue(\n      {\n        device: [],\n      },\n      { emitEvent: false }\n    );\n    vm.deviceList = vm.deviceList.concat(\n      widgetContext.custom.deviceList\n        .filter(x => {\n          return (\n            (customerL2 == '' && (customerL1 == '' || x.parent.parent.id.id == customerL1)) ||\n            x.parent.id.id == customerL2\n          );\n        })\n        .map(x => {\n          return {\n            name: x.label,\n            value: x.id.id,\n          };\n        })\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        })\n    );\n  };\n  vm.setDevice = function (e) {\n    // 기존에 Entire이 선택되어 있던 경우\n    let newValue = _.cloneDeep(e.value);\n    if (vm.originDevices.includes('ENTIRE')) {\n      // Entire가 빠진 경우 모두 선택 해제\n      if (!e.value.includes('ENTIRE')) {\n        newValue = [];\n        // Entire가 아닌 요소가 빠진 경우 Entire 삭제\n      } else if (e.value.length < vm.originDevices.length) {\n        newValue = e.value.filter(x => x != 'ENTIRE');\n      }\n      // 기존에 Entire이 선택되어 있지 않은 경우\n    } else {\n      // Entire가 선택된 경우 모두 선택\n      if (e.value.includes('ENTIRE')) {\n        newValue = vm.deviceList.map(x => x.value);\n      }\n    }\n    vm.editEntityFormGroup.patchValue(\n      {\n        device: newValue,\n      },\n      { emitEvent: false }\n    );\n    vm.originDevices = newValue;\n  };\n  vm.setUser = function (e) {\n    // 기존에 Entire이 선택되어 있던 경우\n    let newValue = _.cloneDeep(e.value);\n    if (vm.originUsers.includes('ENTIRE')) {\n      // Entire가 빠진 경우 모두 선택 해제\n      if (!e.value.includes('ENTIRE')) {\n        newValue = [];\n        // Entire가 아닌 요소가 빠진 경우 Entire 삭제\n      } else if (e.value.length < vm.originUsers.length) {\n        newValue = e.value.filter(x => x != 'ENTIRE');\n      }\n      // 기존에 Entire이 선택되어 있지 않은 경우\n    } else {\n      // Entire가 선택된 경우 모두 선택\n      if (e.value.includes('ENTIRE')) {\n        newValue = vm.userList.map(x => x.value);\n      }\n    }\n    vm.editEntityFormGroup.patchValue(\n      {\n        user: newValue,\n      },\n      { emitEvent: false }\n    );\n    vm.originUsers = newValue;\n  };\n  vm.setReportCategory = function (e) {\n    if (e.value == 'single') {\n      vm.isSingleReport = true;\n      vm.reportDashboardList = [\n        { name: t('thingplus.page.report.work-report'), value: 'Work Report' },\n        { name: t('thingplus.page.report.delay-report'), value: 'Delay Report' },\n      ];\n      vm.editEntityFormGroup.patchValue(\n        {\n          reportDashboard: 'Work Report',\n        },\n        { emitEvent: false }\n      );\n    } else if (e.value == 'entire') {\n      vm.isSingleReport = false;\n      vm.reportDashboardList = [\n        { name: t('thingplus.page.report.entire-report'), value: 'Report' },\n        { name: t('thingplus.page.report.total-work-report'), value: 'Total Work Report' },\n        { name: t('thingplus.page.report.cost-report'), value: 'Cost Report' },\n      ];\n      vm.editEntityFormGroup.patchValue(\n        {\n          reportDashboard: 'Report',\n        },\n        { emitEvent: false }\n      );\n    }\n  };\n  vm.setReportType = function (e, type) {\n    vm.editEntityFormGroup.patchValue(\n      {\n        reportType: type,\n      },\n      { emitEvent: false }\n    );\n  };\n  vm.addEmail = function (e) {\n    let newEmail = vm.editEntityFormGroup.get('newEmail');\n    if (newEmail.hasError('email')) return;\n    if (newEmail.value != '') {\n      vm.emailList.push(newEmail.value);\n      vm.editEntityFormGroup.patchValue(\n        {\n          newEmail: '',\n        },\n        { emitEvent: false }\n      );\n    }\n  };\n  vm.deleteEmail = function (e, email) {\n    let targetIndex = vm.emailList.indexOf(email);\n    vm.emailList.splice(targetIndex, 1);\n  };\n\n  function getAsset() {\n    return assetService.getAsset(entityId.id);\n  }\n  function saveAsset(asset) {\n    asset.label = vm.editEntityFormGroup.get('title').value;\n    return assetService.saveAsset(asset);\n  }\n\n  function saveAttribute(asset) {\n    let title = vm.editEntityFormGroup.get('title').value;\n    let reportCategory = vm.editEntityFormGroup.get('reportCategory').value;\n    let reportDashboard = vm.editEntityFormGroup.get('reportDashboard').value;\n    let customerL1Id = '',\n      customerL2Id = '';\n    if (vm.ownerLevel == 0) {\n      customerL1Id = vm.editEntityFormGroup.get('customerL1').value;\n      customerL2Id = vm.editEntityFormGroup.get('customerL2').value;\n    } else if (vm.ownerLevel == 1) {\n      customerL1Id = entityId.id;\n      customerL2Id = vm.editEntityFormGroup.get('customerL2').value;\n    } else {\n      customerL2Id = entityId.id;\n      customerL1Id = widgetContext.custom.relations[customerL2Id].parent.id.id;\n    }\n    let reportType = vm.editEntityFormGroup.get('reportType').value;\n    let reportTime = vm.editEntityFormGroup.get('reportTime').value;\n    reportTime = moment(reportTime).hour() * 3600000 + moment(reportTime).minute() * 60000;\n    let reportContent = '';\n    if (reportType == 'DAILY') {\n      reportContent = vm.editEntityFormGroup.get('dailyContent').value;\n      let result = [];\n      for (let i in reportContent) {\n        if (reportContent[i]) {\n          result.push(i);\n        }\n      }\n      reportContent = result.join(',');\n    } else if (reportType == 'WEEKLY') {\n      reportContent = vm.editEntityFormGroup.get('weeklyContent').value;\n    } else if (reportType == 'MONTHLY') {\n      reportContent = vm.editEntityFormGroup.get('monthlyContent').value;\n    } else {\n      reportContent = vm.editEntityFormGroup.get('customContent').value;\n    }\n    let reportPage = [\n      {\n        dashboardId: widgetContext.custom.dashboardList[reportDashboard].id.id,\n        stateId: 'default',\n      },\n    ];\n\n    let users = vm.editEntityFormGroup.get('user').value;\n    users = users.filter(x => x != 'ENTIRE');\n\n    let emailList = vm.userList.filter(x => users.includes(x.value)).map(x => x.email);\n    emailList = emailList.concat(vm.emailList);\n    emailList = _.uniq(emailList);\n\n    let attributeBody = [\n      { key: 'name', value: title },\n      { key: 'reportCategory', value: reportCategory },\n      { key: 'reportDashboard', value: reportDashboard },\n      { key: 'customerL1', value: customerL1Id },\n      { key: 'customerL2', value: customerL2Id },\n      { key: 'reportType', value: reportType },\n      { key: 'reportTime', value: reportTime },\n      { key: 'reportContent', value: reportContent },\n      { key: 'reportPage', value: reportPage },\n      { key: 'reportUpdateTime', value: moment().valueOf() },\n      { key: 'receiver', value: emailList.join(',') },\n    ];\n\n    if (vm.isSingleReport) {\n      let deviceIds = vm.editEntityFormGroup.get('device').value;\n      deviceIds = deviceIds.filter(x => x != 'ENTIRE');\n      attributeBody.push({ key: 'device', value: deviceIds.join(',') });\n    }\n\n    return attributeService.saveEntityAttributes(asset.id, 'SERVER_SCOPE', attributeBody);\n  }\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "ff7667aa-8c13-97e1-829f-83fbd3965723"
              },
              {
                "name": "Delete",
                "icon": "delete",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<div id=\"delete-report-form\">\n  <form\n    #deleteEntityForm=\"ngForm\"\n    [formGroup]=\"deleteEntityFormGroup\"\n    (ngSubmit)=\"save()\"\n    style=\"font-size: {{calcFontSize()}}px;\"\n  >\n    <div class=\"dialog-title-box\" fxLayoutAlign=\"space-between center\">\n      <span class=\"dialog-title\" translate>thingplus.dialog.delete-report-title</span>\n      <button class=\"dialog-close\" (click)=\"cancel()\" type=\"button\">\n        <mat-icon class=\"material-icons\">close</mat-icon>\n      </button>\n    </div>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\"> </mat-progress-bar>\n    <div style=\"height: 4px\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n      <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\n        <div class=\"label\">{{'thingplus.dialog.delete-report-content' | translate}}</div>\n      </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"button close-button\"\n        [disabled]=\"(isLoading$ | async)\"\n        type=\"button\"\n        (click)=\"cancel()\"\n        cdkFocusInitial\n        translate\n      >\n        thingplus.action.close\n      </button>\n      <button\n        class=\"button delete-button\"\n        type=\"submit\"\n        [disabled]=\"(isLoading$ | async) || deleteEntityForm.invalid\"\n        translate\n      >\n        thingplus.action.delete\n      </button>\n    </div>\n  </form>\n</div>\n",
                "customCss": "#delete-report-form form {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#delete-report-form .dialog-title-box {\n  padding: 2em;\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n#delete-report-form .dialog-title {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n}\n#delete-report-form .dialog-close {\n  all: unset;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#delete-report-form .dialog-close i {\n  font-size: 1.4em;\n}\n#delete-report-form .dialog-close:hover {\n  color: var(--tb-service-font-5);\n}\n\n#delete-report-form .mat-dialog-content {\n  padding: var(--tb-config-padding) !important;\n}\n#delete-report-form .mat-dialog-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n#delete-report-form .mat-dialog-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n#delete-report-form .mat-dialog-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n#delete-report-form .label {\n  color: var(--tb-service-font-5);\n  font-size: 1.4em;\n}\n\n#delete-report-form .mat-dialog-actions {\n  padding: 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n#delete-report-form .button {\n  all: unset;\n  padding: 0.6em 1.4em;\n  font-size: 1.4em;\n  box-sizing: border-box;\n  cursor: pointer;\n  transition-property: color, background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n#delete-report-form .delete-button {\n  color: var(--tb-service-font-0);\n  background-color: var(--tb-service-warn);\n}\n#delete-report-form .delete-button:hover {\n  background-color: var(--tb-service-warn-hover);\n}\n#delete-report-form .delete-button:active {\n  background-color: var(--tb-service-warn-pressed);\n}\n#delete-report-form .close-button {\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n#delete-report-form .close-button:hover {\n  border-color: var(--tb-service-border-3);\n}\n#delete-report-form .close-button:active {\n  background-color: var(--tb-service-border-0);\n}\n\n@media (min-width: 960px) {\n  #delete-report-form form {\n    width: 24vw;\n  }\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n\nconst t = widgetContext.custom.t;\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n  customDialog.customDialog(htmlTemplate, DeleteEntityDialogController).subscribe();\n}\n\nfunction DeleteEntityDialogController(instance) {\n  let vm = instance;\n  vm.deleteEntityFormGroup = vm.fb.group({});\n\n  vm.calcFontSize = function () {\n    const originWidth = widgetContext.settings.widget.originWidth;\n    let widgetFontSize = _.round((widgetContext.width / originWidth) * 10, 2);\n    if (widgetFontSize < 6.25) {\n      widgetFontSize = 6.25;\n    }\n    return widgetFontSize;\n  };\n  vm.cancel = function () {\n    vm.dialogRef.close(null);\n  };\n  vm.save = function () {\n    vm.deleteEntityFormGroup.markAsPristine();\n    deleteEntityObservable(entityId).subscribe(\n      function success() {\n        widgetContext.updateAliases();\n        vm.dialogRef.close(null);\n      },\n      function fail() {\n        showErrorDialog();\n        vm.dialogRef.close(null);\n      }\n    );\n  };\n\n  function deleteEntityObservable(entityId) {\n    return assetService.deleteAsset(entityId.id);\n  }\n\n  function showErrorDialog() {\n    let title = t('thingplus.dialog.error-delete-title');\n    let content = t('thingplus.dialog.error-delete-content');\n    dialogs.alert(title, content, 'CLOSE').subscribe(function (result) {});\n  }\n}\n",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "dffe3525-a902-cd03-8eb3-6618e0805d31"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "96286376-cdc1-8d26-e67b-cf1cf96cb5fa"
      }
    },
    "states": {
      "default": {
        "name": "{i18n:thingplus.menu.report-management}",
        "root": true,
        "layouts": {
          "main": {
            "widgets": {
              "6c66b00d-d9fe-f735-42c2-436bcccb448e": {
                "sizeX": 97,
                "sizeY": 4,
                "row": 0,
                "col": 0
              },
              "96286376-cdc1-8d26-e67b-cf1cf96cb5fa": {
                "sizeX": 95,
                "sizeY": 41,
                "row": 4,
                "col": 1
              }
            },
            "gridSettings": {
              "backgroundColor": "var(--tb-service-background-4)",
              "columns": 97,
              "margin": 0,
              "marginUnit": "px",
              "mobileMargin": 0,
              "backgroundSizeMode": "100%",
              "autoFillHeight": true,
              "backgroundImageUrl": null,
              "mobileAutoFillHeight": false,
              "mobileRowHeight": 70
            }
          }
        }
      }
    },
    "entityAliases": {
      "333e6cd5-5e78-17e4-47b0-4357cc213265": {
        "id": "333e6cd5-5e78-17e4-47b0-4357cc213265",
        "alias": "Current User Owner",
        "filter": {
          "type": "singleEntity",
          "resolveMultiple": false,
          "singleEntity": {
            "entityType": "CURRENT_USER_OWNER",
            "id": "13814000-1dd2-11b2-8080-808080808080"
          }
        }
      },
      "da5c2592-df41-fa71-cac1-1312f936885b": {
        "id": "da5c2592-df41-fa71-cac1-1312f936885b",
        "alias": "Report",
        "filter": {
          "type": "assetSearchQuery",
          "resolveMultiple": true,
          "rootStateEntity": true,
          "stateEntityParamName": null,
          "defaultStateEntity": {
            "entityType": "CURRENT_USER_OWNER",
            "id": "13814000-1dd2-11b2-8080-808080808080"
          },
          "rootEntity": {
            "entityType": "CURRENT_USER_OWNER",
            "id": null
          },
          "direction": "FROM",
          "maxLevel": 1,
          "fetchLastLevelOnly": false,
          "relationType": "Reports",
          "assetTypes": [
            "report"
          ]
        }
      }
    },
    "filters": {
      "1067499e-68e9-d845-3a43-41614e82d4ac": {
        "id": "1067499e-68e9-d845-3a43-41614e82d4ac",
        "filter": "No Entity",
        "keyFilters": [
          {
            "key": {
              "type": "ENTITY_FIELD",
              "key": "title"
            },
            "valueType": "STRING",
            "predicates": [
              {
                "keyFilterPredicate": {
                  "operation": "EQUAL",
                  "value": {
                    "defaultValue": "Public",
                    "dynamicValue": null
                  },
                  "ignoreCase": false,
                  "type": "STRING"
                },
                "userInfo": {
                  "editable": true,
                  "label": "",
                  "autogeneratedLabel": true,
                  "order": 0
                }
              }
            ]
          }
        ],
        "editable": true
      }
    },
    "timewindow": {
      "displayValue": "",
      "hideInterval": false,
      "hideAggregation": false,
      "hideAggInterval": false,
      "hideTimezone": false,
      "selectedTab": 0,
      "realtime": {
        "realtimeType": 0,
        "interval": 1000,
        "timewindowMs": 60000,
        "quickInterval": "CURRENT_DAY"
      },
      "history": {
        "historyType": 0,
        "interval": 1000,
        "timewindowMs": 60000,
        "fixedTimewindow": {
          "startTimeMs": 1674707716645,
          "endTimeMs": 1674794116645
        },
        "quickInterval": "CURRENT_DAY"
      },
      "aggregation": {
        "type": "AVG",
        "limit": 25000
      }
    },
    "settings": {
      "stateControllerId": "entity",
      "showTitle": false,
      "showDashboardsSelect": false,
      "showEntitiesSelect": false,
      "showDashboardTimewindow": false,
      "showDashboardExport": false,
      "toolbarAlwaysOpen": true,
      "titleColor": "rgba(0,0,0,0.870588)",
      "showDashboardLogo": false,
      "dashboardLogoUrl": null,
      "hideToolbar": true,
      "showFilters": false,
      "showUpdateDashboardImage": false
    }
  },
  "name": "Report Management"
}