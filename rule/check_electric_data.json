{
  "ruleChain": {
    "additionalInfo": {
      "description": ""
    },
    "name": "Check Electric Data",
    "type": "CORE",
    "firstRuleNodeId": null,
    "root": false,
    "debugMode": false,
    "configuration": null
  },
  "metadata": {
    "firstNodeIndex": 2,
    "nodes": [
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 42,
          "layoutY": 598
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsFilterNode",
        "name": "Check Activation",
        "debugMode": false,
        "configuration": {
          "jsScript": "return metadata.TP_ActivationState == 'true'"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 1285,
          "layoutY": 249
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgTimeseriesNode",
        "name": "Save Power",
        "debugMode": false,
        "configuration": {
          "defaultTTL": 0
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 52,
          "layoutY": 248
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "Get Electric Data",
        "debugMode": false,
        "configuration": {
          "tellFailureIfAbsent": false,
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "electricLimit",
            "customerL1Name",
            "customerL2Name"
          ],
          "latestTsKeyNames": [
            "f1_PF",
            "unbal",
            "f1_unbal",
            "f1_thd"
          ],
          "getLatestValueWithTs": false
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 366,
          "layoutY": 641
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Check pf",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.isAlarm = false;\nmetadata.alarmType = 'power-factor';\n\nif (metadata.ss_electricLimit && metadata.f1_pf) {\n  var limit = JSON.parse(metadata.ss_electricLimit);\n  if (limit.pf && metadata.f1_pf < limit.pf) {\n    metadata.isAlarm = true;\n    metadata.limit = limit.pf\n  }\n}\n\nreturn { msg: msg, metadata: metadata, msgType: msgType };\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 683,
          "layoutY": 249
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetTelemetryNode",
        "name": "Get Usage",
        "debugMode": false,
        "configuration": {
          "latestTsKeyNames": [
            "f1_kwh_imp"
          ],
          "fetchMode": "ALL",
          "orderBy": "DESC",
          "limit": 2,
          "useMetadataIntervalPatterns": false,
          "startInterval": 20,
          "startIntervalTimeUnit": "MINUTES",
          "endInterval": 1,
          "endIntervalTimeUnit": "MILLISECONDS",
          "startIntervalPattern": "0",
          "endIntervalPattern": ""
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 365,
          "layoutY": 486
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Check voltImbal",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.isAlarm = false;\nmetadata.alarmType = 'volt-imbalance';\n\nif (metadata.ss_electricLimit && metadata.unbal) {\n  var limit = JSON.parse(metadata.ss_electricLimit);\n  if (limit.voltImbal && metadata.unbal > limit.voltImbal) {\n    metadata.isAlarm = true;\n    metadata.limit = limit.voltImbal\n  }\n}\n\nreturn { msg: msg, metadata: metadata, msgType: msgType };\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 367,
          "layoutY": 562
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Check currImbal",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.isAlarm = false;\nmetadata.alarmType = 'curr-imbalance';\n\nif (metadata.ss_electricLimit && metadata.f1_unbal) {\n  var limit = JSON.parse(metadata.ss_electricLimit);\n  if (limit.currImbal && metadata.f1_unbal > limit.currImbal) {\n    metadata.isAlarm = true;\n    metadata.limit = limit.currImbal\n  }\n}\n\nreturn { msg: msg, metadata: metadata, msgType: msgType };\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 366,
          "layoutY": 715
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Check thd",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.isAlarm = false;\nmetadata.alarmType = 'thd';\n\nif (metadata.ss_electricLimit && metadata.f1_thd) {\n  var limit = JSON.parse(metadata.ss_electricLimit);\n  if (limit.thd && metadata.f1_thd > limit.thd) {\n    metadata.isAlarm = true;\n    metadata.limit = limit.thd\n  }\n}\n\nreturn { msg: msg, metadata: metadata, msgType: msgType };\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 691,
          "layoutY": 616
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsFilterNode",
        "name": "Check Alarm",
        "debugMode": false,
        "configuration": {
          "jsScript": "return metadata.isAlarm == 'true'"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 989,
          "layoutY": 558
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetOriginatorFieldsNode",
        "name": "Get Originator Label",
        "debugMode": false,
        "configuration": {
          "fieldsMapping": {
            "label": "originatorLabel"
          }
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 989,
          "layoutY": 680
        },
        "type": "org.thingsboard.rule.engine.action.TbClearAlarmNode",
        "name": "Clear Alarm",
        "debugMode": false,
        "configuration": {
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n    //remove prevAlarmDetails from metadata\n    delete metadata.prevAlarmDetails;\n    //now metadata is the same as it comes IN this rule node\n}\n\n\nreturn details;",
          "alarmType": "${alarmType}"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 1270,
          "layoutY": 559
        },
        "type": "org.thingsboard.rule.engine.action.TbCreateAlarmNode",
        "name": "Create Alarm",
        "debugMode": false,
        "configuration": {
          "alarmDetailsBuildJs": "var details = {};\nif (metadata.prevAlarmDetails) {\n    details = JSON.parse(metadata.prevAlarmDetails);\n    //remove prevAlarmDetails from metadata\n    delete metadata.prevAlarmDetails;\n    //now metadata is the same as it comes IN this rule node\n}\ndetails.customerL1Name = metadata.ss_customerL1Name\ndetails.customerL2Name = metadata.ss_customerL2Name\ndetails.customerTitle = metadata.ss_customerL2Name\ndetails.originatorLabel = metadata.originatorLabel\ndetails.limit = metadata.limit\ndetails.category = 'electric-quality'\n\n\nreturn details;",
          "useMessageAlarmData": false,
          "alarmType": "${alarmType}",
          "severity": "MAJOR",
          "propagate": true,
          "relationTypes": [],
          "dynamicSeverity": false
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 980,
          "layoutY": 249
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Check Usage",
        "debugMode": true,
        "configuration": {
          "jsScript": "var hourTs = new Date(Number(metadata.ts));\nhourTs.setMinutes(0);\nhourTs.setSeconds(0);\nhourTs.setMilliseconds(0);\n\nvar dayTs = new Date(hourTs.getTime());\nvar dayHour = dayTs.getHours();\nif (dayHour >= 15) {\n  dayTs.setHours(15);\n} else {\n  dayTs.setDate(dayTs.getDate() - 1);\n  dayTs.setHours(15);\n}\n\nvar hourKeys = ['TP_TotalPowerUsageHour','TP_WorkPowerUsageHour','TP_WaitPowerUsageHour', 'TP_PowerPeakHour'];\nvar dayKeys = ['TP_TotalPowerUsageDay','TP_WorkPowerUsageDay','TP_WaitPowerUsageDay', 'TP_PowerPeakDay'];\n\nvar newMsg = [\n  {\n    ts: +metadata.ts,\n    values: {\n      TP_TotalPowerUsageRaw: 0,\n      TP_WorkPowerUsageRaw: 0,\n      TP_WaitPowerUsageRaw: 0,\n      TP_PowerPeakRaw: 0\n    }\n  },\n  {\n    ts: hourTs.getTime(),\n    values: {\n      TP_TotalPowerUsageHour: 0,\n      TP_WorkPowerUsageHour: 0,\n      TP_WaitPowerUsageHour: 0,\n      TP_PowerPeakHour: 0\n    }\n  },\n  {\n    ts: dayTs.getTime(),\n    values: {\n      TP_TotalPowerUsageDay: 0,\n      TP_WorkPowerUsageDay: 0,\n      TP_WaitPowerUsageDay: 0,\n      TP_PowerPeakDay: 0\n    }\n  }\n];\nfor (let i in hourKeys) {\n  if (metadata[hourKeys[i]]) {\n    var target = JSON.parse(metadata[hourKeys[i]]);\n    var nowTs = new Date(Number(metadata.ts)).getTime() + (540 + Number(metadata.offset)) * 60 * 1000;\n    var dataTs = new Date(Number(target.ts)).getTime() + (540 + Number(metadata.offset)) * 60 * 1000;\n    if (new Date(nowTs).getHours() == new Date(dataTs).getHours() && nowTs - dataTs < 3600000) {\n      newMsg[1].values[hourKeys[i]] = Math.round(Number(target.value));\n    }\n  }\n}\n\nfor (let i in dayKeys) {\n  if (metadata[dayKeys[i]]) {\n    var target = JSON.parse(metadata[dayKeys[i]]);\n    var nowTs = new Date(Number(metadata.ts)).getTime() + (540 + Number(metadata.offset)) * 60 * 1000;\n    var dataTs = new Date(Number(target.ts)).getTime() + (540 + Number(metadata.offset)) * 60 * 1000;\n    if (new Date(nowTs).getDate() == new Date(dataTs).getDate() && nowTs - dataTs < 86400000) {\n      newMsg[2].values[dayKeys[i]] = Math.round(Number(target.value));\n    }\n  }\n}\n\nvar operationState = 'STOP';\nif (metadata.f1_watt) {\n  var target = JSON.parse(metadata.f1_watt);\n  \n  if (!metadata.ss_workPowerLimit || target.value > Number(metadata.ss_workPowerLimit)) {\n    operationState = 'WORK';\n  } else if (!metadata.ss_waitPowerLimit || target.value > Number(metadata.ss_waitPowerLimit)) {\n    operationState = 'WAIT';\n  } else {\n    operationState = 'STOP';\n  }\n  \n  newMsg[0].values.TP_PowerPeakRaw = Math.round(Number(target.value));\n  if (Number(target.value) > newMsg[1].values.TP_PowerPeakHour) {\n    newMsg[1].values.TP_PowerPeakHour = Math.round(Number(target.value));\n  }\n  if (Number(target.value) > newMsg[2].values.TP_PowerPeakDay) {\n    newMsg[2].values.TP_PowerPeakDay = Math.round(Number(target.value));\n  }\n}\n\n\n\n\nif (metadata.f1_kwh_imp) {\n  var target = JSON.parse(metadata.f1_kwh_imp);\n  if (target.length == 2) {\n    if (target[0].value >= target[1].value) {\n      newMsg[0].values.TP_TotalPowerUsageRaw = Math.round((target[0].value - target[1].value) * 1000);\n      newMsg[1].values.TP_TotalPowerUsageHour += Math.round((target[0].value - target[1].value) * 1000);\n      newMsg[2].values.TP_TotalPowerUsageDay += Math.round((target[0].value - target[1].value) * 1000);\n      if(operationState == 'WORK'){\n        newMsg[0].values.TP_WorkPowerUsageRaw = Math.round((target[0].value - target[1].value) * 1000);\n        newMsg[1].values.TP_WorkPowerUsageHour += Math.round((target[0].value - target[1].value) * 1000);\n        newMsg[2].values.TP_WorkPowerUsageDay += Math.round((target[0].value - target[1].value) * 1000);\n      }\n      if(operationState == 'WAIT'){\n        newMsg[0].values.TP_WaitPowerUsageRaw = Math.round((target[0].value - target[1].value) * 1000);\n        newMsg[1].values.TP_WaitPowerUsageHour += Math.round((target[0].value - target[1].value) * 1000);\n        newMsg[2].values.TP_WaitPowerUsageDay += Math.round((target[0].value - target[1].value) * 1000);\n      }\n    } else {\n      // 초기화 가능성\n      //   newMsg[1].values.TP_PowerUsageHourly += Math.round(target[0].value * 1000);\n      //   newMsg[0].values.TP_PowerUsageDaily += Math.round(target[0].value * 1000);\n    }\n  }\n}\n\nreturn { msg: newMsg, metadata: metadata, msgType: msgType };\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 371,
          "layoutY": 248
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "Get Electric Data",
        "debugMode": false,
        "configuration": {
          "tellFailureIfAbsent": false,
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "workPowerLimit",
            "waitPowerLimit"
          ],
          "latestTsKeyNames": [
            "f1_watt",
            "TP_TotalPowerUsageHour",
            "TP_PowerPeakHour",
            "TP_TotalPowerUsageDay",
            "TP_PowerPeakDay",
            "TP_WorkPowerUsageHour",
            "TP_WaitPowerUsageHour",
            "TP_WorkPowerUsageDay",
            "TP_WaitPowerUsageDay"
          ],
          "getLatestValueWithTs": true
        }
      }
    ],
    "connections": [
      {
        "fromIndex": 0,
        "toIndex": 5,
        "type": "True"
      },
      {
        "fromIndex": 0,
        "toIndex": 6,
        "type": "True"
      },
      {
        "fromIndex": 0,
        "toIndex": 3,
        "type": "True"
      },
      {
        "fromIndex": 0,
        "toIndex": 7,
        "type": "True"
      },
      {
        "fromIndex": 2,
        "toIndex": 13,
        "type": "Success"
      },
      {
        "fromIndex": 2,
        "toIndex": 0,
        "type": "Success"
      },
      {
        "fromIndex": 3,
        "toIndex": 8,
        "type": "Success"
      },
      {
        "fromIndex": 4,
        "toIndex": 12,
        "type": "Success"
      },
      {
        "fromIndex": 5,
        "toIndex": 8,
        "type": "Success"
      },
      {
        "fromIndex": 6,
        "toIndex": 8,
        "type": "Success"
      },
      {
        "fromIndex": 7,
        "toIndex": 8,
        "type": "Success"
      },
      {
        "fromIndex": 8,
        "toIndex": 10,
        "type": "False"
      },
      {
        "fromIndex": 8,
        "toIndex": 9,
        "type": "True"
      },
      {
        "fromIndex": 9,
        "toIndex": 11,
        "type": "Success"
      },
      {
        "fromIndex": 12,
        "toIndex": 1,
        "type": "Success"
      },
      {
        "fromIndex": 13,
        "toIndex": 4,
        "type": "Success"
      }
    ],
    "ruleChainConnections": [
      {
        "fromIndex": 11,
        "targetRuleChainId": {
          "entityType": "RULE_CHAIN",
          "id": "198e6bf0-3fc7-11ee-bff8-a768675c6a17"
        },
        "additionalInfo": {
          "description": "",
          "layoutX": 1572,
          "layoutY": 562,
          "ruleChainNodeId": "rule-chain-node-16"
        },
        "type": "Created"
      }
    ]
  }
}