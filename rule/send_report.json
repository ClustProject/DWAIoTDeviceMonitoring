{
  "ruleChain": {
    "additionalInfo": {
      "description": ""
    },
    "name": "Send Report",
    "type": "CORE",
    "firstRuleNodeId": null,
    "root": false,
    "debugMode": false,
    "configuration": null
  },
  "metadata": {
    "firstNodeIndex": 2,
    "nodes": [
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 331,
          "layoutY": 371
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetTenantAttributeNode",
        "name": "Get Token",
        "debugMode": false,
        "configuration": {
          "telemetry": false,
          "attrMapping": {
            "token": "jwtToken"
          }
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 627,
          "layoutY": 492
        },
        "type": "org.thingsboard.rule.engine.aws.sqs.TbSqsNode",
        "name": "Send Report",
        "debugMode": true,
        "configuration": {
          "queueType": "FIFO",
          "queueUrlPattern": "https://sqs.ap-northeast-2.amazonaws.com/995907272527/report-queue.fifo",
          "delaySeconds": 0,
          "messageAttributes": {
            "data": "${data}"
          },
          "accessKeyId": "AKIA6PYFS75H4X5S6DUJ",
          "secretAccessKey": "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",
          "region": "ap-northeast-2"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 54,
          "layoutY": 249
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "Get Report Info",
        "debugMode": false,
        "configuration": {
          "tellFailureIfAbsent": true,
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "reportTime",
            "reportPage",
            "reportType",
            "reportContent",
            "receiver",
            "customerL1",
            "customerL2",
            "reportUpdateTime"
          ],
          "latestTsKeyNames": [],
          "getLatestValueWithTs": false
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 328,
          "layoutY": 248
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsFilterNode",
        "name": "Check Time",
        "debugMode": false,
        "configuration": {
          "jsScript": "var receiver = metadata.ss_receiver;\nvar reportTime = metadata.ss_reportTime;\nvar reportType = metadata.ss_reportType;\nvar reportContent = metadata.ss_reportContent;\nvar reportUpdateTime = metadata.ss_reportUpdateTime;\n\nif (receiver == '') {\n  return false;\n}\n\nvar nowTs = new Date(Number(metadata.ts)).getTime() + (540 + Number(metadata.offset)) * 60 * 1000;\nvar now = new Date(nowTs);\nvar currentDay = now.getDay() - 1;\nif (currentDay < 0) {\n  currentDay = 6;\n}\nvar currentDate = now.getDate();\nvar currentHour = now.getHours();\nvar currentMinute = now.getMinutes();\nvar reportHour = Math.floor(reportTime / 3600000);\nvar reportMinute = Math.floor((reportTime % 3600000) / 60000);\n\nif (reportType == 'DAILY') {\n  if (reportContent.split(',').indexOf(currentDay + '') == -1) {\n    return false;\n  }\n}\nif (reportType == 'WEEKLY') {\n  if (reportContent != currentDay) {\n    return false;\n  }\n}\nif (reportType == 'MONTHLY') {\n  var newDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n  if (currentDate != reportContent && (newDate.getDate() > reportContent || newDate.getDate() != currentDate)) {\n    return false;\n  }\n}\nif (reportType == 'CUSTOM') {\n  var target = new Date(new Date(Number(reportUpdateTime)).getTime() + (540 + Number(metadata.offset)) * 60 * 1000);\n  target.setHours(0);\n  target.setMinutes(0);\n  target.setSeconds(0);\n  target.setMilliseconds(0);\n  var start = target.getTime();\n  now.setHours(0);\n  now.setMinutes(0);\n  now.setSeconds(0);\n  now.setMilliseconds(0);\n  var end = now.getTime();\n  if ((end - start) % (reportContent * 86400000) != 0) {\n    return false;\n  }\n}\n\nif (currentHour != reportHour || currentMinute != reportMinute) {\n  return false;\n}\n\nreturn true;\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 326,
          "layoutY": 493
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Create Report",
        "debugMode": false,
        "configuration": {
          "jsScript": "var reportType = metadata.ss_reportType;\nvar reportPage = JSON.parse(metadata.ss_reportPage);\nvar reportContent = metadata.ss_reportContent;\nvar receiver = metadata.ss_receiver;\nvar customerL1 = metadata.ss_customerL1;\nvar customerL2 = metadata.ss_customerL2;\n\nvar koreanNow = new Date(new Date(Number(metadata.ts)).getTime() + (540 + Number(metadata.offset)) * 60 * 1000);\nkoreanNow.setHours(0);\nkoreanNow.setMinutes(0);\nkoreanNow.setSeconds(0);\nkoreanNow.setMilliseconds(0);\n\nvar dayStartTs = koreanNow.getTime() - (540 + Number(metadata.offset)) * 60 * 1000;\n\nvar yesterdayNow = new Date(koreanNow.getTime() - 86400000);\nvar yesterdayDate = yesterdayNow.getDate();\nyesterdayNow.setDate(0);\nvar lastMonthDate = yesterdayNow.getDate();\nyesterdayNow.setMonth(yesterdayNow.getMonth() - 1);\nvar targetDate = lastMonthDate > yesterdayDate ? yesterdayDate : lastMonthDate;\nyesterdayNow.setDate(targetDate);\n\nvar monthStartTs = yesterdayNow.getTime() - (540 + Number(metadata.offset)) * 60 * 1000;\n\nvar startTs = dayStartTs;\nvar endTs = dayStartTs;\nvar range = '기간';\nif (reportType == 'DAILY') {\n  startTs = dayStartTs - 86400000;\n  endTs = dayStartTs;\n  range = '일간';\n}\nif (reportType == 'WEEKLY') {\n  startTs = dayStartTs - 7 * 86400000;\n  endTs = dayStartTs;\n  range = '주간';\n}\nif (reportType == 'MONTHLY') {\n  startTs = monthStartTs;\n  endTs = dayStartTs;\n  range = '월간';\n}\nif (reportType == 'CUSTOM') {\n  startTs = dayStartTs - reportContent * 86400000;\n  endTs = dayStartTs;\n  range = '기간';\n}\nvar entityId;\nif (customerL2 != '') {\n  entityId = { entityType: 'CUSTOMER', id: customerL2 };\n} else if (customerL1 != '') {\n  entityId = { entityType: 'CUSTOMER', id: customerL1 };\n}\n\nvar pages = [];\nfor (var i in reportPage) {\n  pages.push({\n    id: reportPage[i].dashboardId,\n    params: [\n      {\n        id: reportPage[i].stateId,\n        params: {\n          entityId: entityId,\n          startTs: startTs,\n          endTs: endTs,\n        },\n      },\n    ],\n  });\n}\nvar newMsg = {\n  service: 'moldmecca',\n  host: 'moldmecca.thingplus.net',\n  port: 80,\n  dashboard: pages,\n  jwtToken: metadata.jwtToken,\n  refreshToken: metadata.jwtToken,\n  emailTo: receiver,\n  emailFrom: 'Moldmecca <service@thingplus.net>',\n  title: '[Moldmecca] ' + range + ' 리포트입니다.',\n};\nmetadata.data = JSON.stringify(newMsg);\nreturn { msg: newMsg, metadata: metadata, msgType: msgType };\n"
        }
      }
    ],
    "connections": [
      {
        "fromIndex": 0,
        "toIndex": 4,
        "type": "Success"
      },
      {
        "fromIndex": 2,
        "toIndex": 3,
        "type": "Success"
      },
      {
        "fromIndex": 3,
        "toIndex": 0,
        "type": "True"
      },
      {
        "fromIndex": 4,
        "toIndex": 1,
        "type": "Success"
      }
    ],
    "ruleChainConnections": null
  }
}