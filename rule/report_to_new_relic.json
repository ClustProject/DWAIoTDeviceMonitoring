{
  "ruleChain": {
    "additionalInfo": {
      "description": ""
    },
    "name": "Report To New Relic",
    "type": "CORE",
    "firstRuleNodeId": null,
    "root": false,
    "debugMode": false,
    "configuration": null
  },
  "metadata": {
    "firstNodeIndex": null,
    "nodes": [
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 1200,
          "layoutY": 1123
        },
        "type": "org.thingsboard.rule.engine.rest.TbRestApiCallNode",
        "name": "To New Relic",
        "debugMode": false,
        "configuration": {
          "restEndpointUrlPattern": "https://metric-api.newrelic.com/metric/v1",
          "requestMethod": "POST",
          "useSimpleClientHttpFactory": true,
          "enableProxy": false,
          "useSystemProxyProperties": false,
          "proxyScheme": null,
          "proxyHost": null,
          "proxyPort": 0,
          "proxyUser": null,
          "proxyPassword": null,
          "readTimeoutMs": 0,
          "maxParallelRequestsCount": 0,
          "headers": {
            "Content-Type": "application/json",
            "Api-Key": "${APIKEY}"
          },
          "useRedisQueueForMsgPersistence": false,
          "trimQueue": false,
          "maxQueueSize": 0,
          "credentials": {
            "type": "anonymous"
          }
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 329,
          "layoutY": 1130
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetTenantAttributeNode",
        "name": "Get JWT Token",
        "debugMode": false,
        "configuration": {
          "telemetry": false,
          "attrMapping": {
            "token": "jwtToken"
          }
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 42,
          "layoutY": 1131
        },
        "type": "org.thingsboard.rule.engine.debug.TbMsgGeneratorNode",
        "name": "Report Device Count",
        "debugMode": false,
        "configuration": {
          "msgCount": 0,
          "periodInSeconds": 60,
          "useEndtime": true,
          "endTime": "00:00:00",
          "jsScript": "var now = new Date();\nnow.setSeconds(0);\nnow.setMilliseconds(0);\n\nvar msg = {};\nvar metadata = {\n  serviceName: 'moldmecca',\n  queueName: 'device',\n  ts: now.getTime(),\n  APIKEY: '0435b818745023b35f057ee93db22941f927NRAL'\n};\nvar msgType = 'POST_TELEMETRY_REQUEST';\n\nreturn {\n  msg: msg,\n  metadata: metadata,\n  msgType: msgType\n};",
          "originatorId": "08a3e6b0-96f0-11ed-8d0d-21e1d787e420",
          "originatorType": "TENANT"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 620,
          "layoutY": 1127
        },
        "type": "org.thingsboard.rule.engine.rest.TbRestApiCallNode",
        "name": "Get Devices",
        "debugMode": false,
        "configuration": {
          "restEndpointUrlPattern": "http://localhost:8080/api/tenant/devices?page=0&pageSize=1",
          "requestMethod": "GET",
          "useSimpleClientHttpFactory": true,
          "enableProxy": false,
          "useSystemProxyProperties": false,
          "proxyScheme": null,
          "proxyHost": null,
          "proxyPort": 0,
          "proxyUser": null,
          "proxyPassword": null,
          "readTimeoutMs": 0,
          "maxParallelRequestsCount": 0,
          "headers": {
            "Content-Type": "application/json",
            "X-Authorization": "Bearer ${jwtToken}"
          },
          "useRedisQueueForMsgPersistence": false,
          "trimQueue": false,
          "maxQueueSize": 0,
          "credentials": {
            "type": "anonymous"
          }
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 901,
          "layoutY": 1123
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Set Device Count",
        "debugMode": false,
        "configuration": {
          "jsScript": "if(msg == undefined || msg.totalElements == undefined){\n    return { msg: {}, metadata: {}, msgType: msgType };\n}\n\nvar metrics = [\n  {\n    name: 'tp.service.device.deviceCount',\n    type: 'gauge',\n    value: msg.totalElements,\n    timestamp: Number(metadata.ts),\n    attributes: {\n      'service.name': metadata.serviceName,\n      'queue.name': metadata.queueName,\n      value: msg.totalElements\n    }\n  }\n];\n\nvar newMsg = [\n  {\n    metrics: metrics\n  }\n];\n\nreturn { msg: newMsg, metadata: metadata, msgType: msgType };\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 1489,
          "layoutY": 1194
        },
        "type": "org.thingsboard.rule.engine.rest.TbRestApiCallNode",
        "name": "To New Relic",
        "debugMode": false,
        "configuration": {
          "restEndpointUrlPattern": "https://metric-api.newrelic.com/metric/v1",
          "requestMethod": "POST",
          "useSimpleClientHttpFactory": true,
          "enableProxy": false,
          "useSystemProxyProperties": false,
          "proxyScheme": null,
          "proxyHost": null,
          "proxyPort": 0,
          "proxyUser": null,
          "proxyPassword": null,
          "readTimeoutMs": 0,
          "maxParallelRequestsCount": 0,
          "headers": {
            "Content-Type": "application/json",
            "Api-Key": "${APIKEY}"
          },
          "useRedisQueueForMsgPersistence": false,
          "trimQueue": false,
          "maxQueueSize": 0,
          "credentials": {
            "type": "anonymous"
          }
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 42,
          "layoutY": 1203
        },
        "type": "org.thingsboard.rule.engine.debug.TbMsgGeneratorNode",
        "name": "Report Connection",
        "debugMode": false,
        "configuration": {
          "msgCount": 0,
          "periodInSeconds": 60,
          "useEndtime": true,
          "endTime": "00:00:00",
          "jsScript": "var now = new Date();\nnow.setSeconds(0);\nnow.setMilliseconds(0);\n\nvar msg = {};\nvar metadata = {\n  serviceName: 'moldmecca',\n  queueName: 'device',\n  ts: now.getTime(),\n  dataConnectionKey: 'f1_watt',\n  dataConnectionLimit: 30 * 60 * 1000,\n  mqttConnectionLimit: 30 * 60 * 1000,\n  APIKEY: '0435b818745023b35f057ee93db22941f927NRAL'\n};\nvar msgType = 'POST_TELEMETRY_REQUEST';\n\nreturn {\n  msg: msg,\n  metadata: metadata,\n  msgType: msgType\n};",
          "originatorId": "08a3e6b0-96f0-11ed-8d0d-21e1d787e420",
          "originatorType": "TENANT"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 330,
          "layoutY": 1202
        },
        "type": "org.thingsboard.rule.engine.transform.TbDuplicateRelatedNode",
        "name": "To Device",
        "debugMode": false,
        "configuration": {
          "relationsQuery": {
            "fetchLastLevelOnly": false,
            "direction": "FROM",
            "maxLevel": 3,
            "filters": [
              {
                "relationType": "Contains",
                "entityTypes": [
                  "DEVICE"
                ]
              }
            ]
          }
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 620,
          "layoutY": 1199
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "Get LastActivityTime",
        "debugMode": false,
        "configuration": {
          "tellFailureIfAbsent": false,
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "lastActivityTime"
          ],
          "latestTsKeyNames": [
            "${dataConnectionKey}"
          ],
          "getLatestValueWithTs": true
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 1200,
          "layoutY": 1196
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Set Device Connection",
        "debugMode": false,
        "configuration": {
          "jsScript": "var lastDataConnectionTs = 0;\nvar lastMqttConnectionTs = 0;\nif (metadata[metadata.dataConnectionKey]) {\n  var value = JSON.parse(metadata[metadata.dataConnectionKey]);\n  lastDataConnectionTs = value.ts;\n}\nif (metadata.ss_lastActivityTime) {\n  lastMqttConnectionTs = Number(metadata.ss_lastActivityTime);\n}\nvar dataConnection =\n  Number(metadata.ts) - Number(lastDataConnectionTs) > Number(metadata.dataConnectionLimit) ? 'OFF' : 'ON';\nvar mqttConnection =\n  Number(metadata.ts) - Number(lastMqttConnectionTs) > Number(metadata.mqttConnectionLimit) ? 'OFF' : 'ON';\n\nvar metrics = [\n  {\n    name: 'tp.service.device.relatedDeviceCount',\n    type: 'gauge',\n    value: 1,\n    timestamp: Number(metadata.ts),\n    attributes: {\n      'service.name': metadata.serviceName,\n      'device.name': metadata.originatorName,\n      'device.label': metadata.originatorLabel,\n      'queue.name': metadata.queueName,\n      dataConnection: dataConnection,\n      lastDataConnectionTs: lastDataConnectionTs,\n      mqttConnection: mqttConnection,\n      lastMqttConnectionTs: lastMqttConnectionTs,\n      value: 1\n    }\n  }\n];\n\nvar newMsg = [\n  {\n    metrics: metrics\n  }\n];\n\nreturn { msg: newMsg, metadata: metadata, msgType: msgType };\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 899,
          "layoutY": 1197
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetOriginatorFieldsNode",
        "name": "Get Device Info",
        "debugMode": false,
        "configuration": {
          "fieldsMapping": {
            "name": "originatorName",
            "label": "originatorLabel"
          }
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 1181,
          "layoutY": 726
        },
        "type": "org.thingsboard.rule.engine.filter.TbJsFilterNode",
        "name": "Check Msg",
        "debugMode": false,
        "configuration": {
          "jsScript": "return msg.length > 0;"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 630,
          "layoutY": 779
        },
        "type": "org.thingsboard.rule.engine.metadata.CalculateDeltaNode",
        "name": "Delta storageDataPointsCount",
        "debugMode": false,
        "configuration": {
          "inputValueKey": "storageDataPointsCount",
          "outputValueKey": "delta",
          "useCache": true,
          "addPeriodBetweenMsgs": true,
          "periodValueKey": "period",
          "round": null,
          "tellFailureIfDeltaIsNegative": true
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 629,
          "layoutY": 928
        },
        "type": "org.thingsboard.rule.engine.metadata.CalculateDeltaNode",
        "name": "Delta emailCount",
        "debugMode": false,
        "configuration": {
          "inputValueKey": "emailCount",
          "outputValueKey": "delta",
          "useCache": true,
          "addPeriodBetweenMsgs": true,
          "periodValueKey": "period",
          "round": null,
          "tellFailureIfDeltaIsNegative": true
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 627,
          "layoutY": 1005
        },
        "type": "org.thingsboard.rule.engine.metadata.CalculateDeltaNode",
        "name": "Delta smsCount",
        "debugMode": false,
        "configuration": {
          "inputValueKey": "smsCount",
          "outputValueKey": "delta",
          "useCache": true,
          "addPeriodBetweenMsgs": true,
          "periodValueKey": "period",
          "round": null,
          "tellFailureIfDeltaIsNegative": true
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 629,
          "layoutY": 852
        },
        "type": "org.thingsboard.rule.engine.metadata.CalculateDeltaNode",
        "name": "Delta createdAlarmsCount",
        "debugMode": false,
        "configuration": {
          "inputValueKey": "createdAlarmsCount",
          "outputValueKey": "delta",
          "useCache": true,
          "addPeriodBetweenMsgs": true,
          "periodValueKey": "period",
          "round": null,
          "tellFailureIfDeltaIsNegative": true
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 901,
          "layoutY": 528
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Set jsExecutionCount",
        "debugMode": false,
        "configuration": {
          "jsScript": "var key = 'tp.service.apiusage.jsExecutionCount';\nvar metrics = [\n  {\n    name: key,\n    type: 'gauge',\n    value: msg.delta,\n    timestamp: Number(metadata.ts),\n    attributes: { 'service.name': metadata.serviceName, 'queue.name': metadata.queueName }\n  }\n];\n\nvar newMsg = [\n  {\n    metrics: metrics\n  }\n];\n\nif(!msg.delta || msg.delta == 0){\n    return { msg: [], metadata: metadata, msgType: msgType };\n}\n\nreturn { msg: newMsg, metadata: metadata, msgType: msgType };\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 901,
          "layoutY": 453
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Set ruleEngineExecutionCount",
        "debugMode": false,
        "configuration": {
          "jsScript": "var key = 'tp.service.apiusage.ruleEngineExecutionCount';\nvar metrics = [\n  {\n    name: key,\n    type: 'gauge',\n    value: msg.delta,\n    timestamp: Number(metadata.ts),\n    attributes: { 'service.name': metadata.serviceName, 'queue.name': metadata.queueName }\n  }\n];\n\nvar newMsg = [\n  {\n    metrics: metrics\n  }\n];\n\nif(!msg.delta || msg.delta == 0){\n    return { msg: [], metadata: metadata, msgType: msgType };\n}\n\nreturn { msg: newMsg, metadata: metadata, msgType: msgType };\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 900,
          "layoutY": 679
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Set transportDataPointsCount",
        "debugMode": false,
        "configuration": {
          "jsScript": "var key = 'tp.service.apiusage.transportDataPointsCount';\nvar metrics = [\n  {\n    name: key,\n    type: 'gauge',\n    value: msg.delta,\n    timestamp: Number(metadata.ts),\n    attributes: { 'service.name': metadata.serviceName, 'queue.name': metadata.queueName }\n  }\n];\n\nvar newMsg = [\n  {\n    metrics: metrics\n  }\n];\n\nif(!msg.delta || msg.delta == 0){\n    return { msg: [], metadata: metadata, msgType: msgType };\n}\n\nreturn { msg: newMsg, metadata: metadata, msgType: msgType };\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 900,
          "layoutY": 779
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Set storageDataPointsCount",
        "debugMode": false,
        "configuration": {
          "jsScript": "var key = 'tp.service.apiusage.storageDataPointsCount';\nvar metrics = [\n  {\n    name: key,\n    type: 'gauge',\n    value: msg.delta,\n    timestamp: Number(metadata.ts),\n    attributes: { 'service.name': metadata.serviceName, 'queue.name': metadata.queueName }\n  }\n];\n\nvar newMsg = [\n  {\n    metrics: metrics\n  }\n];\n\nif(!msg.delta || msg.delta == 0){\n    return { msg: [], metadata: metadata, msgType: msgType };\n}\n\nreturn { msg: newMsg, metadata: metadata, msgType: msgType };\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 902,
          "layoutY": 928
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Set emailCount",
        "debugMode": false,
        "configuration": {
          "jsScript": "var key = 'tp.service.apiusage.emailCount';\nvar queueName = 'apiusage';\nvar metrics = [\n  {\n    name: key,\n    type: 'gauge',\n    value: msg.delta,\n    timestamp: Number(metadata.ts),\n    attributes: { 'service.name': metadata.serviceName, 'queue.name': queueName }\n  }\n];\n\nvar newMsg = [\n  {\n    metrics: metrics\n  }\n];\n\nif(!msg.delta || msg.delta == 0){\n    return { msg: [], metadata: metadata, msgType: msgType };\n}\n\nreturn { msg: newMsg, metadata: metadata, msgType: msgType };\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 901,
          "layoutY": 1006
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Set smsCount",
        "debugMode": false,
        "configuration": {
          "jsScript": "var key = 'tp.service.apiusage.smsCount';\nvar metrics = [\n  {\n    name: key,\n    type: 'gauge',\n    value: msg.delta,\n    timestamp: Number(metadata.ts),\n    attributes: { 'service.name': metadata.serviceName, 'queue.name': metadata.queueName }\n  }\n];\n\nvar newMsg = [\n  {\n    metrics: metrics\n  }\n];\n\nif(!msg.delta || msg.delta == 0){\n    return { msg: [], metadata: metadata, msgType: msgType };\n}\n\nreturn { msg: newMsg, metadata: metadata, msgType: msgType };\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 902,
          "layoutY": 852
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Set createdAlarmsCount",
        "debugMode": false,
        "configuration": {
          "jsScript": "var key = 'tp.service.apiusage.createdAlarmsCount';\nvar metrics = [\n  {\n    name: key,\n    type: 'gauge',\n    value: msg.delta,\n    timestamp: Number(metadata.ts),\n    attributes: { 'service.name': metadata.serviceName, 'queue.name': metadata.queueName }\n  }\n];\n\nvar newMsg = [\n  {\n    metrics: metrics\n  }\n];\n\nif(!msg.delta || msg.delta == 0){\n    return { msg: [], metadata: metadata, msgType: msgType };\n}\n\nreturn { msg: newMsg, metadata: metadata, msgType: msgType };\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 629,
          "layoutY": 451
        },
        "type": "org.thingsboard.rule.engine.metadata.CalculateDeltaNode",
        "name": "Delta ruleEngineExecutionCount",
        "debugMode": false,
        "configuration": {
          "inputValueKey": "ruleEngineExecutionCount",
          "outputValueKey": "delta",
          "useCache": true,
          "addPeriodBetweenMsgs": true,
          "periodValueKey": "period",
          "round": null,
          "tellFailureIfDeltaIsNegative": true
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 1453,
          "layoutY": 725
        },
        "type": "org.thingsboard.rule.engine.rest.TbRestApiCallNode",
        "name": "To New Relic",
        "debugMode": false,
        "configuration": {
          "restEndpointUrlPattern": "https://metric-api.newrelic.com/metric/v1",
          "requestMethod": "POST",
          "useSimpleClientHttpFactory": true,
          "enableProxy": false,
          "useSystemProxyProperties": false,
          "proxyScheme": null,
          "proxyHost": null,
          "proxyPort": 0,
          "proxyUser": null,
          "proxyPassword": null,
          "readTimeoutMs": 0,
          "maxParallelRequestsCount": 0,
          "headers": {
            "Content-Type": "application/json",
            "Api-Key": "${APIKEY}"
          },
          "useRedisQueueForMsgPersistence": false,
          "trimQueue": false,
          "maxQueueSize": 0,
          "credentials": {
            "type": "anonymous"
          }
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 627,
          "layoutY": 529
        },
        "type": "org.thingsboard.rule.engine.metadata.CalculateDeltaNode",
        "name": "Delta jsExecutionCount",
        "debugMode": false,
        "configuration": {
          "inputValueKey": "jsExecutionCount",
          "outputValueKey": "delta",
          "useCache": true,
          "addPeriodBetweenMsgs": true,
          "periodValueKey": "period",
          "round": null,
          "tellFailureIfDeltaIsNegative": true
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 629,
          "layoutY": 680
        },
        "type": "org.thingsboard.rule.engine.metadata.CalculateDeltaNode",
        "name": "Delta transportDataPointsCount",
        "debugMode": false,
        "configuration": {
          "inputValueKey": "transportDataPointsCount",
          "outputValueKey": "delta",
          "useCache": true,
          "addPeriodBetweenMsgs": true,
          "periodValueKey": "period",
          "round": null,
          "tellFailureIfDeltaIsNegative": true
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 902,
          "layoutY": 603
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Set transportMsgCount",
        "debugMode": false,
        "configuration": {
          "jsScript": "var key = 'tp.service.apiusage.transportMsgCount';\nvar metrics = [\n  {\n    name: key,\n    type: 'gauge',\n    value: msg.delta,\n    timestamp: Number(metadata.ts),\n    attributes: { 'service.name': metadata.serviceName, 'queue.name': metadata.queueName }\n  }\n];\n\nvar newMsg = [\n  {\n    metrics: metrics\n  }\n];\n\nif(!msg.delta || msg.delta == 0){\n    return { msg: [], metadata: metadata, msgType: msgType };\n}\n\nreturn { msg: newMsg, metadata: metadata, msgType: msgType };\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 627,
          "layoutY": 604
        },
        "type": "org.thingsboard.rule.engine.metadata.CalculateDeltaNode",
        "name": "Delta transportMsgCount",
        "debugMode": false,
        "configuration": {
          "inputValueKey": "transportMsgCount",
          "outputValueKey": "delta",
          "useCache": true,
          "addPeriodBetweenMsgs": true,
          "periodValueKey": "period",
          "round": null,
          "tellFailureIfDeltaIsNegative": true
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 330,
          "layoutY": 730
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Set Data",
        "debugMode": false,
        "configuration": {
          "jsScript": "var newMsg = {};\nfor (var i in msg) {\n  newMsg[i] = msg[i][0].value;\n}\nreturn {\n  msg: newMsg,\n  metadata: metadata,\n  msgType: msgType\n};\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 610,
          "layoutY": 230
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Set Message",
        "debugMode": false,
        "configuration": {
          "jsScript": "var prefix = 'tp.service.queue.';\nvar keyList = {\n  totalMsgs: { key: 'totalMsgs', type: 'gauge' },\n  successfulMsgs: { key: 'successfulMsgs', type: 'gauge' },\n  timeoutMsgs: { key: 'timeoutMsgs', type: 'gauge' },\n  failedMsgs: { key: 'failedMsgs', type: 'gauge' },\n  tmpTimeout: { key: 'tmpTimeout', type: 'gauge' },\n  tmpFailed: { key: 'tmpFailed', type: 'gauge' }\n};\nvar metrics = [];\n\nfor (var i in keyList) {\n  if (metadata.hasOwnProperty(i)) {\n    var data = JSON.parse(metadata[i]);\n    if (data.value != 0) {\n      metrics.push({\n        name: prefix + keyList[i].key,\n        type: keyList[i].type,\n        value: data.value,\n        timestamp: data.ts,\n        attributes: { 'service.name': metadata.serviceName, 'queue.name': metadata.queueName }\n      });\n    }\n  }\n}\n\nvar newMsg = [\n  {\n    metrics: metrics\n  }\n];\n\nreturn { msg: newMsg, metadata: metadata, msgType: msgType };\n"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 879,
          "layoutY": 226
        },
        "type": "org.thingsboard.rule.engine.rest.TbRestApiCallNode",
        "name": "To New Relic",
        "debugMode": false,
        "configuration": {
          "restEndpointUrlPattern": "https://metric-api.newrelic.com/metric/v1",
          "requestMethod": "POST",
          "useSimpleClientHttpFactory": true,
          "enableProxy": false,
          "useSystemProxyProperties": false,
          "proxyScheme": null,
          "proxyHost": null,
          "proxyPort": 0,
          "proxyUser": null,
          "proxyPassword": null,
          "readTimeoutMs": 0,
          "maxParallelRequestsCount": 0,
          "headers": {
            "Content-Type": "application/json",
            "Api-Key": "${APIKEY}"
          },
          "useRedisQueueForMsgPersistence": false,
          "trimQueue": false,
          "maxQueueSize": 0,
          "credentials": {
            "type": "anonymous"
          }
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 52,
          "layoutY": 729
        },
        "type": "org.thingsboard.rule.engine.rest.TbRestApiCallNode",
        "name": "Get API Usage State Data",
        "debugMode": false,
        "configuration": {
          "restEndpointUrlPattern": "http://localhost:8080/api/plugins/telemetry/API_USAGE_STATE/${entityId}/values/timeseries",
          "requestMethod": "GET",
          "useSimpleClientHttpFactory": true,
          "enableProxy": false,
          "useSystemProxyProperties": false,
          "proxyScheme": null,
          "proxyHost": null,
          "proxyPort": 0,
          "proxyUser": null,
          "proxyPassword": null,
          "readTimeoutMs": 0,
          "maxParallelRequestsCount": 0,
          "headers": {
            "Content-Type": "application/json",
            "X-Authorization": "Bearer ${jwtToken}"
          },
          "useRedisQueueForMsgPersistence": false,
          "trimQueue": false,
          "maxQueueSize": 0,
          "credentials": {
            "type": "anonymous"
          }
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 52,
          "layoutY": 626
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Set API Usage State Id",
        "debugMode": false,
        "configuration": {
          "jsScript": "metadata.entityId = msg.data[0].entityId.id\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 51,
          "layoutY": 426
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetTenantAttributeNode",
        "name": "Get JWT Token",
        "debugMode": false,
        "configuration": {
          "telemetry": false,
          "attrMapping": {
            "token": "jwtToken"
          }
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 53,
          "layoutY": 328
        },
        "type": "org.thingsboard.rule.engine.debug.TbMsgGeneratorNode",
        "name": "API Usage State",
        "debugMode": false,
        "configuration": {
          "msgCount": 0,
          "periodInSeconds": 60,
          "useEndtime": true,
          "endTime": "00:00:00",
          "jsScript": "var now = new Date();\nnow.setSeconds(0);\nnow.setMilliseconds(0);\n\nvar msg = {\n  entityFilter: {\n    type: 'apiUsageState',\n    resolveMultiple: false\n  },\n  pageLink: {\n    pageSize: 1,\n    page: 0\n  }\n};\nvar metadata = {\n  serviceName: 'moldmecca',\n  queueName: 'apiusage',\n  ts: now.getTime(),\n  period: 90000,\n  APIKEY: '0435b818745023b35f057ee93db22941f927NRAL'\n};\nvar msgType = 'POST_TELEMETRY_REQUEST';\n\nreturn {\n  msg: msg,\n  metadata: metadata,\n  msgType: msgType\n};\n",
          "originatorId": "08a3e6b0-96f0-11ed-8d0d-21e1d787e420",
          "originatorType": "TENANT"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 52,
          "layoutY": 528
        },
        "type": "org.thingsboard.rule.engine.rest.TbRestApiCallNode",
        "name": "Get API Usage State",
        "debugMode": false,
        "configuration": {
          "restEndpointUrlPattern": "http://localhost:8080/api/entitiesQuery/find",
          "requestMethod": "POST",
          "useSimpleClientHttpFactory": true,
          "enableProxy": false,
          "useSystemProxyProperties": false,
          "proxyScheme": null,
          "proxyHost": null,
          "proxyPort": 0,
          "proxyUser": null,
          "proxyPassword": null,
          "readTimeoutMs": 0,
          "maxParallelRequestsCount": 0,
          "headers": {
            "Content-Type": "application/json",
            "X-Authorization": "Bearer ${jwtToken}"
          },
          "useRedisQueueForMsgPersistence": false,
          "trimQueue": false,
          "maxQueueSize": 0,
          "credentials": {
            "type": "anonymous"
          }
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 56,
          "layoutY": 232
        },
        "type": "org.thingsboard.rule.engine.debug.TbMsgGeneratorNode",
        "name": "Main_tb-node-0",
        "debugMode": false,
        "configuration": {
          "msgCount": 0,
          "periodInSeconds": 60,
          "useEndtime": true,
          "endTime": "00:00:00",
          "jsScript": "var now = new Date();\nnow.setSeconds(0);\nnow.setMilliseconds(0);\n\nvar msg = {};\nvar metadata = {\n  serviceName: 'moldmecca',\n  queueName: 'Main_tb-node-0',\n  ts: now.getTime(),\n  APIKEY: '0435b818745023b35f057ee93db22941f927NRAL'\n};\nvar msgType = 'POST_TELEMETRY_REQUEST';\n\nreturn { msg: msg, metadata: metadata, msgType: msgType };\n",
          "originatorId": "1bd450d0-96f0-11ed-8d0d-21e1d787e420",
          "originatorType": "ASSET"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 327,
          "layoutY": 231
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "Get Telemetry",
        "debugMode": false,
        "configuration": {
          "tellFailureIfAbsent": false,
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [],
          "latestTsKeyNames": [
            "totalMsgs",
            "failedMsgs",
            "timeoutMsgs",
            "tmpFailed",
            "tmpTimeout",
            "successfulMsgs",
            "ruleEngineException"
          ],
          "getLatestValueWithTs": true
        }
      }
    ],
    "connections": [
      {
        "fromIndex": 1,
        "toIndex": 3,
        "type": "Success"
      },
      {
        "fromIndex": 2,
        "toIndex": 1,
        "type": "Success"
      },
      {
        "fromIndex": 3,
        "toIndex": 4,
        "type": "Success"
      },
      {
        "fromIndex": 4,
        "toIndex": 0,
        "type": "Success"
      },
      {
        "fromIndex": 6,
        "toIndex": 7,
        "type": "Success"
      },
      {
        "fromIndex": 7,
        "toIndex": 8,
        "type": "Success"
      },
      {
        "fromIndex": 8,
        "toIndex": 10,
        "type": "Success"
      },
      {
        "fromIndex": 9,
        "toIndex": 5,
        "type": "Success"
      },
      {
        "fromIndex": 10,
        "toIndex": 9,
        "type": "Success"
      },
      {
        "fromIndex": 11,
        "toIndex": 24,
        "type": "True"
      },
      {
        "fromIndex": 12,
        "toIndex": 19,
        "type": "Success"
      },
      {
        "fromIndex": 13,
        "toIndex": 20,
        "type": "Success"
      },
      {
        "fromIndex": 14,
        "toIndex": 21,
        "type": "Success"
      },
      {
        "fromIndex": 15,
        "toIndex": 22,
        "type": "Success"
      },
      {
        "fromIndex": 16,
        "toIndex": 11,
        "type": "Success"
      },
      {
        "fromIndex": 17,
        "toIndex": 11,
        "type": "Success"
      },
      {
        "fromIndex": 18,
        "toIndex": 11,
        "type": "Success"
      },
      {
        "fromIndex": 19,
        "toIndex": 11,
        "type": "Success"
      },
      {
        "fromIndex": 20,
        "toIndex": 11,
        "type": "Success"
      },
      {
        "fromIndex": 21,
        "toIndex": 11,
        "type": "Success"
      },
      {
        "fromIndex": 22,
        "toIndex": 11,
        "type": "Success"
      },
      {
        "fromIndex": 23,
        "toIndex": 17,
        "type": "Success"
      },
      {
        "fromIndex": 25,
        "toIndex": 16,
        "type": "Success"
      },
      {
        "fromIndex": 26,
        "toIndex": 18,
        "type": "Success"
      },
      {
        "fromIndex": 27,
        "toIndex": 11,
        "type": "Success"
      },
      {
        "fromIndex": 28,
        "toIndex": 27,
        "type": "Success"
      },
      {
        "fromIndex": 29,
        "toIndex": 28,
        "type": "Success"
      },
      {
        "fromIndex": 29,
        "toIndex": 23,
        "type": "Success"
      },
      {
        "fromIndex": 29,
        "toIndex": 25,
        "type": "Success"
      },
      {
        "fromIndex": 29,
        "toIndex": 26,
        "type": "Success"
      },
      {
        "fromIndex": 29,
        "toIndex": 12,
        "type": "Success"
      },
      {
        "fromIndex": 29,
        "toIndex": 13,
        "type": "Success"
      },
      {
        "fromIndex": 29,
        "toIndex": 15,
        "type": "Success"
      },
      {
        "fromIndex": 30,
        "toIndex": 31,
        "type": "Success"
      },
      {
        "fromIndex": 32,
        "toIndex": 29,
        "type": "Success"
      },
      {
        "fromIndex": 33,
        "toIndex": 32,
        "type": "Success"
      },
      {
        "fromIndex": 34,
        "toIndex": 36,
        "type": "Success"
      },
      {
        "fromIndex": 35,
        "toIndex": 34,
        "type": "Success"
      },
      {
        "fromIndex": 36,
        "toIndex": 33,
        "type": "Success"
      },
      {
        "fromIndex": 37,
        "toIndex": 38,
        "type": "Success"
      },
      {
        "fromIndex": 38,
        "toIndex": 30,
        "type": "Success"
      }
    ],
    "ruleChainConnections": null
  }
}