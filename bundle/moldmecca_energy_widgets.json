{
  "widgetsBundle": {
    "alias": "moldmecca_energy_widgets",
    "title": "Moldmecca Energy Widgets",
    "image": null,
    "description": null
  },
  "widgetTypes": [
    {
      "alias": "power_usage_card",
      "name": "Power Usage Card",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 4,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"start center\">\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\">\n    <section class=\"widget-header-left-section\" fxFlex=\"100\" fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\">{{title}}</div>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex=\"100\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <span class=\"widget-date\">{{today}} 기준</span>\n    </section>\n  </header>\n  <main class=\"widget-content\">\n    <section class=\"card-section\" fxLayout=\"column\">\n      <div\n        class=\"card-container\"\n        fxFlex\n        fxLayout=\"column\"\n        fxLayoutAlign=\"center stretch\"\n        fxLayoutGap=\"0.5em\"\n        *ngFor=\"let card of cardList\"\n      >\n        <div class=\"card-label-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.4em\">\n          <label class=\"card-label\">{{card.label}}</label>\n          <i\n            class=\"card-info material-icons tooltip-{{card.index}}\"\n            [ngClass]=\"{'tooltip-active' : loaded(card)}\"\n            *ngIf=\"card.info\"\n            >info</i\n          >\n        </div>\n        <div class=\"card-value-box\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\">\n          <div class=\"card-left\" fxLayoutAlign=\"start end\" fxLayoutGap=\"0.2em\">\n            <div class=\"card-value\">{{card.value}}</div>\n            <div class=\"card-unit\">{{card.unit}}</div>\n          </div>\n          <div class=\"card-right\" fxLayout=\"column\" fxLayoutAlign=\"center end\" fxLayoutGap=\"0.2em\">\n            <label class=\"card-sub-label\">{{card.compareLabel}}</label>\n            <div class=\"card-compare-box\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.5em\">\n              <div class=\"card-compare-direction\" [ngClass]=\"card.compareDirection\"></div>\n              <span class=\"card-compare-value\">{{card.comparePercentage}}%</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  </main>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n  white-space: nowrap;\n  letter-spacing: var(--tb-config-letter-spacing);\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n  border-bottom: 1px solid var(--tb-service-border-0);\n}\n/* widget-header-right-section */\n.widget-header-right-section .widget-date {\n  font-size: 1.2em;\n  font-weight: 500;\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n}\n/*\n  Widget Content Area\n*/\n\nmain.widget-content {\n  width: 100%;\n}\n\n/* card-section */\nsection.card-section {\n  width: 100%;\n  height: 100%;\n}\n.card-section .card-container {\n  width: 100%;\n  border-bottom: 1px solid var(--tb-service-border-1);\n  padding: 0px var(--tb-config-padding);\n}\n.card-section .card-container:last-child {\n  border-bottom: none;\n}\n.card-section .card-label {\n  font-size: 1.4em;\n  color: var(--tb-service-font-3);\n}\n.card-section .card-info {\n  font-size: 1.6em;\n  color: var(--tb-service-font-3);\n}\n.card-section .card-value {\n  font-size: 2.8em;\n  color: var(--tb-service-font-5);\n}\n.card-section .card-unit {\n  font-size: 2em;\n  color: var(--tb-service-font-5);\n  line-height: 1.4;\n}\n.card-section .card-sub-label {\n  font-size: 1.2em;\n  color: var(--tb-service-font-2);\n}\n.card-section .card-compare-direction.low {\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.6em solid var(--tb-service-compare-low);\n}\n.card-section .card-compare-direction.high {\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-bottom: 0.6em solid var(--tb-service-compare-high);\n}\n.card-section .card-compare-value {\n  font-size: 1.4em;\n  color: var(--tb-service-font-5);\n}\n",
        "controllerScript": "const STANDARD_WINDOW_SIZE = 1920 / 100;\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $container } = self.ctx;\n  defineVariables();\n  setTitle();\n  getDashboardParameter();\n  setTimeValue();\n  let target = createTooltip({ title: '금주', description: t('thingplus.help.tooltip-this-week') });\n\n  self.onResize();\n  if (!custom.isSample) {\n    custom.mainData = await loadData();\n    preprocessData();\n  }\n\n  self.ctx.detectChanges();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.onDataUpdated = function () {};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n  custom.$widgetContent = $('.widget-content', $container);\n\n  $scope.cardList = [\n    {\n      index: 0,\n      label: t('thingplus.time-format.today'),\n      value: 0,\n      unit: 'Wh',\n      compareLabel: t('thingplus.energy.compare-last-day'),\n      compareDirection: '',\n      comparePercentage: 0,\n    },\n    {\n      index: 1,\n      label: t('thingplus.time-format.this-week'),\n      description: t('thingplus.help.tooltip-this-week'),\n      value: 0,\n      unit: 'Wh',\n      compareLabel: t('thingplus.energy.compare-last-week'),\n      compareDirection: '',\n      comparePercentage: 0,\n      info: true,\n    },\n    {\n      index: 2,\n      label: t('thingplus.time-format.this-month'),\n      description: t('thingplus.help.tooltip-this-month'),\n      value: 0,\n      unit: 'Wh',\n      compareLabel: t('thingplus.energy.compare-last-month'),\n      compareDirection: '',\n      comparePercentage: 0,\n      info: true,\n    },\n  ];\n  $scope.loaded = function (card) {\n    if (card.index == 1) {\n      card.startDate = moment(custom.searchBase).startOf('isoWeek').format(t('thingplus.time-format.md-str'));\n      card.endDate = moment(custom.searchBase).endOf('isoWeek').format(t('thingplus.time-format.md-str'));\n    }\n    if (card.index == 2) {\n      card.startDate = moment(custom.searchBase).startOf('month').format(t('thingplus.time-format.md-str'));\n      card.endDate = moment(custom.searchBase).endOf('month').format(t('thingplus.time-format.md-str'));\n    }\n    $(`.tooltip-${card.index}`, $container).tooltipster({\n      content: createTooltip(card),\n      interactive: true,\n      theme: 'tooltipster-transparent',\n      trigger: 'hover',\n      position: 'right',\n    });\n    return true;\n  };\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.hiddenDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.ownerDatasource.entityAliasId);\n  custom.mainDatasources = self.ctx.datasources.filter(x => x.entityAliasId !== custom.ownerDatasource.entityAliasId);\n  custom.t = t;\n  custom.searchBase = moment().valueOf();\n\n  $scope.today = moment(custom.searchBase).format(t('thingplus.time-format.ymdhm'));\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom, $scope } = self.ctx;\n  $scope.title = t(self.ctx.widget.config.title);\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction getDashboardParameter() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) {\n    custom.dashboardParams = {};\n    return;\n  }\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n  if (custom.dashboardParams) {\n    if (custom.dashboardParams.basicTs) {\n      custom.searchBase = custom.dashboardParams.basicTs;\n    }\n    $scope.today = moment(custom.searchBase).format(t('thingplus.time-format.ymdhm'));\n  }\n}\n\nfunction setTimeValue() {\n  let { custom } = self.ctx;\n  let currentDate = moment(custom.searchBase).date();\n  let prevMaxDate = moment(custom.searchBase).startOf('month').subtract(1, 'hours').date();\n  let targetDate = currentDate > prevMaxDate ? prevMaxDate : currentDate;\n  custom.timeInfo = {\n    current: [\n      {\n        start: moment(custom.searchBase).startOf('day').valueOf(),\n        end: custom.searchBase,\n      },\n      {\n        start: moment(custom.searchBase).startOf('isoWeek').valueOf(),\n        end: custom.searchBase,\n      },\n      {\n        start: moment(custom.searchBase).startOf('month').valueOf(),\n        end: custom.searchBase,\n      },\n    ],\n    previous: [\n      {\n        start: moment(custom.searchBase).subtract(1, 'days').startOf('day').valueOf(),\n        end: custom.searchBase - 86400000,\n      },\n      {\n        start: moment(custom.searchBase).subtract(1, 'weeks').startOf('isoWeek').valueOf(),\n        end: custom.searchBase - 7 * 86400000,\n      },\n      {\n        start: moment(custom.searchBase).subtract(1, 'months').startOf('month').valueOf(),\n        end: moment(custom.searchBase).subtract(1, 'months').startOf('month').date(targetDate).valueOf(),\n      },\n    ],\n  };\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  let widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (widgetFontSize < 6.25) {\n    widgetFontSize = 6.25;\n  }\n  custom.$widget.css('font-size', `${widgetFontSize}px`);\n\n  // Header Height를 제외한 영역을 Main의 Height로 설정\n  let headerHeight = custom.$widgetHeader.outerHeight(true);\n  custom.$widgetContent.css('height', `calc(100% - ${headerHeight}px)`);\n}\n\nfunction loadData() {\n  let { custom } = self.ctx;\n  return new Promise(resolve => {\n    let entityId = custom.mainDatasources[0].entity.id;\n    let key = 'TP_TotalPowerUsageRaw';\n    let interval = 34 * 24 * 60 * 60 * 1000;\n    let observables = [];\n    for (let ts = custom.timeInfo.previous[2].start; ts < custom.timeInfo.current[2].end; ts += interval) {\n      observables.push(\n        self.ctx.http.get(\n          `/api/plugins/telemetry/${entityId.entityType}/${\n            entityId.id\n          }/values/timeseries?limit=50000&agg=NONE&keys=${key}&startTs=${ts}&endTs=${\n            ts + interval\n          }&useStrictDataTypes=true`\n        )\n      );\n    }\n\n    self.ctx.rxjs.forkJoin(observables).subscribe(datas => {\n      let result = [];\n      for (let i in datas) {\n        if (datas[i][key]) {\n          result = result.concat(datas[i][key]);\n        }\n      }\n      resolve(result);\n    });\n  });\n}\n\nfunction preprocessData() {\n  let { custom, $scope } = self.ctx;\n  let mainData = {};\n  for (let i in custom.timeInfo) {\n    let newData = [];\n    for (let j in custom.timeInfo[i]) {\n      if (custom.mainData) {\n        let target = custom.mainData\n          .filter(x => x.ts >= custom.timeInfo[i][j].start && x.ts <= custom.timeInfo[i][j].end)\n          .map(x => x.value);\n        newData.push(target.reduce((acc, value) => acc + value, 0));\n      }\n    }\n    mainData[i] = newData;\n  }\n\n  for (let i in $scope.cardList) {\n    if (mainData.current[i] > 1000000) {\n      $scope.cardList[i].value = _.round(mainData.current[i] / 1000000, 3);\n      $scope.cardList[i].unit = 'MWh';\n    } else if (mainData.current[i] > 1000) {\n      $scope.cardList[i].value = _.round(mainData.current[i] / 1000, 3);\n      $scope.cardList[i].unit = 'kWh';\n    } else {\n      $scope.cardList[i].value = _.round(mainData.current[i], 3);\n      $scope.cardList[i].unit = 'Wh';\n    }\n\n    if (mainData.current[i] > mainData.previous[i]) {\n      $scope.cardList[i].compareDirection = 'high';\n    } else if (mainData.current[i] < mainData.previous[i]) {\n      $scope.cardList[i].compareDirection = 'low';\n    } else {\n      $scope.cardList[i].compareDirection = '';\n    }\n\n    if (mainData.previous[i] == 0) {\n      $scope.cardList[i].comparePercentage = 0;\n      $scope.cardList[i].compareDirection = '';\n    } else {\n      $scope.cardList[i].comparePercentage = _.round(\n        (Math.abs(mainData.current[i] - mainData.previous[i]) / mainData.previous[i]) * 100,\n        1\n      );\n    }\n  }\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n\nfunction createTooltip(data) {\n  let $content = $('<div></div>').css({\n    color: 'var(--tb-service-font-0)',\n    backgroundColor: 'rgba(25,25,25,0.9)',\n    lineHeight: 1.5,\n    width: `${268 / STANDARD_WINDOW_SIZE}vw`,\n    padding: `${16 / STANDARD_WINDOW_SIZE}vw`,\n    borderRadius: `${8 / STANDARD_WINDOW_SIZE}vw`,\n  });\n\n  let $title = $(`<div>${data.label}</div>`).css({\n    fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n    fontWeight: 'bold',\n    paddingBottom: `${10 / STANDARD_WINDOW_SIZE}vw`,\n  });\n\n  let $description = $(`<div>${data.description}</div>`).css({\n    fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n    color: 'var(--tb-service-font-2)',\n    paddingBottom: `${10 / STANDARD_WINDOW_SIZE}vw`,\n    borderBottom: '1px solid rgba(255,255,255,0.2)',\n  });\n\n  let $rangeBox = $('<div></div>').css({\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingTop: `${10 / STANDARD_WINDOW_SIZE}vw`,\n  });\n\n  let $rangeLabel = $(`<div>${t('thingplus.label.apply-range')}</div>`).css({\n    fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n    color: 'var(--tb-service-font-2)',\n  });\n\n  let $rangeValue = $(`<div>${data.startDate} ~ ${data.endDate}</div>`).css({\n    fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n  });\n\n  $rangeBox.append($rangeLabel);\n  $rangeBox.append($rangeValue);\n\n  $content.append($title);\n  $content.append($description);\n  $content.append($rangeBox);\n\n  return $content;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"Power Usage Card\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\",\"box-shadow\":\"0px 2px 10px 0 rgba(0, 0, 0, 0.04)\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"1.6em\",\"font-weight\":500,\"letter-spacing\":\"var(--tb-config-letter-spacing)\",\"color\":\"var(--tb-service-font-5)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    },
    {
      "alias": "maximum_power_card",
      "name": "Maximum Power Card",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 6,
        "sizeY": 6,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"start center\">\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\">\n    <section class=\"widget-header-left-section\" fxFlex=\"100\" fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\">{{title}}</div>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex=\"100\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <span class=\"widget-date\">{{today}} 기준</span>\n    </section>\n  </header>\n  <main class=\"widget-content\">\n    <section class=\"card-section\" fxLayout=\"column\">\n      <div\n        class=\"card-container\"\n        fxFlex\n        fxLayout=\"column\"\n        fxLayoutAlign=\"center stretch\"\n        fxLayoutGap=\"0.5em\"\n        *ngFor=\"let card of cardList\"\n      >\n        <label class=\"card-label\">{{card.label}}</label>\n        <div class=\"card-value-box\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\">\n          <div class=\"card-left\" fxLayoutAlign=\"start end\" fxLayoutGap=\"0.2em\">\n            <div class=\"card-value\">{{card.value}}</div>\n            <div class=\"card-unit\">{{card.unit}}</div>\n          </div>\n          <div class=\"card-right\" fxLayout=\"column\" fxLayoutAlign=\"center end\" fxLayoutGap=\"0.2em\">\n            <div class=\"card-date\">{{card.date}}</div>\n            <div class=\"card-time\">{{card.time}}</div>\n          </div>\n        </div>\n      </div>\n    </section>\n  </main>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n  white-space: nowrap;\n  letter-spacing: var(--tb-config-letter-spacing);\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n  border-bottom: 1px solid var(--tb-service-border-0);\n}\n/* widget-header-right-section */\n.widget-header-right-section .widget-date {\n  font-size: 1.2em;\n  font-weight: 500;\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n}\n/*\n  Widget Content Area\n*/\n\nmain.widget-content {\n  width: 100%;\n}\n\n/* card-section */\nsection.card-section {\n  width: 100%;\n  height: 100%;\n}\n.card-section .card-container {\n  width: 100%;\n  border-bottom: 1px solid var(--tb-service-border-1);\n  padding: 0px var(--tb-config-padding);\n}\n.card-section .card-container:last-child {\n  border-bottom: none;\n}\n.card-section .card-label {\n  font-size: 1.4em;\n  color: var(--tb-service-font-3);\n}\n.card-section .card-value {\n  font-size: 2.8em;\n  color: var(--tb-service-font-5);\n}\n.card-section .card-unit {\n  font-size: 2em;\n  color: var(--tb-service-font-5);\n  line-height: 1.4;\n}\n.card-section .card-date,\n.card-section .card-time {\n  font-size: 1.2em;\n  color: var(--tb-service-font-4);\n}\n",
        "controllerScript": "self.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom } = self.ctx;\n  defineVariables();\n  setTitle();\n  getDashboardParameter();\n  setTimeValue();\n  self.onResize();\n  if (!custom.isSample) {\n    custom.mainData = await loadData();\n    preprocessData();\n  }\n\n  self.ctx.detectChanges();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.onDataUpdated = function () {};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n  custom.$widgetContent = $('.widget-content', $container);\n\n  $scope.cardList = [\n    {\n      label: t('thingplus.energy.day-peak'),\n      value: 0,\n      unit: 'W',\n      date: '-',\n      time: '-',\n    },\n    {\n      label: t('thingplus.energy.month-peak'),\n      value: 0,\n      unit: 'W',\n      date: '-',\n      time: '-',\n    },\n    {\n      label: t('thingplus.energy.year-peak'),\n      value: 0,\n      unit: 'W',\n      date: '-',\n      time: '-',\n    },\n  ];\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.hiddenDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.ownerDatasource.entityAliasId);\n  custom.mainDatasources = self.ctx.datasources.filter(x => x.entityAliasId !== custom.ownerDatasource.entityAliasId);\n  custom.t = t;\n  custom.searchBase = moment().valueOf();\n\n  $scope.today = moment(custom.searchBase).format(t('thingplus.time-format.ymdhm'));\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom, $scope } = self.ctx;\n  $scope.title = t(self.ctx.widget.config.title);\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction getDashboardParameter() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) {\n    custom.dashboardParams = {};\n    return;\n  }\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n  if (custom.dashboardParams) {\n    if (custom.dashboardParams.basicTs) {\n      custom.searchBase = custom.dashboardParams.basicTs;\n    }\n    $scope.today = moment(custom.searchBase).format(t('thingplus.time-format.ymdhm'));\n  }\n}\n\nfunction setTimeValue() {\n  let { custom } = self.ctx;\n  custom.timeInfo = [\n    {\n      start: moment(custom.searchBase).startOf('day').valueOf(),\n      end: custom.searchBase,\n    },\n    {\n      start: moment(custom.searchBase).startOf('month').valueOf(),\n      end: custom.searchBase,\n    },\n    {\n      start: moment(custom.searchBase).startOf('year').valueOf(),\n      end: custom.searchBase,\n    },\n  ];\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  let widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (widgetFontSize < 6.25) {\n    widgetFontSize = 6.25;\n  }\n  custom.$widget.css('font-size', `${widgetFontSize}px`);\n\n  // Header Height를 제외한 영역을 Main의 Height로 설정\n  let headerHeight = custom.$widgetHeader.outerHeight(true);\n  custom.$widgetContent.css('height', `calc(100% - ${headerHeight}px)`);\n}\n\nfunction loadData() {\n  let { custom } = self.ctx;\n  return new Promise(resolve => {\n    let entityId = custom.mainDatasources[0].entity.id;\n    self.ctx.http\n      .get(\n        `/api/plugins/telemetry/${entityId.entityType}/${entityId.id}/values/timeseries?limit=50000&agg=NONE&keys=TP_PowerPeakDay&startTs=${custom.timeInfo[2].start}&endTs=${custom.timeInfo[2].end}&useStrictDataTypes=true`\n      )\n      .subscribe(datas => {\n        // Day기준 일,월,연 최대값 검색\n        let mainData = {};\n        for (let i in custom.timeInfo) {\n          if (datas.TP_PowerPeakDay) {\n            let target = datas.TP_PowerPeakDay.filter(\n              x => x.ts >= custom.timeInfo[i].start && x.ts <= custom.timeInfo[i].end\n            );\n            let result = target.reduce(\n              (acc, value) => {\n                if (value.value >= acc.value) {\n                  return value;\n                } else {\n                  return acc;\n                }\n              },\n              { ts: 0, value: 0 }\n            );\n            mainData[i] = result;\n          }\n        }\n        // Raw기준 일,월,연 최대값 검색\n        let observable = [];\n        for (let i in mainData) {\n          let start = moment(mainData[i].ts).startOf('day').valueOf();\n          let end = moment(mainData[i].ts).endOf('day').valueOf();\n          observable.push(\n            self.ctx.http.get(\n              `/api/plugins/telemetry/${entityId.entityType}/${entityId.id}/values/timeseries?limit=50000&agg=NONE&keys=TP_PowerPeakRaw&startTs=${start}&endTs=${end}&useStrictDataTypes=true`\n            )\n          );\n        }\n        self.ctx.rxjs.forkJoin(observable).subscribe(datas => {\n          let mainData = {};\n          for (let i in datas) {\n            if (datas[i].TP_PowerPeakRaw) {\n              let result = datas[i].TP_PowerPeakRaw.reduce(\n                (acc, value) => {\n                  if (value.value >= acc.value) {\n                    return value;\n                  } else {\n                    return acc;\n                  }\n                },\n                { ts: 0, value: 0 }\n              );\n              mainData[i] = result;\n            }\n          }\n\n          resolve(mainData);\n        });\n      });\n  });\n}\n\nfunction preprocessData() {\n  let { custom, $scope } = self.ctx;\n  let mainData = custom.mainData;\n\n  for (let i in $scope.cardList) {\n    if (mainData[i]) {\n      if (mainData[i].value > 1000) {\n        $scope.cardList[i].value = _.round(mainData[i].value / 1000, 3);\n        $scope.cardList[i].unit = 'kW';\n      } else {\n        $scope.cardList[i].value = _.round(mainData[i].value, 3);\n        $scope.cardList[i].unit = 'W';\n      }\n      if (mainData[i].ts != 0) {\n        $scope.cardList[i].date = moment(mainData[i].ts).format(t('thingplus.time-format.ymd'));\n        $scope.cardList[i].time = moment(mainData[i].ts).format(t('thingplus.time-format.hms'));\n      }\n    }\n  }\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"Maximum Power Card\",\"showTitleIcon\":false,\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\",\"box-shadow\":\"0px 2px 10px 0 rgba(0, 0, 0, 0.04)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false,\"titleTooltip\":\"\",\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"1.6em\",\"font-weight\":500,\"letter-spacing\":\"var(--tb-config-letter-spacing)\",\"color\":\"var(--tb-service-font-5)\"}}"
      }
    },
    {
      "alias": "power_usage_chart",
      "name": "Power Usage Chart",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"start center\">\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\">\n    <section class=\"widget-header-left-section\" fxFlex=\"100\" fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\" translate>title</div>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex=\"100\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <div class=\"range-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n        <button class=\"range-btn\" (click)=\"selectRange('WEEKLY')\" [ngClass]=\"{'active': range == 'WEEKLY'}\" translate>\n          thingplus.time-format.weekly\n        </button>\n        <button class=\"range-btn\" (click)=\"selectRange('DAILY')\" [ngClass]=\"{'active': range == 'DAILY'}\" translate>\n          thingplus.time-format.daily\n        </button>\n        <button class=\"range-btn\" (click)=\"selectRange('MONTHLY')\" [ngClass]=\"{'active': range == 'MONTHLY'}\" translate>\n          thingplus.time-format.monthly\n        </button>\n      </div>\n    </section>\n  </header>\n  <main class=\"widget-content\">\n    <section class=\"chart-section\">\n      <canvas class=\"chart\"></canvas>\n    </section>\n  </main>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n  white-space: nowrap;\n  letter-spacing: var(--tb-config-letter-spacing);\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  padding: 0em var(--tb-config-padding);\n  border-bottom: 1px solid var(--tb-service-border-0);\n}\n/* widget-header-right-section */\n.widget-header-right-section .range-btn {\n  all: unset;\n  cursor: pointer;\n  font-size: 1.4em;\n  color: var(--tb-service-font-3);\n  padding: calc(var(--tb-config-padding) / 1.4) 0em;\n  border-bottom: 0.2em solid transparent;\n  transition-property: border-color, color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .range-btn.active {\n  border-color: var(--tb-service-accent);\n  color: var(--tb-service-font-5);\n}\n.widget-header-right-section .range-btn:not(.active):hover {\n  color: var(--tb-service-font-4);\n}\n\n/*\n  Widget Content Area\n*/\nmain.widget-content {\n  width: 100%;\n  padding: var(--tb-config-padding);\n}\n\n/* chart-section */\n.chart-section {\n  width: 100%;\n  height: 100%;\n}\n.chart-section .chart-box {\n  width: 100%;\n  height: 100%;\n}\n",
        "controllerScript": "const WEEKDAY = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\nconst DAY_MS = 86400000;\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  custom.dashboardParams = getDashboardParameter();\n  setRange($scope.range);\n  self.onResize();\n  custom.mainData = await loadData();\n  setData();\n  createDataset();\n  createChart();\n  custom.chart.update();\n  self.ctx.detectChanges();\n  self.onResize();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.onDataUpdated = function () {};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n  custom.$widgetContent = $('.widget-content', $container);\n  custom.$chart = $('.chart', $container);\n\n  $scope.range = 'WEEKLY';\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.hiddenDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.ownerDatasource.entityAliasId);\n  custom.mainDatasources = self.ctx.datasources.filter(x => x.entityAliasId !== custom.ownerDatasource.entityAliasId);\n  custom.isInitialize = false;\n  custom.t = t;\n  custom.widgetFontSize = calcualteFontSize();\n  custom.basicTs = moment().valueOf();\n  custom.computedStyle = getComputedStyle($container[0]);\n  custom.chartLabels = [];\n  custom.chartData = [[], [], []];\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom, $scope } = self.ctx;\n  custom.$widgetTitle.text(t(self.ctx.widget.config.title));\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope } = self.ctx;\n  $scope.selectRange = async function (range) {\n    setRange(range);\n    setData();\n    custom.chart.update();\n    self.ctx.detectChanges();\n  };\n}\n\nfunction getDashboardParameter() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) {\n    custom.dashboardParams = {};\n    return;\n  }\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n  if (custom.dashboardParams) {\n    if (custom.dashboardParams.basicTs) {\n      custom.basicTs = custom.dashboardParams.basicTs;\n    }\n  }\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  custom.widgetFontSize = calcualteFontSize();\n  custom.$widget.css('font-size', `${custom.widgetFontSize}px`);\n\n  // Header Height를 제외한 영역을 Main의 Height로 설정\n  let headerHeight = custom.$widgetHeader.outerHeight(true);\n  custom.$widgetContent.css('height', `calc(100% - ${headerHeight}px)`);\n\n  if (custom.chart) {\n    custom.chart.options.scales.xAxes[0].ticks.fontSize = custom.widgetFontSize * 1.2;\n    custom.chart.options.scales.yAxes[0].ticks.fontSize = custom.widgetFontSize * 1.2;\n    custom.chart.options.tooltips.xPadding = custom.widgetFontSize;\n    custom.chart.options.tooltips.yPadding = custom.widgetFontSize;\n    custom.chart.options.tooltips.bodySpacing = custom.widgetFontSize * 0.9;\n    custom.chart.options.tooltips.titleMarginBottom = custom.widgetFontSize;\n    custom.chart.options.legend.labels.fontSize = custom.widgetFontSize * 1.2;\n    custom.chart.options.legend.labels.boxWidth = custom.widgetFontSize * 0.8;\n    custom.chart.options.legend.labels.padding = custom.widgetFontSize * 2;\n\n    custom.chart.resize();\n  }\n}\n\nfunction loadData() {\n  let { custom } = self.ctx;\n  let prevDaySearchStart = moment(custom.basicTs).subtract(1, 'year').startOf('year').valueOf();\n  let prevDaySearchEnd = moment(custom.basicTs).subtract(1, 'year').startOf('day').valueOf();\n  let prevRawSearchStart = prevDaySearchEnd;\n  let prevRawSearchEnd = moment(custom.basicTs).subtract(1, 'year').valueOf();\n  let currDaySearchStart = moment(custom.basicTs).startOf('year').valueOf();\n  let currDaySearchEnd = moment(custom.basicTs).startOf('day').valueOf();\n  let currRawSearchStart = currDaySearchEnd;\n  let currRawSearchEnd = moment(custom.basicTs).valueOf();\n  let searchInfo = [\n    [['TP_TotalPowerUsageDay'], prevDaySearchStart, prevDaySearchEnd],\n    [['TP_TotalPowerUsageRaw'], prevRawSearchStart, prevRawSearchEnd],\n    [['TP_WorkTimeDay', 'TP_PlannedWorkTimeDay', 'TP_TotalPowerUsageDay'], currDaySearchStart, currDaySearchEnd],\n    [['TP_WorkTimeRaw', 'TP_PlannedWorkTimeDay', 'TP_TotalPowerUsageRaw'], currRawSearchStart, currRawSearchEnd],\n  ];\n\n  return new Promise(resolve => {\n    let observable = [];\n    for (let i in searchInfo) {\n      observable.push(\n        self.ctx.attributeService.getEntityTimeseries(\n          custom.mainDatasources[0].entity.id,\n          searchInfo[i][0],\n          searchInfo[i][1],\n          searchInfo[i][2],\n          50000,\n          'NONE',\n          0,\n          'ASC',\n          true\n        )\n      );\n    }\n    self.ctx.rxjs.forkJoin(observable).subscribe(datas => {\n      let result = {};\n      for (let i in datas) {\n        for (let j in datas[i]) {\n          if (result[j]) {\n            result[j] = result[j].concat(datas[i][j]);\n          } else {\n            result[j] = datas[i][j];\n          }\n        }\n      }\n      resolve(result);\n    });\n  });\n}\n\nfunction setData() {\n  let { custom, $scope } = self.ctx;\n  for (let i in custom.chartData) {\n    custom.chartData[i].length = 0;\n    for (let j in custom.chartLabels) {\n      custom.chartData[i].push(0);\n    }\n  }\n  for (let i = custom.searchPrevious.start, day = 0; i < custom.searchPrevious.end; i += DAY_MS, day++) {\n    let usageAcc = 0;\n    let targetArray = [];\n    if (custom.mainData['TP_TotalPowerUsageDay']) {\n      targetArray = targetArray.concat(\n        custom.mainData['TP_TotalPowerUsageDay'].filter(x => x.ts >= i && x.ts < i + DAY_MS).map(x => x.value)\n      );\n    }\n    if (custom.mainData['TP_TotalPowerUsageRaw']) {\n      targetArray = targetArray.concat(\n        custom.mainData['TP_TotalPowerUsageRaw'].filter(x => x.ts >= i && x.ts < i + DAY_MS).map(x => x.value)\n      );\n    }\n    for (let j in targetArray) {\n      usageAcc += targetArray[j] / 1000;\n    }\n    if ($scope.range == 'MONTHLY') {\n      custom.chartData[0][moment(i).month()] += usageAcc;\n    } else {\n      custom.chartData[0][day] = usageAcc;\n    }\n  }\n  let monthData = [];\n  for (let i in custom.chartLabels) {\n    monthData.push([0, 0]);\n  }\n  for (let i = custom.searchCurrent.start, day = 0; i < custom.searchCurrent.end; i += DAY_MS, day++) {\n    let usageAcc = 0;\n    let planAcc = 0;\n    let workAcc = 0;\n    let targetArray = [];\n    let targetArray2 = [];\n    let targetArray3 = [];\n    if (custom.mainData['TP_TotalPowerUsageDay']) {\n      targetArray = targetArray.concat(\n        custom.mainData['TP_TotalPowerUsageDay'].filter(x => x.ts >= i && x.ts < i + DAY_MS).map(x => x.value)\n      );\n    }\n    if (custom.mainData['TP_TotalPowerUsageRaw']) {\n      targetArray = targetArray.concat(\n        custom.mainData['TP_TotalPowerUsageRaw'].filter(x => x.ts >= i && x.ts < i + DAY_MS).map(x => x.value)\n      );\n    }\n    for (let j in targetArray) {\n      usageAcc += targetArray[j] / 1000;\n    }\n    if ($scope.range == 'MONTHLY') {\n      custom.chartData[1][moment(i).month()] += usageAcc;\n    } else {\n      custom.chartData[1][day] = usageAcc;\n    }\n\n    if (custom.mainData['TP_PlannedWorkTimeDay']) {\n      targetArray2 = targetArray2.concat(\n        custom.mainData['TP_PlannedWorkTimeDay'].filter(x => x.ts >= i && x.ts < i + DAY_MS).map(x => x.value)\n      );\n    }\n    if (custom.mainData['TP_WorkTimeDay']) {\n      targetArray3 = targetArray3.concat(\n        custom.mainData['TP_WorkTimeDay'].filter(x => x.ts >= i && x.ts < i + DAY_MS).map(x => x.value)\n      );\n    }\n    if (custom.mainData['TP_WorkTimeRaw']) {\n      targetArray3 = targetArray3.concat(\n        custom.mainData['TP_WorkTimeRaw'].filter(x => x.ts >= i && x.ts < i + DAY_MS).map(x => x.value)\n      );\n    }\n    for (let j in targetArray2) {\n      planAcc += targetArray2[j];\n    }\n    for (let j in targetArray3) {\n      workAcc += targetArray3[j];\n    }\n    if ($scope.range == 'MONTHLY') {\n      monthData[moment(i).month()][0] += workAcc;\n      monthData[moment(i).month()][1] += planAcc;\n      custom.chartData[2][moment(i).month()] =\n        (monthData[moment(i).month()][0] / monthData[moment(i).month()][1]) * 100;\n    } else {\n      custom.chartData[2][day] = (workAcc / planAcc) * 100;\n    }\n  }\n\n  custom.maximumY = 1;\n  for (let i in custom.chartData[0]) {\n    custom.chartData[0][i] = _.round(custom.chartData[0][i], 3);\n    if (custom.chartData[0][i] > custom.maximumY) {\n      custom.maximumY = custom.chartData[0][i];\n    }\n  }\n  for (let i in custom.chartData[1]) {\n    custom.chartData[1][i] = _.round(custom.chartData[1][i], 3);\n    if (custom.chartData[1][i] > custom.maximumY) {\n      custom.maximumY = custom.chartData[1][i];\n    }\n  }\n\n  for (let i in custom.chartData[2]) {\n    custom.chartData[2][i] = (custom.chartData[2][i] * custom.maximumY) / 100;\n  }\n}\n\nfunction createDataset(title, labels) {\n  let { custom } = self.ctx;\n  custom.dataSet = {\n    labels: custom.chartLabels,\n    datasets: [\n      {\n        label: t('thingplus.energy.last-usage'),\n        data: custom.chartData[0],\n        categoryPercentage: 0.25,\n        order: 1,\n        fill: true,\n        backgroundColor: getStyle('--tb-service-chart-line-0'),\n        hoverBackgroundColor: tinycolor(getStyle('--tb-service-chart-line-0')).brighten(),\n      },\n      {\n        label: t('thingplus.energy.this-usage'),\n        data: custom.chartData[1],\n        categoryPercentage: 0.25,\n        order: 1,\n        fill: true,\n        backgroundColor: getStyle('--tb-service-chart-line-1'),\n        hoverBackgroundColor: tinycolor(getStyle('--tb-service-chart-line-1')).brighten(),\n      },\n      {\n        label: t('thingplus.energy.operation-rate'),\n        data: custom.chartData[2],\n        type: 'line',\n        order: 0,\n        lineTension: 0,\n        fill: false,\n        backgroundColor: getStyle('--tb-service-chart-line-2'),\n        hoverBackgroundColor: getStyle('--tb-service-chart-line-2'),\n        borderWidth: 2,\n        borderColor: getStyle('--tb-service-chart-line-2'),\n        hoverBorderColor: getStyle('--tb-service-chart-line-2'),\n        pointRadius: 4,\n        pointBorderWidth: 2,\n        pointHoverRadius: 5,\n        pointHoverBorderWidth: 2,\n        pointBorderColor: getStyle('--tb-service-background-0'),\n        pointHoverBorderColor: getStyle('--tb-service-background-0'),\n      },\n    ],\n  };\n}\n\n// 차트생성\nfunction createChart() {\n  let { custom, $scope } = self.ctx;\n  custom.chart = new Chart(custom.$chart, {\n    type: 'bar',\n    data: custom.dataSet,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      tooltips: {\n        mode: 'index',\n        axis: 'x',\n        intersect: false,\n        xPadding: custom.widgetFontSize,\n        yPadding: custom.widgetFontSize,\n        bodySpacing: custom.widgetFontSize * 0.9,\n        titleMarginBottom: custom.widgetFontSize,\n        callbacks: {\n          label: function (tooltipItem, data) {\n            let label = data.datasets[tooltipItem.datasetIndex].label.split(':')[0] || '';\n            if (label == t('thingplus.energy.operation-rate')) {\n              label += ' : ' + _.round((tooltipItem.yLabel / custom.maximumY) * 100, 1) + ' %';\n            } else {\n              label += ' : ' + tooltipItem.yLabel + ' kWh';\n            }\n            return label;\n          },\n        },\n      },\n      hover: {\n        mode: 'index',\n        axis: 'x',\n        intersect: false,\n      },\n      legend: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        labels: {\n          fontColor: getStyle('--tb-service-font-4'),\n          fontFamily: getStyle('--tb-config-font-family'),\n          fontSize: custom.widgetFontSize * 1.2,\n          boxWidth: custom.widgetFontSize * 0.8,\n          usePointStyle: false,\n          padding: custom.widgetFontSize * 2,\n        },\n      },\n      scales: {\n        xAxes: [\n          {\n            display: true,\n            type: 'category',\n            ticks: {\n              fontColor: getStyle('--tb-service-font-4'),\n              fontFamily: getStyle('--tb-config-font-family'),\n              fontSize: custom.widgetFontSize * 1.2,\n            },\n          },\n        ],\n        yAxes: [\n          {\n            display: true,\n            ticks: {\n              suggestedMax: 1,\n              min: 0,\n              fontColor: getStyle('--tb-service-font-2'),\n              fontFamily: getStyle('--tb-config-font-family'),\n              fontSize: custom.widgetFontSize * 1.2,\n              maxTicksLimit: 6,\n            },\n            gridLines: {\n              display: true,\n              color: getStyle('--tb-service-border-1'),\n              zeroLineColor: getStyle('--tb-service-border-1'),\n            },\n          },\n        ],\n      },\n    },\n  });\n}\n\nfunction setRange(range) {\n  let { custom, $scope } = self.ctx;\n  $scope.range = range;\n  if (range == 'WEEKLY') {\n    custom.searchCurrent = {\n      start: moment(custom.basicTs).startOf('isoWeek').valueOf(),\n      end: moment(custom.basicTs).endOf('isoWeek').valueOf() + 1,\n    };\n    custom.searchPrevious = {\n      start: moment(custom.basicTs).subtract(1, 'weeks').startOf('isoWeek').valueOf(),\n      end: moment(custom.basicTs).subtract(1, 'weeks').endOf('isoWeek').valueOf() + 1,\n    };\n    custom.chartLabels.length = 0;\n    for (let i in WEEKDAY) {\n      custom.chartLabels.push(t(`thingplus.time-format.weekday-short.${WEEKDAY[i]}`));\n    }\n  } else if (range == 'DAILY') {\n    custom.searchCurrent = {\n      start: moment(custom.basicTs).startOf('month').valueOf(),\n      end: moment(custom.basicTs).endOf('month').valueOf() + 1,\n    };\n    custom.searchPrevious = {\n      start: moment(custom.basicTs).subtract(1, 'months').startOf('month').valueOf(),\n      end: moment(custom.basicTs).subtract(1, 'months').endOf('month').valueOf() + 1,\n    };\n    custom.chartLabels.length = 0;\n    let startDate = moment(custom.searchCurrent.start).date();\n    let endDate = moment(custom.searchCurrent.end - 1).date();\n    for (let i = startDate; i <= endDate; i++) {\n      custom.chartLabels.push(t('thingplus.time-format.day-value', { day: i }));\n    }\n  } else if (range == 'MONTHLY') {\n    custom.searchCurrent = {\n      start: moment(custom.basicTs).startOf('year').valueOf(),\n      end: moment(custom.basicTs).endOf('year').valueOf() + 1,\n    };\n    custom.searchPrevious = {\n      start: moment(custom.basicTs).subtract(1, 'year').startOf('year').valueOf(),\n      end: moment(custom.basicTs).subtract(1, 'year').endOf('year').valueOf() + 1,\n    };\n    custom.chartLabels.length = 0;\n    for (let i = 1; i <= 12; i++) {\n      custom.chartLabels.push(t('thingplus.time-format.month-value', { month: i }));\n    }\n  }\n}\n\nfunction calcualteFontSize() {\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (widgetFontSize < 6.25) {\n    widgetFontSize = 6.25;\n  }\n  return widgetFontSize;\n}\n\nfunction getStyle(target) {\n  let { custom } = self.ctx;\n  return custom.computedStyle.getPropertyValue(target);\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.43094831520611443,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"Power Usage Chart\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\",\"box-shadow\":\"0px 2px 10px 0 rgba(0, 0, 0, 0.04)\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"1.6em\",\"font-weight\":500,\"letter-spacing\":\"var(--tb-config-letter-spacing)\",\"color\":\"var(--tb-service-font-5)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    },
    {
      "alias": "maximum_peak_chart",
      "name": "Maximum Peak Chart",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"start center\">\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\">\n    <section class=\"widget-header-left-section\" fxFlex=\"100\" fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\" translate>title</div>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex=\"100\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <div class=\"range-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n        <button class=\"range-btn\" (click)=\"selectRange('HOURLY')\" [ngClass]=\"{'active': range == 'HOURLY'}\" translate>\n          thingplus.time-format.hourly\n        </button>\n        <button class=\"range-btn\" (click)=\"selectRange('DAILY')\" [ngClass]=\"{'active': range == 'DAILY'}\" translate>\n          thingplus.time-format.daily\n        </button>\n        <button class=\"range-btn\" (click)=\"selectRange('MONTHLY')\" [ngClass]=\"{'active': range == 'MONTHLY'}\" translate>\n          thingplus.time-format.monthly\n        </button>\n      </div>\n    </section>\n  </header>\n  <main class=\"widget-content\">\n    <section class=\"chart-section\">\n      <canvas class=\"chart\"></canvas>\n    </section>\n  </main>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n  white-space: nowrap;\n  letter-spacing: var(--tb-config-letter-spacing);\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  padding: 0em var(--tb-config-padding);\n  border-bottom: 1px solid var(--tb-service-border-0);\n}\n/* widget-header-right-section */\n.widget-header-right-section .range-btn {\n  all: unset;\n  cursor: pointer;\n  font-size: 1.4em;\n  color: var(--tb-service-font-3);\n  padding: calc(var(--tb-config-padding) / 1.4) 0em;\n  border-bottom: 0.2em solid transparent;\n  transition-property: border-color, color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .range-btn.active {\n  border-color: var(--tb-service-accent);\n  color: var(--tb-service-font-5);\n}\n.widget-header-right-section .range-btn:not(.active):hover {\n  color: var(--tb-service-font-4);\n}\n\n/*\n  Widget Content Area\n*/\nmain.widget-content {\n  width: 100%;\n  padding: var(--tb-config-padding);\n}\n\n/* chart-section */\n.chart-section {\n  width: 100%;\n  height: 100%;\n}\n.chart-section .chart-box {\n  width: 100%;\n  height: 100%;\n}\n",
        "controllerScript": "const HOUR_MS = 3600000;\nconst DAY_MS = 86400000;\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  custom.dashboardParams = getDashboardParameter();\n  setRange($scope.range);\n  self.onResize();\n  custom.mainData = await loadData();\n  setData();\n  createDataset();\n  createChart();\n  custom.chart.update();\n  self.ctx.detectChanges();\n  self.onResize();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.onDataUpdated = function () {};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n  custom.$widgetContent = $('.widget-content', $container);\n  custom.$chart = $('.chart', $container);\n\n  $scope.range = 'HOURLY';\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.hiddenDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.ownerDatasource.entityAliasId);\n  custom.mainDatasources = self.ctx.datasources.filter(x => x.entityAliasId !== custom.ownerDatasource.entityAliasId);\n  custom.isInitialize = false;\n  custom.t = t;\n  custom.widgetFontSize = calcualteFontSize();\n  custom.basicTs = moment().valueOf();\n  custom.computedStyle = getComputedStyle($container[0]);\n  custom.chartLabels = [];\n  custom.chartData = [];\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom, $scope } = self.ctx;\n  custom.$widgetTitle.text(t(self.ctx.widget.config.title));\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope } = self.ctx;\n  $scope.selectRange = async function (range) {\n    setRange(range);\n    setData();\n    custom.chart.update();\n    self.ctx.detectChanges();\n  };\n}\n\nfunction getDashboardParameter() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) {\n    custom.dashboardParams = {};\n    return;\n  }\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n  if (custom.dashboardParams) {\n    if (custom.dashboardParams.basicTs) {\n      custom.basicTs = custom.dashboardParams.basicTs;\n    }\n  }\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  custom.widgetFontSize = calcualteFontSize();\n  custom.$widget.css('font-size', `${custom.widgetFontSize}px`);\n\n  // Header Height를 제외한 영역을 Main의 Height로 설정\n  let headerHeight = custom.$widgetHeader.outerHeight(true);\n  custom.$widgetContent.css('height', `calc(100% - ${headerHeight}px)`);\n\n  if (custom.chart) {\n    custom.chart.options.scales.xAxes[0].ticks.fontSize = custom.widgetFontSize * 1.2;\n    custom.chart.options.scales.yAxes[0].ticks.fontSize = custom.widgetFontSize * 1.2;\n    custom.chart.options.tooltips.xPadding = custom.widgetFontSize;\n    custom.chart.options.tooltips.yPadding = custom.widgetFontSize;\n    custom.chart.options.tooltips.bodySpacing = custom.widgetFontSize * 0.9;\n    custom.chart.options.tooltips.titleMarginBottom = custom.widgetFontSize;\n    custom.chart.options.legend.labels.fontSize = custom.widgetFontSize * 1.2;\n    custom.chart.options.legend.labels.boxWidth = custom.widgetFontSize * 0.8;\n    custom.chart.options.legend.labels.padding = custom.widgetFontSize * 2;\n    custom.chart.resize();\n  }\n}\n\nfunction loadData() {\n  let { custom } = self.ctx;\n  let searchStart = moment(custom.basicTs).subtract(1, 'year').startOf('year').valueOf();\n  let searchEnd = moment(custom.basicTs).endOf('year').valueOf() + 1;\n  if (searchEnd < moment(custom.basicTs).endOf('week').valueOf() + 1) {\n    searchEnd = moment(custom.basicTs).endOf('week').valueOf() + 1;\n  }\n\n  return new Promise(resolve => {\n    self.ctx.attributeService\n      .getEntityTimeseries(\n        custom.mainDatasources[0].entity.id,\n        ['TP_PowerPeakHour'],\n        searchStart,\n        searchEnd,\n        50000,\n        'NONE',\n        0,\n        'ASC',\n        true\n      )\n      .subscribe(datas => {\n        resolve(datas);\n      });\n  });\n}\n\nfunction setData() {\n  let { custom, $scope } = self.ctx;\n  custom.chartData.length = 0;\n  for (let i in custom.chartLabels) {\n    custom.chartData.push(0);\n  }\n  if ($scope.range == 'HOURLY') {\n    for (let i = custom.searchStart, hour = 0; i < custom.searchEnd; i += HOUR_MS, hour++) {\n      let acc = 0;\n      if (custom.mainData['TP_PowerPeakHour']) {\n        let targetArray = custom.mainData['TP_PowerPeakHour']\n          .filter(x => x.ts >= i && x.ts < i + HOUR_MS)\n          .map(x => x.value);\n        for (let j in targetArray) {\n          if (acc < targetArray[j]) {\n            acc = targetArray[j];\n          }\n        }\n        custom.chartData[hour] = acc;\n      }\n    }\n  } else {\n    for (let i = custom.searchStart, day = 0; i < custom.searchEnd; i += DAY_MS, day++) {\n      let acc = 0;\n      if (custom.mainData['TP_PowerPeakHour']) {\n        let targetArray = custom.mainData['TP_PowerPeakHour']\n          .filter(x => x.ts >= i && x.ts < i + DAY_MS)\n          .map(x => x.value);\n        for (let j in targetArray) {\n          if (acc < targetArray[j]) {\n            acc = targetArray[j];\n          }\n        }\n        if ($scope.range == 'MONTHLY') {\n          if (acc > custom.chartData[moment(i).month()]) {\n            custom.chartData[moment(i).month()] = acc;\n          }\n        } else {\n          custom.chartData[day] = acc;\n        }\n      }\n    }\n  }\n}\n\nfunction createDataset() {\n  let { custom } = self.ctx;\n  custom.dataSet = {\n    labels: custom.chartLabels,\n    datasets: [\n      {\n        label: t('thingplus.energy.peak'),\n        data: custom.chartData,\n        categoryPercentage: 0.25,\n        fill: true,\n        backgroundColor: getStyle('--tb-service-accent'),\n        hoverBackgroundColor: tinycolor(getStyle('--tb-service-accent')).brighten(),\n      },\n    ],\n  };\n}\n\n// 차트생성\nfunction createChart() {\n  let { custom, $scope } = self.ctx;\n  custom.chart = new Chart(custom.$chart, {\n    type: 'bar',\n    data: custom.dataSet,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      tooltips: {\n        mode: 'index',\n        axis: 'x',\n        intersect: false,\n        xPadding: custom.widgetFontSize,\n        yPadding: custom.widgetFontSize,\n        bodySpacing: custom.widgetFontSize * 0.9,\n        titleMarginBottom: custom.widgetFontSize,\n        callbacks: {\n          label: function (tooltipItem, data) {\n            let label = data.datasets[tooltipItem.datasetIndex].label || '';\n            if (label) {\n              label += ': ';\n            }\n            label += tooltipItem.yLabel + ' W';\n\n            return label;\n          },\n        },\n      },\n      hover: {\n        mode: 'index',\n        axis: 'x',\n        intersect: false,\n      },\n      legend: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        labels: {\n          fontColor: getStyle('--tb-service-font-4'),\n          fontFamily: getStyle('--tb-config-font-family'),\n          fontSize: custom.widgetFontSize * 1.2,\n          boxWidth: custom.widgetFontSize * 0.8,\n          usePointStyle: false,\n          padding: custom.widgetFontSize * 2,\n        },\n      },\n      scales: {\n        xAxes: [\n          {\n            display: true,\n            type: 'category',\n            ticks: {\n              fontColor: getStyle('--tb-service-font-4'),\n              fontFamily: getStyle('--tb-config-font-family'),\n              fontSize: custom.widgetFontSize * 1.2,\n            },\n            gridLines: {\n              display: false,\n            },\n          },\n        ],\n        yAxes: [\n          {\n            display: true,\n            ticks: {\n              suggestedMax: 1,\n              min: 0,\n              fontColor: getStyle('--tb-service-font-2'),\n              fontFamily: getStyle('--tb-config-font-family'),\n              fontSize: custom.widgetFontSize * 1.2,\n              maxTicksLimit: 6,\n            },\n            gridLines: {\n              display: true,\n              color: getStyle('--tb-service-border-1'),\n              zeroLineColor: getStyle('--tb-service-border-1'),\n            },\n          },\n        ],\n      },\n    },\n  });\n}\n\nfunction setRange(range) {\n  let { custom, $scope } = self.ctx;\n  $scope.range = range;\n  if (range == 'HOURLY') {\n    custom.searchStart = moment(custom.basicTs).startOf('day').valueOf();\n    custom.searchEnd = moment(custom.basicTs).endOf('day').valueOf() + 1;\n    custom.chartLabels.length = 0;\n    for (let i = 0; i < 24; i++) {\n      custom.chartLabels.push(t('thingplus.time-format.hour-value', { hour: i }));\n    }\n  } else if (range == 'DAILY') {\n    custom.searchStart = moment(custom.basicTs).startOf('month').valueOf();\n    custom.searchEnd = moment(custom.basicTs).endOf('month').valueOf() + 1;\n    custom.chartLabels.length = 0;\n    let startDate = moment(custom.searchStart).date();\n    let endDate = moment(custom.searchEnd - 1).date();\n    for (let i = startDate; i <= endDate; i++) {\n      custom.chartLabels.push(t('thingplus.time-format.day-value', { day: i }));\n    }\n  } else if (range == 'MONTHLY') {\n    custom.searchStart = moment(custom.basicTs).startOf('year').valueOf();\n    custom.searchEnd = moment(custom.basicTs).endOf('year').valueOf() + 1;\n    custom.chartLabels.length = 0;\n    for (let i = 1; i <= 12; i++) {\n      custom.chartLabels.push(t('thingplus.time-format.month-value', { month: i }));\n    }\n  }\n}\n\nfunction calcualteFontSize() {\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (widgetFontSize < 6.25) {\n    widgetFontSize = 6.25;\n  }\n  return widgetFontSize;\n}\n\nfunction getStyle(target) {\n  let { custom } = self.ctx;\n  return custom.computedStyle.getPropertyValue(target);\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.8579905774580763,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"Maximum Peak Chart\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\",\"box-shadow\":\"0px 2px 10px 0 rgba(0, 0, 0, 0.04)\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"1.6em\",\"font-weight\":500,\"letter-spacing\":\"var(--tb-config-letter-spacing)\",\"color\":\"var(--tb-service-font-5)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    }
  ]
}