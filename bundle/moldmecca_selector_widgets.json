{
  "widgetsBundle": {
    "alias": "moldmecca_selector_widgets",
    "title": "Moldmecca Selector Widgets",
    "image": null,
    "description": null
  },
  "widgetTypes": [
    {
      "alias": "device_selector",
      "name": "Device Selector",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 1,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <header\n    class=\"widget-header\"\n    fxLayoutAlign=\"space-between center\"\n    fxLayout.xs=\"column\"\n    fxLayoutAlign.xs=\"space-between stretch\"\n  >\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"0.8em\">\n      <div class=\"widget-title\" translate>title</div>\n      <span class=\"normal-label\">{{today}}</span>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex fxLayoutAlign=\"end center\">\n      <div class=\"entity-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\" fxFlex.xs=\"100\">\n        <span class=\"normal-label\" translate fxShow.xs=\"false\">thingplus.selector.device-selection</span>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel == 0\"\n          (ngModelChange)=\"setCustomerL1($event)\"\n          [ngModel]=\"selectedCustomerL1\"\n          fxShow.xs=\"false\"\n        >\n          <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n            {{customerL1.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel <= 1\"\n          (ngModelChange)=\"setCustomerL2($event)\"\n          [ngModel]=\"selectedCustomerL2\"\n          fxShow.xs=\"false\"\n        >\n          <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n            {{customerL2.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select\n          class=\"entity-selector\"\n          (ngModelChange)=\"setDevice($event)\"\n          [ngModel]=\"selectedDevice\"\n          fxFlex.xs=\"100\"\n        >\n          <mat-option *ngFor=\"let device of deviceList\" [value]=\"device.value\"> {{device.label}} </mat-option>\n        </mat-select>\n      </div>\n    </section>\n  </header>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  height: 100%;\n  padding: var(--tb-config-padding);\n}\n\n.normal-label {\n  font-size: 1.2em;\n  font-weight: 500;\n  line-height: 1.17;\n  letter-spacing: -0.03em;\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n}\n\n/* widget-header-right-section */\n/* Entity Controller */\n.widget-header-right-section .mat-select {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .mat-select:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .mat-select-trigger {\n  width: 13em;\n  min-width: 130px;\n  padding: calc(9em / 14);\n  font-size: 1.4em;\n  line-height: 1;\n}\n.widget-header-right-section .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n.widget-header-right-section .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n\n@media (max-width: 959px) {\n  header.widget-header {\n    padding: 0px;\n  }\n}\n@media (max-width: 559px) {\n  .widget-header-right-section .mat-select-trigger {\n    width: 100%;\n  }\n}\n",
        "controllerScript": "const ENTITY_TYPE = ['TENANT', 'CUSTOMER_L1', 'CUSTOMER_L2'];\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  getDashboardParameter();\n\n  self.onResize();\n\n  if (!custom.isSample) {\n    // 현재 사용자의 Root 엔터티로부터 관계 트리 형성\n    custom.relations[custom.rootEntity.id.id] = {\n      id: custom.rootEntity.id,\n      name: custom.rootEntity.name,\n      parent: '',\n      child: [],\n    };\n    $scope.ownerLevel = await getCurrentLevel();\n    getCustomer([custom.relations[custom.rootEntity.id.id]]);\n  }\n  self.onResize();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.onDestroy = function () {\n  let { custom } = self.ctx;\n  if (custom.dateInterval) {\n    clearInterval(custom.dateInterval);\n  }\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n\n  // Define Scope Variables\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n  $scope.deviceList = [\n    { name: t('thingplus.selector.select-device'), label: t('thingplus.selector.select-device'), value: '' },\n  ];\n  $scope.selectedCustomerL1 = '';\n  $scope.selectedCustomerL2 = '';\n  $scope.selectedDevice = '';\n  $scope.ownerLevel = 2;\n  $scope.today = `${moment().format(t('thingplus.time-format.ymd-str'))} ${t(\n    'thingplus.time-format.hour-minute-value',\n    { hour: moment().hour(), minute: moment().minute() }\n  )}`;\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.rootEntity = custom.ownerDatasource.entity;\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.relations = [];\n  custom.defaultState = 'default';\n  custom.dateInterval = setInterval(() => {\n    $scope.today = `${moment().format(t('thingplus.time-format.ymd-str'))} ${t(\n      'thingplus.time-format.hour-minute-value',\n      { hour: moment().hour(), minute: moment().minute() }\n    )}`;\n  }, 60000);\n\n  if (self.ctx.settings.widget.dashboardState) {\n    custom.defaultState = self.ctx.settings.widget.dashboardState;\n  }\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(self.ctx.widget.config.title);\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { $scope } = self.ctx;\n  $scope.setCustomerL1 = function (e) {\n    $scope.selectedCustomerL1 = e;\n    $scope.selectedCustomerL2 = '';\n    $scope.selectedDevice = '';\n    changeCustomerL2List();\n    changeDeviceList();\n  };\n  $scope.setCustomerL2 = function (e) {\n    $scope.selectedCustomerL2 = e;\n    $scope.selectedDevice = '';\n    changeDeviceList();\n  };\n  $scope.setDevice = function (e) {\n    $scope.selectedDevice = e;\n    updateDashboardState();\n  };\n}\n\nfunction getDashboardParameter() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return {};\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n  if (!_.isNil(custom.dashboardParams)) {\n    if (!_.isNil(custom.dashboardParams.customerL1)) {\n      $scope.selectedCustomerL1 = custom.dashboardParams.customerL1.entityId.id;\n    }\n    if (!_.isNil(custom.dashboardParams.customerL2)) {\n      $scope.selectedCustomerL2 = custom.dashboardParams.customerL2.entityId.id;\n    }\n    if (custom.dashboardParams.entityId && custom.dashboardParams.entityId.entityType == 'DEVICE') {\n      $scope.selectedDevice = custom.dashboardParams.entityId.id;\n    }\n    self.ctx.detectChanges();\n  }\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n    if (self.ctx.width < 600) {\n      originWidth = 600;\n    }\n  }\n  let widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  custom.$widget.css('font-size', `${widgetFontSize}px`);\n}\n\nasync function getCurrentLevel() {\n  let { custom } = self.ctx;\n  if (custom.rootEntity.id.entityType == 'TENANT') {\n    return 0;\n  } else {\n    let result = await self.ctx.attributeService\n      .getEntityAttributes(custom.rootEntity.id, 'SERVER_SCOPE', ['customerType'])\n      .toPromise();\n    if (result && result[0]) {\n      if (result[0].value == ENTITY_TYPE[1]) {\n        return 1;\n      } else {\n        return 2;\n      }\n    }\n  }\n}\n\nfunction getCustomer(entities) {\n  let { custom } = self.ctx;\n  let promises = [];\n  if (entities.length > 0) {\n    for (let i = 0; i < entities.length; i++) {\n      promises.push(self.ctx.entityRelationService.findInfoByFrom(entities[i].id));\n    }\n    self.ctx.rxjs.forkJoin(promises).subscribe(childs => {\n      let newChild = [];\n      for (let j = 0; j < childs.length; j++) {\n        for (let k = 0; k < childs[j].length; k++) {\n          custom.relations[childs[j][k].to.id] = {\n            id: childs[j][k].to,\n            name: childs[j][k].toName,\n            parent: entities[j],\n            child: [],\n            type: 'CUSTOMER',\n          };\n          custom.relations[entities[j].id.id].child.push(custom.relations[childs[j][k].to.id]);\n          if (childs[j][k].to.entityType === 'USER') {\n            custom.relations[childs[j][k].to.id].type = 'USER';\n          }\n          if (childs[j][k].to.entityType === 'DEVICE') {\n            custom.relations[childs[j][k].to.id].type = 'DEVICE';\n          }\n          if (childs[j][k].to.entityType === 'ASSET') {\n            custom.relations[childs[j][k].to.id].type = 'ASSET';\n          }\n          if (childs[j][k].to.entityType === 'CUSTOMER') {\n            newChild.push(custom.relations[childs[j][k].to.id]);\n          }\n        }\n      }\n      getCustomer(newChild);\n    });\n  } else {\n    distributeLevel();\n  }\n}\n\n// hierarchy 레벨에 따라 배열에 따로 저장\nfunction distributeLevel() {\n  let { custom, $scope } = self.ctx;\n  let depth = $scope.ownerLevel;\n  let root = custom.relations[custom.rootEntity.id.id];\n  root.type = ENTITY_TYPE[depth];\n  for (let i in root.child) {\n    if (root.child[i].type == 'CUSTOMER') {\n      root.child[i].type = ENTITY_TYPE[depth + 1];\n    }\n    for (let j in root.child[i].child) {\n      if (root.child[i].child[j].type == 'CUSTOMER') {\n        root.child[i].child[j].type = ENTITY_TYPE[depth + 2];\n      }\n    }\n  }\n  custom.customerL1List = [];\n  custom.customerL2List = [];\n  custom.deviceList = [];\n\n  for (let i in custom.relations) {\n    if (custom.relations[i].type == ENTITY_TYPE[1]) {\n      custom.customerL1List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[2]) {\n      custom.customerL2List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == 'DEVICE') {\n      custom.deviceList.push(custom.relations[i]);\n    }\n  }\n\n  getDeviceInfo();\n}\n\nfunction getDeviceInfo() {\n  let { custom, $scope } = self.ctx;\n  let observables = [];\n  custom.deviceList = [];\n  for (let i in custom.customerL2List) {\n    let customerId = custom.customerL2List[i].id.id;\n    observables.push(self.ctx.http.get(`/api/customer/${customerId}/deviceInfos?pageSize=50000&page=0`));\n  }\n\n  self.ctx.rxjs.forkJoin(observables).subscribe(devices => {\n    for (let i in devices) {\n      for (let j in devices[i].data) {\n        custom.relations[devices[i].data[j].id.id].label =\n          devices[i].data[j].label != '' ? devices[i].data[j].label : devices[i].data[j].name;\n        custom.deviceList.push(custom.relations[devices[i].data[j].id.id]);\n      }\n    }\n\n    $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n    $scope.customerL1List = $scope.customerL1List.concat(\n      custom.customerL1List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n    changeCustomerL2List();\n    changeDeviceList();\n    self.ctx.detectChanges();\n  });\n}\n\n// Customer L2 리스트 갱신\nfunction changeCustomerL2List() {\n  let { custom, $scope } = self.ctx;\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n\n  if ($scope.selectedCustomerL1 === '') {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n  } else {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL1)\n        .map(x => {\n          return { name: x.name, value: x.id.id };\n        })\n    );\n  }\n}\n\n// 디바이스 리스트 갱신\nfunction changeDeviceList() {\n  let { custom, $scope } = self.ctx;\n  $scope.deviceList = [];\n\n  if ($scope.selectedCustomerL2 === '') {\n    if ($scope.selectedCustomerL1 === '') {\n      $scope.deviceList = $scope.deviceList.concat(\n        custom.deviceList.map(x => {\n          return { name: x.name, label: x.label, value: x.id.id };\n        })\n      );\n    } else {\n      $scope.deviceList = $scope.deviceList.concat(\n        custom.deviceList\n          .filter(x => x.parent.parent.id.id === $scope.selectedCustomerL1)\n          .map(x => {\n            return { name: x.name, label: x.label, value: x.id.id };\n          })\n      );\n    }\n  } else {\n    $scope.deviceList = $scope.deviceList.concat(\n      custom.deviceList\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL2)\n        .map(x => {\n          return { name: x.name, label: x.label, value: x.id.id };\n        })\n    );\n  }\n  $scope.deviceList.sort((a, b) => {\n    if (a.label > b.label) return 1;\n    if (a.label < b.label) return -1;\n    return 0;\n  });\n  $scope.deviceList = [\n    { name: t('thingplus.selector.select-device'), label: t('thingplus.selector.select-device'), value: '' },\n  ].concat($scope.deviceList);\n}\n\nfunction updateDashboardState() {\n  let { custom, $scope } = self.ctx;\n  if ($scope.selectedDevice == '') {\n    window.alert(t('thingplus.help.error-select-device'));\n    return;\n  }\n  let target = custom.relations[$scope.selectedDevice];\n  let param = {\n    entityId: target.id,\n    entityName: target.name,\n    entityLabel: target.label,\n  };\n  if ($scope.selectedCustomerL1 != '') {\n    let customerL1 = custom.relations[$scope.selectedCustomerL1];\n    param.customerL1 = {\n      entityId: customerL1.id,\n      entityName: customerL1.name,\n      entityLabel: customerL1.label,\n    };\n  }\n  if ($scope.selectedCustomerL2 != '') {\n    let customerL2 = custom.relations[$scope.selectedCustomerL2];\n    param.customerL2 = {\n      entityId: customerL2.id,\n      entityName: customerL2.name,\n      entityLabel: customerL2.label,\n    };\n  }\n  if ($scope.selectedDevice != '') {\n    let device = custom.relations[$scope.selectedDevice];\n    param.device = {\n      entityId: device.id,\n      entityName: device.name,\n      entityLabel: device.label,\n    };\n  }\n\n  self.ctx.stateController.updateState(custom.defaultState, param, null);\n  self.ctx.updateAliases();\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          },\n          \"dashboardState\": {\n            \"title\": \"Dashboard State\",\n            \"type\": \"string\",\n            \"default\": \"default\"\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\", \"widget.dashboardState\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgba(255,255,255,0)\",\"color\":\"var(--tb-service-accent)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"Device Selector\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"2em\",\"font-weight\":500,\"letter-spacing\":\"-0.05em\",\"color\":\"var(--tb-service-font-5)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    },
    {
      "alias": "workspace_selector",
      "name": "Workspace Selector",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 8,
        "sizeY": 1,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <header\n    class=\"widget-header\"\n    fxLayoutAlign=\"space-between center\"\n    fxLayout.xs=\"column\"\n    fxLayoutAlign.xs=\"space-between stretch\"\n  >\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"0.8em\">\n      <span class=\"widget-title\" translate>title</span>\n      <span class=\"normal-label\">{{today}}</span>\n    </section>\n    <section\n      class=\"widget-header-right-section\"\n      fxFlex\n      fxLayoutAlign=\"end center\"\n      fxLayoutAlign.xs=\"space-between center\"\n      fxLayoutGap=\"0.8em\"\n    >\n      <div class=\"entity-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n        <span class=\"normal-label\" translate fxShow.xs=\"false\" [fxShow]=\"ownerLevel <= 1\"\n          >thingplus.selector.customerL2-selection</span\n        >\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel == 0\"\n          (ngModelChange)=\"setCustomerL1($event)\"\n          [ngModel]=\"selectedCustomerL1\"\n        >\n          <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n            {{customerL1.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel <= 1\"\n          (ngModelChange)=\"setCustomerL2($event)\"\n          [ngModel]=\"selectedCustomerL2\"\n        >\n          <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n            {{customerL2.name}}\n          </mat-option>\n        </mat-select>\n      </div>\n      <div class=\"action-controller\" fxLayoutAlign=\"end center\">\n        <button class=\"action-btn icon-btn\" (click)=\"refresh($event)\" fxShow.xs=\"false\">\n          <i class=\"material-icons\">refresh</i>\n        </button>\n      </div>\n    </section>\n  </header>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n  white-space: nowrap;\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  height: 100%;\n  padding: var(--tb-config-padding);\n}\n\n.normal-label {\n  font-size: 1.2em;\n  font-weight: 500;\n  line-height: 1.17;\n  letter-spacing: -0.03em;\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n}\n\n/* widget-header-right-section */\n/* Entity Controller */\n.widget-header-right-section .mat-select {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .mat-select:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .mat-select-trigger {\n  width: 13em;\n  min-width: 130px;\n  padding: calc(9em / 14);\n  font-size: 1.4em;\n  line-height: 1;\n}\n.widget-header-right-section .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n.widget-header-right-section .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n/* Action Button */\n.widget-header-right-section .action-btn {\n  all: unset;\n  line-height: 1.3;\n  cursor: pointer;\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n  white-space: nowrap;\n}\n.widget-header-right-section .icon-btn {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n}\n.widget-header-right-section .icon-btn:hover {\n  border-color: var(--tb-service-accent-hover);\n}\n.widget-header-right-section .icon-btn:active {\n  border-color: var(--tb-service-accent-pressed);\n}\n.widget-header-right-section .icon-btn i {\n  font-size: 2em;\n  padding: 0.3em;\n  color: var(--tb-service-accent);\n}\n\n@media (max-width: 959px) {\n  header.widget-header {\n    padding: 0px;\n  }\n}\n",
        "controllerScript": "const ENTITY_TYPE = ['TENANT', 'CUSTOMER_L1', 'CUSTOMER_L2'];\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  getDashboardParameter();\n\n  self.onResize();\n\n  if (!custom.isSample) {\n    // 현재 사용자의 Root 엔터티로부터 관계 트리 형성\n    custom.relations[custom.rootEntity.id.id] = {\n      id: custom.rootEntity.id,\n      name: custom.rootEntity.name,\n      parent: '',\n      child: [],\n    };\n    $scope.ownerLevel = await getCurrentLevel();\n    getCustomer([custom.relations[custom.rootEntity.id.id]]);\n  }\n  self.onResize();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.onDestroy = function () {\n  let { custom } = self.ctx;\n  if (custom.dateInterval) {\n    clearInterval(custom.dateInterval);\n  }\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n\n  // Define Scope Variables\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n  $scope.selectedCustomerL1 = '';\n  $scope.selectedCustomerL2 = '';\n  $scope.ownerLevel = 2;\n  $scope.today = `${moment().format(t('thingplus.time-format.ymd-str'))} ${t(\n    'thingplus.time-format.hour-minute-value',\n    { hour: moment().hour(), minute: moment().minute() }\n  )}`;\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.rootEntity = custom.ownerDatasource.entity;\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.relations = [];\n  custom.dateInterval = setInterval(() => {\n    $scope.today = `${moment().format(t('thingplus.time-format.ymd-str'))} ${t(\n      'thingplus.time-format.hour-minute-value',\n      { hour: moment().hour(), minute: moment().minute() }\n    )}`;\n  }, 60000);\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(self.ctx.widget.config.title);\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope } = self.ctx;\n  $scope.setCustomerL1 = function (e) {\n    $scope.selectedCustomerL1 = e;\n    $scope.selectedCustomerL2 = '';\n    changeCustomerL2List();\n    updateDashboardState();\n  };\n  $scope.setCustomerL2 = function (e) {\n    $scope.selectedCustomerL2 = e;\n    updateDashboardState();\n  };\n  $scope.refresh = function () {\n    self.ctx.stateController.updateState('default', custom.dashboardParams, null);\n    self.ctx.updateAliases();\n  };\n}\n\nfunction getDashboardParameter() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return {};\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n  if (!_.isNil(custom.dashboardParams)) {\n    if (!_.isNil(custom.dashboardParams.customerL1)) {\n      $scope.selectedCustomerL1 = custom.dashboardParams.customerL1.entityId.id;\n    }\n    if (!_.isNil(custom.dashboardParams.customerL2)) {\n      $scope.selectedCustomerL2 = custom.dashboardParams.customerL2.entityId.id;\n    }\n    self.ctx.detectChanges();\n  }\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n    if (self.ctx.width < 600) {\n      originWidth = 600;\n    }\n  }\n  let widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  custom.$widget.css('font-size', `${widgetFontSize}px`);\n}\n\nasync function getCurrentLevel() {\n  let { custom } = self.ctx;\n  if (custom.rootEntity.id.entityType == 'TENANT') {\n    return 0;\n  } else {\n    let result = await self.ctx.attributeService\n      .getEntityAttributes(custom.rootEntity.id, 'SERVER_SCOPE', ['customerType'])\n      .toPromise();\n    if (result && result[0]) {\n      if (result[0].value == ENTITY_TYPE[1]) {\n        return 1;\n      } else {\n        return 2;\n      }\n    }\n  }\n}\n\nfunction getCustomer(entities) {\n  let { custom } = self.ctx;\n  let promises = [];\n  if (entities.length > 0) {\n    for (let i = 0; i < entities.length; i++) {\n      promises.push(self.ctx.entityRelationService.findInfoByFrom(entities[i].id));\n    }\n    self.ctx.rxjs.forkJoin(promises).subscribe(childs => {\n      let newChild = [];\n      for (let j = 0; j < childs.length; j++) {\n        for (let k = 0; k < childs[j].length; k++) {\n          custom.relations[childs[j][k].to.id] = {\n            id: childs[j][k].to,\n            name: childs[j][k].toName,\n            parent: entities[j],\n            child: [],\n            type: 'CUSTOMER',\n          };\n          custom.relations[entities[j].id.id].child.push(custom.relations[childs[j][k].to.id]);\n          if (childs[j][k].to.entityType === 'USER') {\n            custom.relations[childs[j][k].to.id].type = 'USER';\n          }\n          if (childs[j][k].to.entityType === 'DEVICE') {\n            custom.relations[childs[j][k].to.id].type = 'DEVICE';\n          }\n          if (childs[j][k].to.entityType === 'ASSET') {\n            custom.relations[childs[j][k].to.id].type = 'ASSET';\n          }\n          if (childs[j][k].to.entityType === 'CUSTOMER') {\n            newChild.push(custom.relations[childs[j][k].to.id]);\n          }\n        }\n      }\n      getCustomer(newChild);\n    });\n  } else {\n    distributeLevel();\n  }\n}\n\n// hierarchy 레벨에 따라 배열에 따로 저장\nfunction distributeLevel() {\n  let { custom, $scope } = self.ctx;\n  let depth = $scope.ownerLevel;\n  let root = custom.relations[custom.rootEntity.id.id];\n  root.type = ENTITY_TYPE[depth];\n  for (let i in root.child) {\n    if (root.child[i].type == 'CUSTOMER') {\n      root.child[i].type = ENTITY_TYPE[depth + 1];\n    }\n    for (let j in root.child[i].child) {\n      if (root.child[i].child[j].type == 'CUSTOMER') {\n        root.child[i].child[j].type = ENTITY_TYPE[depth + 2];\n      }\n    }\n  }\n  custom.customerL1List = [];\n  custom.customerL2List = [];\n\n  for (let i in custom.relations) {\n    if (custom.relations[i].type == ENTITY_TYPE[1]) {\n      custom.customerL1List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[2]) {\n      custom.customerL2List.push(custom.relations[i]);\n    }\n  }\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL1List = $scope.customerL1List.concat(\n    custom.customerL1List.map(x => {\n      return { name: x.name, value: x.id.id };\n    })\n  );\n\n  changeCustomerL2List();\n  self.ctx.detectChanges();\n}\n\n// Customer L2 리스트 갱신\nfunction changeCustomerL2List() {\n  let { custom, $scope } = self.ctx;\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n\n  if ($scope.selectedCustomerL1 === '') {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n  } else {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL1)\n        .map(x => {\n          return { name: x.name, value: x.id.id };\n        })\n    );\n  }\n}\n\nfunction updateDashboardState() {\n  let { custom, $scope } = self.ctx;\n  let target,\n    param = {};\n  if ($scope.selectedCustomerL2 != '') {\n    target = custom.relations[$scope.selectedCustomerL2];\n  } else if ($scope.selectedCustomerL1 != '') {\n    target = custom.relations[$scope.selectedCustomerL1];\n  }\n  if (target) {\n    param = {\n      entityId: target.id,\n      entityName: target.name,\n      entityLabel: target.label,\n    };\n  }\n  if ($scope.selectedCustomerL1 != '') {\n    let customerL1 = custom.relations[$scope.selectedCustomerL1];\n    param.customerL1 = {\n      entityId: customerL1.id,\n      entityName: customerL1.name,\n      entityLabel: customerL1.label,\n    };\n  }\n  if ($scope.selectedCustomerL2 != '') {\n    let customerL2 = custom.relations[$scope.selectedCustomerL2];\n    param.customerL2 = {\n      entityId: customerL2.id,\n      entityName: customerL2.name,\n      entityLabel: customerL2.label,\n    };\n  }\n  self.ctx.stateController.updateState('default', param, null);\n  self.ctx.updateAliases();\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgba(255,255,255,0)\",\"color\":\"var(--tb-service-accent)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"Workspace Selector\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"2em\",\"font-weight\":500,\"letter-spacing\":\"-0.05em\",\"color\":\"var(--tb-service-font-5)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    },
    {
      "alias": "target_selector",
      "name": "Target Selector",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 8,
        "sizeY": 1,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\">\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\" translate>title</div>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex fxLayoutAlign=\"end center\">\n      <div class=\"entity-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\" fxShow.lt-md=\"false\">\n        <span class=\"normal-label\" translate>thingplus.selector.device-selection</span>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel == 0\"\n          (ngModelChange)=\"setCustomerL1($event)\"\n          [ngModel]=\"selectedCustomerL1\"\n        >\n          <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n            {{customerL1.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel <= 1\"\n          (ngModelChange)=\"setCustomerL2($event)\"\n          [ngModel]=\"selectedCustomerL2\"\n        >\n          <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n            {{customerL2.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select class=\"entity-selector\" (ngModelChange)=\"setDevice($event)\" [ngModel]=\"selectedDevice\">\n          <mat-option *ngFor=\"let device of deviceList\" [value]=\"device.value\"> {{device.label}} </mat-option>\n        </mat-select>\n      </div>\n      <div class=\"date-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\" fxShow.lt-md=\"false\">\n        <div class=\"normal-label\" translate>thingplus.selector.date-selection</div>\n        <div class=\"date-selector\" fxLayoutAlign=\"space-between center\">\n          <mat-datetimepicker #startDatePicker type=\"date\"></mat-datetimepicker>\n          <input\n            class=\"hidden\"\n            matInput\n            readonly\n            [(ngModel)]=\"startDate\"\n            [min]=\"startLimitDate\"\n            [max]=\"endDate\"\n            [matDatetimepicker]=\"startDatePicker\"\n            (ngModelChange)=\"setStartDate($event)\"\n          />\n          <input class=\"start-date\" (click)=\"startDatePicker.open()\" [(ngModel)]=\"viewStartDate\" readonly />\n          <div class=\"select-arrow\"></div>\n        </div>\n        <span class=\"normal-label\"> ~ </span>\n        <div class=\"date-selector\" fxLayoutAlign=\"space-between center\">\n          <mat-datetimepicker #endDatePicker type=\"date\"></mat-datetimepicker>\n          <input\n            class=\"hidden\"\n            matInput\n            readonly\n            [(ngModel)]=\"endDate\"\n            [min]=\"startDate\"\n            [max]=\"endLimitDate\"\n            [matDatetimepicker]=\"endDatePicker\"\n            (ngModelChange)=\"setEndDate($event)\"\n          />\n          <input class=\"end-date\" (click)=\"endDatePicker.open()\" [(ngModel)]=\"viewEndDate\" readonly />\n          <div class=\"select-arrow\"></div>\n        </div>\n      </div>\n      <button class=\"action-btn text-btn\" (click)=\"search($event)\" fxShow.lt-md=\"false\">\n        <span translate>thingplus.action.search</span>\n      </button>\n      <button class=\"action-btn text-btn\" (click)=\"openFilter($event)\" fxShow.gt-sm=\"false\">\n        <span translate>thingplus.action.search</span>\n      </button>\n    </section>\n  </header>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  height: 100%;\n  padding: var(--tb-config-padding);\n}\n\n.normal-label {\n  font-size: 1.2em;\n  font-weight: 500;\n  line-height: 1.17;\n  letter-spacing: -0.03em;\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n}\n\n/* widget-header-right-section */\n/* Entity Controller */\n.widget-header-right-section .entity-controller {\n  margin-right: var(--tb-config-padding);\n}\n.widget-header-right-section .mat-select {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .mat-select:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .mat-select-trigger {\n  width: 13em;\n  min-width: 130px;\n  padding: calc(9em / 14);\n  font-size: 1.4em;\n  line-height: 1;\n}\n.widget-header-right-section .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n.widget-header-right-section .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n/* Date Controller */\n.widget-header-right-section .date-controller {\n  margin-right: var(--tb-config-padding);\n}\n.widget-header-right-section .date-selector {\n  position: relative;\n  width: 13em;\n  min-width: 70px;\n  line-height: 1;\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  padding: 0.6em 0.9em;\n  cursor: pointer;\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .date-selector:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .date-selector input {\n  font-family: var(--tb-config-font-family);\n  font-size: 1.4em;\n  font-weight: 300;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  line-height: 1.3;\n}\n.select-arrow {\n  border-left: 0.5em solid transparent;\n  border-right: 0.5em solid transparent;\n  border-top: 0.5em solid;\n  color: var(--tb-service-accent);\n}\n.widget-header-right-section .start-date,\n.widget-header-right-section .end-date {\n  all: unset;\n  width: 100%;\n}\n.widget-header-right-section .hidden {\n  visibility: hidden;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n/* Action Button */\n.widget-header-right-section .action-btn {\n  all: unset;\n  line-height: 1.3;\n  cursor: pointer;\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n  white-space: nowrap;\n}\n.widget-header-right-section .text-btn {\n  padding: 0.6em 1.6em;\n  background-color: var(--tb-service-accent);\n  border: 1px solid var(--tb-service-accent);\n}\n.widget-header-right-section .text-btn:hover {\n  background-color: var(--tb-service-accent-hover);\n  border-color: var(--tb-service-accent-hover);\n}\n.widget-header-right-section .text-btn:active {\n  background-color: var(--tb-service-accent-pressed);\n  border-color: var(--tb-service-accent-pressed);\n}\n.widget-header-right-section .text-btn span {\n  font-size: 1.4em;\n  color: var(--tb-service-font-0);\n}\n\n@media (max-width: 959px) {\n  header.widget-header {\n    padding: 0px;\n  }\n}\n",
        "controllerScript": "const ENTITY_TYPE = ['TENANT', 'CUSTOMER_L1', 'CUSTOMER_L2'];\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  getDashboardParameter();\n\n  self.onResize();\n\n  if (!custom.isSample) {\n    // 현재 사용자의 Root 엔터티로부터 관계 트리 형성\n    custom.relations[custom.rootEntity.id.id] = {\n      id: custom.rootEntity.id,\n      name: custom.rootEntity.name,\n      parent: '',\n      child: [],\n    };\n    $scope.ownerLevel = await getCurrentLevel();\n    getCustomer([custom.relations[custom.rootEntity.id.id]]);\n  }\n  self.onResize();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.actionSources = function () {\n  return {\n    filterAction: {\n      name: 'Filter Action',\n      multiple: false,\n    },\n  };\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n\n  // Define Scope Variables\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n  $scope.deviceList = [\n    { name: t('thingplus.selector.entire-device'), label: t('thingplus.selector.entire-device'), value: '' },\n  ];\n  $scope.selectedCustomerL1 = '';\n  $scope.selectedCustomerL2 = '';\n  $scope.selectedDevice = '';\n  $scope.ownerLevel = 2;\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.rootEntity = custom.ownerDatasource.entity;\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.relations = [];\n  custom.ymd = t('thingplus.time-format.ymd');\n\n  let now = moment().valueOf();\n  custom.startTs = moment(now).subtract(1, 'weeks').startOf('day').valueOf();\n  custom.endTs = moment(now).endOf('day').valueOf();\n  $scope.startDate = moment(custom.startTs).toDate();\n  $scope.endDate = moment(custom.endTs).toDate();\n  $scope.viewStartDate = moment(custom.startTs).format(custom.ymd);\n  $scope.viewEndDate = moment(custom.endTs).format(custom.ymd);\n\n  if (self.ctx.settings.widget.selectLimit && self.ctx.settings.widget.selectLimit != 0) {\n    $scope.startLimitDate = moment(\n      moment($scope.endDate).valueOf() - self.ctx.settings.widget.selectLimit * 24 * 60 * 60 * 1000\n    ).toDate();\n    $scope.endLimitDate = moment(\n      moment($scope.startDate).valueOf() + self.ctx.settings.widget.selectLimit * 24 * 60 * 60 * 1000\n    ).toDate();\n  }\n\n  if (moment($scope.endLimitDate).valueOf() > moment().valueOf()) {\n    $scope.endLimitDate = moment().toDate();\n  }\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(self.ctx.widget.config.title);\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope } = self.ctx;\n  $scope.setCustomerL1 = function (e) {\n    $scope.selectedCustomerL1 = e;\n    $scope.selectedCustomerL2 = '';\n    $scope.selectedDevice = '';\n    changeCustomerL2List();\n    changeDeviceList();\n  };\n  $scope.setCustomerL2 = function (e) {\n    $scope.selectedCustomerL2 = e;\n    $scope.selectedDevice = '';\n    changeDeviceList();\n  };\n  $scope.setDevice = function (e) {\n    $scope.selectedDevice = e;\n  };\n  $scope.search = function (e) {\n    updateDashboardState();\n  };\n  $scope.setStartDate = function (e) {\n    $scope.startDate = e;\n    $scope.viewStartDate = moment(e).format(custom.ymd);\n\n    if (self.ctx.settings.widget.selectLimit && self.ctx.settings.widget.selectLimit != 0) {\n      $scope.endLimitDate = moment(\n        moment($scope.startDate).valueOf() + self.ctx.settings.widget.selectLimit * 24 * 60 * 60 * 1000\n      ).toDate();\n    }\n\n    if (moment($scope.endLimitDate).valueOf() > moment().valueOf()) {\n      $scope.endLimitDate = moment().toDate();\n    }\n  };\n  $scope.setEndDate = function (e) {\n    $scope.endDate = e;\n    $scope.viewEndDate = moment(e).format(custom.ymd);\n\n    if (self.ctx.settings.widget.selectLimit && self.ctx.settings.widget.selectLimit != 0) {\n      $scope.startLimitDate = moment(\n        moment($scope.endDate).valueOf() - self.ctx.settings.widget.selectLimit * 24 * 60 * 60 * 1000\n      ).toDate();\n    }\n  };\n  $scope.openFilter = function (e) {\n    let descriptor = self.ctx.actionsApi.getActionDescriptors('filterAction')[0];\n    self.ctx.actionsApi.handleWidgetAction(\n      {},\n      descriptor,\n      custom.ownerDatasource.entity.id,\n      custom.ownerDatasource.entityName,\n      {},\n      custom.ownerDatasource.entityLabel\n    );\n  };\n}\n\nfunction getDashboardParameter() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return {};\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n  if (custom.dashboardParams) {\n    if (custom.dashboardParams.customerL1) {\n      $scope.selectedCustomerL1 = custom.dashboardParams.customerL1.entityId.id;\n    }\n    if (custom.dashboardParams.customerL2) {\n      $scope.selectedCustomerL2 = custom.dashboardParams.customerL2.entityId.id;\n    }\n    if (custom.dashboardParams.entityId && custom.dashboardParams.entityId.entityType == 'DEVICE') {\n      $scope.selectedDevice = custom.dashboardParams.entityId.id;\n    }\n    if (custom.dashboardParams.startTs) {\n      custom.startTs = custom.dashboardParams.startTs;\n      $scope.startDate = moment(custom.startTs).toDate();\n      $scope.viewStartDate = moment(custom.startTs).format(custom.ymd);\n\n      if (self.ctx.settings.widget.selectLimit && self.ctx.settings.widget.selectLimit != 0) {\n        $scope.endLimitDate = moment(\n          moment($scope.startDate).valueOf() + self.ctx.settings.widget.selectLimit * 24 * 60 * 60 * 1000\n        ).toDate();\n      }\n\n      if (moment($scope.endLimitDate).valueOf() > moment().valueOf()) {\n        $scope.endLimitDate = moment().toDate();\n      }\n    }\n    if (custom.dashboardParams.endTs) {\n      custom.endTs = custom.dashboardParams.endTs;\n      $scope.endDate = moment(custom.endTs).toDate();\n      $scope.viewEndDate = moment(custom.endTs).format(custom.ymd);\n\n      if (self.ctx.settings.widget.selectLimit && self.ctx.settings.widget.selectLimit != 0) {\n        $scope.startLimitDate = moment(\n          moment($scope.endDate).valueOf() - self.ctx.settings.widget.selectLimit * 24 * 60 * 60 * 1000\n        ).toDate();\n      }\n    }\n    self.ctx.detectChanges();\n  }\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n    if (self.ctx.width < 600) {\n      originWidth = 600;\n    }\n  }\n  let widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  custom.$widget.css('font-size', `${widgetFontSize}px`);\n}\n\nasync function getCurrentLevel() {\n  let { custom } = self.ctx;\n  if (custom.rootEntity.id.entityType == 'TENANT') {\n    return 0;\n  } else {\n    let result = await self.ctx.attributeService\n      .getEntityAttributes(custom.rootEntity.id, 'SERVER_SCOPE', ['customerType'])\n      .toPromise();\n    if (result && result[0]) {\n      if (result[0].value == ENTITY_TYPE[1]) {\n        return 1;\n      } else {\n        return 2;\n      }\n    }\n  }\n}\n\nfunction getCustomer(entities) {\n  let { custom } = self.ctx;\n  let promises = [];\n  if (entities.length > 0) {\n    for (let i = 0; i < entities.length; i++) {\n      promises.push(self.ctx.entityRelationService.findInfoByFrom(entities[i].id));\n    }\n    self.ctx.rxjs.forkJoin(promises).subscribe(childs => {\n      let newChild = [];\n      for (let j = 0; j < childs.length; j++) {\n        for (let k = 0; k < childs[j].length; k++) {\n          custom.relations[childs[j][k].to.id] = {\n            id: childs[j][k].to,\n            name: childs[j][k].toName,\n            parent: entities[j],\n            child: [],\n            type: 'CUSTOMER',\n          };\n          custom.relations[entities[j].id.id].child.push(custom.relations[childs[j][k].to.id]);\n          if (childs[j][k].to.entityType === 'USER') {\n            custom.relations[childs[j][k].to.id].type = 'USER';\n          }\n          if (childs[j][k].to.entityType === 'DEVICE') {\n            custom.relations[childs[j][k].to.id].type = 'DEVICE';\n          }\n          if (childs[j][k].to.entityType === 'ASSET') {\n            custom.relations[childs[j][k].to.id].type = 'ASSET';\n          }\n          if (childs[j][k].to.entityType === 'CUSTOMER') {\n            newChild.push(custom.relations[childs[j][k].to.id]);\n          }\n        }\n      }\n      getCustomer(newChild);\n    });\n  } else {\n    distributeLevel();\n  }\n}\n\n// hierarchy 레벨에 따라 배열에 따로 저장\nfunction distributeLevel() {\n  let { custom, $scope } = self.ctx;\n  let depth = $scope.ownerLevel;\n  let root = custom.relations[custom.rootEntity.id.id];\n  root.type = ENTITY_TYPE[depth];\n  for (let i in root.child) {\n    if (root.child[i].type == 'CUSTOMER') {\n      root.child[i].type = ENTITY_TYPE[depth + 1];\n    }\n    for (let j in root.child[i].child) {\n      if (root.child[i].child[j].type == 'CUSTOMER') {\n        root.child[i].child[j].type = ENTITY_TYPE[depth + 2];\n      }\n    }\n  }\n  custom.customerL1List = [];\n  custom.customerL2List = [];\n  custom.deviceList = [];\n\n  for (let i in custom.relations) {\n    if (custom.relations[i].type == ENTITY_TYPE[1]) {\n      custom.customerL1List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[2]) {\n      custom.customerL2List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == 'DEVICE') {\n      custom.deviceList.push(custom.relations[i]);\n    }\n  }\n\n  getDeviceInfo();\n}\n\nfunction getDeviceInfo() {\n  let { custom, $scope } = self.ctx;\n  let observables = [];\n  custom.deviceList = [];\n  for (let i in custom.customerL2List) {\n    let customerId = custom.customerL2List[i].id.id;\n    observables.push(self.ctx.http.get(`/api/customer/${customerId}/deviceInfos?pageSize=50000&page=0`));\n  }\n\n  self.ctx.rxjs.forkJoin(observables).subscribe(devices => {\n    for (let i in devices) {\n      for (let j in devices[i].data) {\n        custom.relations[devices[i].data[j].id.id].label =\n          devices[i].data[j].label != '' ? devices[i].data[j].label : devices[i].data[j].name;\n        custom.deviceList.push(custom.relations[devices[i].data[j].id.id]);\n      }\n    }\n\n    $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n    $scope.customerL1List = $scope.customerL1List.concat(\n      custom.customerL1List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n\n    changeCustomerL2List();\n    changeDeviceList();\n    self.ctx.detectChanges();\n  });\n}\n\n// Customer L2 리스트 갱신\nfunction changeCustomerL2List() {\n  let { custom, $scope } = self.ctx;\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n\n  if ($scope.selectedCustomerL1 === '') {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n  } else {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL1)\n        .map(x => {\n          return { name: x.name, value: x.id.id };\n        })\n    );\n  }\n}\n\n// 디바이스 리스트 갱신\nfunction changeDeviceList() {\n  let { custom, $scope } = self.ctx;\n  $scope.deviceList = [];\n\n  if ($scope.selectedCustomerL2 === '') {\n    if ($scope.selectedCustomerL1 === '') {\n      $scope.deviceList = $scope.deviceList.concat(\n        custom.deviceList.map(x => {\n          return { name: x.name, label: x.label, value: x.id.id };\n        })\n      );\n    } else {\n      $scope.deviceList = $scope.deviceList.concat(\n        custom.deviceList\n          .filter(x => x.parent.parent.id.id === $scope.selectedCustomerL1)\n          .map(x => {\n            return { name: x.name, label: x.label, value: x.id.id };\n          })\n      );\n    }\n  } else {\n    $scope.deviceList = $scope.deviceList.concat(\n      custom.deviceList\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL2)\n        .map(x => {\n          return { name: x.name, label: x.label, value: x.id.id };\n        })\n    );\n  }\n  $scope.deviceList.sort((a, b) => {\n    if (a.label > b.label) return 1;\n    if (a.label < b.label) return -1;\n    return 0;\n  });\n  $scope.deviceList = [\n    { name: t('thingplus.selector.entire-device'), label: t('thingplus.selector.entire-device'), value: '' },\n  ].concat($scope.deviceList);\n}\n\nfunction updateDashboardState() {\n  let { custom, $scope } = self.ctx;\n  let target,\n    param = {};\n  if ($scope.selectedDevice != '') {\n    target = custom.relations[$scope.selectedDevice];\n  } else if ($scope.selectedCustomerL2 != '') {\n    target = custom.relations[$scope.selectedCustomerL2];\n  } else if ($scope.selectedCustomerL1 != '') {\n    target = custom.relations[$scope.selectedCustomerL1];\n  }\n  if (target) {\n    param = {\n      entityId: target.id,\n      entityName: target.name,\n      entityLabel: target.label,\n    };\n  }\n  if ($scope.selectedCustomerL1 != '') {\n    let customerL1 = custom.relations[$scope.selectedCustomerL1];\n    param.customerL1 = {\n      entityId: customerL1.id,\n      entityName: customerL1.name,\n      entityLabel: customerL1.label,\n    };\n  }\n  if ($scope.selectedCustomerL2 != '') {\n    let customerL2 = custom.relations[$scope.selectedCustomerL2];\n    param.customerL2 = {\n      entityId: customerL2.id,\n      entityName: customerL2.name,\n      entityLabel: customerL2.label,\n    };\n  }\n  if ($scope.selectedDevice != '') {\n    let device = custom.relations[$scope.selectedDevice];\n    param.device = {\n      entityId: device.id,\n      entityName: device.name,\n      entityLabel: device.label,\n    };\n  }\n  param.startTs = moment($scope.startDate).startOf('day').valueOf();\n  param.endTs = moment($scope.endDate).endOf('day').valueOf();\n  self.ctx.stateController.updateState('default', param, null);\n  self.ctx.updateAliases();\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          },\n          \"selectLimit\": {\n            \"title\": \"Select Limit\",\n            \"type\": \"number\",\n            \"default\": 0\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\", \"widget.selectLimit\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgba(255,255,255,0)\",\"color\":\"var(--tb-service-accent)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"Target Selector\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"2em\",\"font-weight\":500,\"letter-spacing\":\"-0.05em\",\"color\":\"var(--tb-service-font-5)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    },
    {
      "alias": "energy_selector",
      "name": "Energy Selector",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 8,
        "sizeY": 1,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\">\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\" translate>title</div>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex fxLayoutAlign=\"end center\">\n      <div class=\"entity-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.8em\" fxShow.lt-md=\"false\">\n        <span class=\"normal-label\" translate>thingplus.selector.target-selection</span>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel == 0\"\n          (ngModelChange)=\"setCustomerL1($event)\"\n          [ngModel]=\"selectedCustomerL1\"\n        >\n          <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n            {{customerL1.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel <= 1\"\n          (ngModelChange)=\"setCustomerL2($event)\"\n          [ngModel]=\"selectedCustomerL2\"\n        >\n          <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n            {{customerL2.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select class=\"entity-selector\" (ngModelChange)=\"setDevice($event)\" [ngModel]=\"selectedDevice\">\n          <mat-option *ngFor=\"let device of deviceList\" [value]=\"device.value\"> {{device.label}} </mat-option>\n        </mat-select>\n      </div>\n      <div class=\"date-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\" fxShow.lt-md=\"false\">\n        <div class=\"normal-label\" translate>thingplus.selector.basic-date</div>\n        <div class=\"date-selector\" fxLayoutAlign=\"space-between center\">\n          <mat-datetimepicker #basicDatePicker type=\"date\"></mat-datetimepicker>\n          <input\n            class=\"hidden\"\n            matInput\n            readonly\n            [(ngModel)]=\"basicDate\"\n            [max]=\"nowDate\"\n            [matDatetimepicker]=\"basicDatePicker\"\n            (ngModelChange)=\"setBasicDate($event)\"\n          />\n          <input class=\"basic-date\" (click)=\"basicDatePicker.open()\" [(ngModel)]=\"viewBasicDate\" readonly />\n          <div class=\"select-arrow\"></div>\n        </div>\n      </div>\n      <button class=\"action-btn text-btn\" (click)=\"search($event)\" fxShow.lt-md=\"false\">\n        <span translate>thingplus.action.search</span>\n      </button>\n      <button class=\"action-btn text-btn\" (click)=\"openFilter($event)\" fxShow.gt-sm=\"false\">\n        <span translate>thingplus.action.search</span>\n      </button>\n    </section>\n  </header>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  height: 100%;\n  padding: var(--tb-config-padding);\n}\n\n.normal-label {\n  font-size: 1.2em;\n  font-weight: 500;\n  line-height: 1.17;\n  letter-spacing: -0.03em;\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n}\n\n/* widget-header-right-section */\n/* Entity Controller */\n.widget-header-right-section .entity-controller {\n  margin-right: 4em;\n}\n.widget-header-right-section .mat-select {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .mat-select:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .mat-select-trigger {\n  width: 13em;\n  min-width: 130px;\n  padding: calc(9em / 14);\n  font-size: 1.4em;\n  line-height: 1;\n}\n.widget-header-right-section .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n.widget-header-right-section .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n/* Date Controller */\n.widget-header-right-section .date-controller {\n  margin-right: 0.8em;\n}\n.widget-header-right-section .date-selector {\n  position: relative;\n  width: 13em;\n  min-width: 70px;\n  line-height: 1;\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  padding: 0.6em 0.9em;\n  cursor: pointer;\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .date-selector:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .date-selector input {\n  font-family: var(--tb-config-font-family);\n  font-size: 1.4em;\n  font-weight: 300;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  line-height: 1.3;\n}\n.select-arrow {\n  border-left: 0.5em solid transparent;\n  border-right: 0.5em solid transparent;\n  border-top: 0.5em solid;\n  color: var(--tb-service-accent);\n}\n.widget-header-right-section .basic-date {\n  all: unset;\n  width: 100%;\n}\n.widget-header-right-section .hidden {\n  visibility: hidden;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n/* Action Button */\n.widget-header-right-section .action-btn {\n  all: unset;\n  line-height: 1.3;\n  cursor: pointer;\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n  white-space: nowrap;\n}\n.widget-header-right-section .text-btn {\n  padding: 0.6em 1.6em;\n  background-color: var(--tb-service-accent);\n  border: 1px solid var(--tb-service-accent);\n}\n.widget-header-right-section .text-btn:hover {\n  background-color: var(--tb-service-accent-hover);\n  border-color: var(--tb-service-accent-hover);\n}\n.widget-header-right-section .text-btn:active {\n  background-color: var(--tb-service-accent-pressed);\n  border-color: var(--tb-service-accent-pressed);\n}\n.widget-header-right-section .text-btn span {\n  font-size: 1.4em;\n  font-weight: bold;\n  color: var(--tb-service-font-0);\n}\n\n@media (max-width: 959px) {\n  header.widget-header {\n    padding: 0px;\n  }\n}\n",
        "controllerScript": "const ENTITY_TYPE = ['TENANT', 'CUSTOMER_L1', 'CUSTOMER_L2'];\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  getDashboardParameter();\n\n  self.onResize();\n\n  if (!custom.isSample) {\n    // 현재 사용자의 Root 엔터티로부터 관계 트리 형성\n    custom.relations[custom.rootEntity.id.id] = {\n      id: custom.rootEntity.id,\n      name: custom.rootEntity.name,\n      parent: '',\n      child: [],\n    };\n    $scope.ownerLevel = await getCurrentLevel();\n    getCustomer([custom.relations[custom.rootEntity.id.id]]);\n  }\n  self.onResize();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.actionSources = function () {\n  return {\n    filterAction: {\n      name: 'Filter Action',\n      multiple: false,\n    },\n  };\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n\n  // Define Scope Variables\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n  $scope.deviceList = [\n    { name: t('thingplus.selector.entire-device'), label: t('thingplus.selector.entire-device'), value: '' },\n  ];\n  $scope.selectedCustomerL1 = '';\n  $scope.selectedCustomerL2 = '';\n  $scope.selectedDevice = '';\n  $scope.ownerLevel = 2;\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.rootEntity = custom.ownerDatasource.entity;\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.relations = [];\n  custom.ymd = t('thingplus.time-format.ymd');\n\n  let now = moment().valueOf();\n  custom.basicTs = moment(now).valueOf();\n  $scope.basicDate = moment(custom.basicTs).toDate();\n  $scope.viewBasicDate = moment(custom.basicTs).format(custom.ymd);\n  $scope.nowDate = moment(now).endOf('day').toDate();\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(self.ctx.widget.config.title);\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope } = self.ctx;\n  $scope.setCustomerL1 = function (e) {\n    $scope.selectedCustomerL1 = e;\n    $scope.selectedCustomerL2 = '';\n    $scope.selectedDevice = '';\n    changeCustomerL2List();\n    changeDeviceList();\n  };\n  $scope.setCustomerL2 = function (e) {\n    $scope.selectedCustomerL2 = e;\n    $scope.selectedDevice = '';\n    changeDeviceList();\n  };\n  $scope.setDevice = function (e) {\n    $scope.selectedDevice = e;\n  };\n  $scope.search = function (e) {\n    updateDashboardState();\n  };\n  $scope.setBasicDate = function (e) {\n    if (moment($scope.nowDate).date() == moment(e).date()) {\n      $scope.basicDate = moment().valueOf();\n    } else {\n      $scope.basicDate = moment(e).endOf('day').valueOf();\n    }\n    $scope.viewBasicDate = moment($scope.basicDate).format(custom.ymd);\n  };\n  $scope.openFilter = function (e) {\n    let descriptor = self.ctx.actionsApi.getActionDescriptors('filterAction')[0];\n    self.ctx.actionsApi.handleWidgetAction(\n      {},\n      descriptor,\n      custom.ownerDatasource.entity.id,\n      custom.ownerDatasource.entityName,\n      {},\n      custom.ownerDatasource.entityLabel\n    );\n  };\n}\n\nfunction getDashboardParameter() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return {};\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n  if (custom.dashboardParams) {\n    if (custom.dashboardParams.customerL1) {\n      $scope.selectedCustomerL1 = custom.dashboardParams.customerL1.entityId.id;\n    }\n    if (custom.dashboardParams.customerL2) {\n      $scope.selectedCustomerL2 = custom.dashboardParams.customerL2.entityId.id;\n    }\n    if (custom.dashboardParams.entityId && custom.dashboardParams.entityId.entityType == 'DEVICE') {\n      $scope.selectedDevice = custom.dashboardParams.entityId.id;\n    }\n    if (custom.dashboardParams.basicTs) {\n      custom.basicTs = custom.dashboardParams.basicTs;\n      $scope.basicDate = moment(custom.basicTs).toDate();\n      $scope.viewBasicDate = moment(custom.basicTs).format(custom.ymd);\n    }\n    self.ctx.detectChanges();\n  }\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n    if (self.ctx.width < 600) {\n      originWidth = 600;\n    }\n  }\n  let widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  custom.$widget.css('font-size', `${widgetFontSize}px`);\n}\n\nasync function getCurrentLevel() {\n  let { custom } = self.ctx;\n  if (custom.rootEntity.id.entityType == 'TENANT') {\n    return 0;\n  } else {\n    let result = await self.ctx.attributeService\n      .getEntityAttributes(custom.rootEntity.id, 'SERVER_SCOPE', ['customerType'])\n      .toPromise();\n    if (result && result[0]) {\n      if (result[0].value == ENTITY_TYPE[1]) {\n        return 1;\n      } else {\n        return 2;\n      }\n    }\n  }\n}\n\nfunction getCustomer(entities) {\n  let { custom } = self.ctx;\n  let promises = [];\n  if (entities.length > 0) {\n    for (let i = 0; i < entities.length; i++) {\n      promises.push(self.ctx.entityRelationService.findInfoByFrom(entities[i].id));\n    }\n    self.ctx.rxjs.forkJoin(promises).subscribe(childs => {\n      let newChild = [];\n      for (let j = 0; j < childs.length; j++) {\n        for (let k = 0; k < childs[j].length; k++) {\n          custom.relations[childs[j][k].to.id] = {\n            id: childs[j][k].to,\n            name: childs[j][k].toName,\n            parent: entities[j],\n            child: [],\n            type: 'CUSTOMER',\n          };\n          custom.relations[entities[j].id.id].child.push(custom.relations[childs[j][k].to.id]);\n          if (childs[j][k].to.entityType === 'USER') {\n            custom.relations[childs[j][k].to.id].type = 'USER';\n          }\n          if (childs[j][k].to.entityType === 'DEVICE') {\n            custom.relations[childs[j][k].to.id].type = 'DEVICE';\n          }\n          if (childs[j][k].to.entityType === 'ASSET') {\n            custom.relations[childs[j][k].to.id].type = 'ASSET';\n          }\n          if (childs[j][k].to.entityType === 'CUSTOMER') {\n            newChild.push(custom.relations[childs[j][k].to.id]);\n          }\n        }\n      }\n      getCustomer(newChild);\n    });\n  } else {\n    distributeLevel();\n  }\n}\n\n// hierarchy 레벨에 따라 배열에 따로 저장\nfunction distributeLevel() {\n  let { custom, $scope } = self.ctx;\n  let depth = $scope.ownerLevel;\n  let root = custom.relations[custom.rootEntity.id.id];\n  root.type = ENTITY_TYPE[depth];\n  for (let i in root.child) {\n    if (root.child[i].type == 'CUSTOMER') {\n      root.child[i].type = ENTITY_TYPE[depth + 1];\n    }\n    for (let j in root.child[i].child) {\n      if (root.child[i].child[j].type == 'CUSTOMER') {\n        root.child[i].child[j].type = ENTITY_TYPE[depth + 2];\n      }\n    }\n  }\n  custom.customerL1List = [];\n  custom.customerL2List = [];\n  custom.deviceList = [];\n\n  for (let i in custom.relations) {\n    if (custom.relations[i].type == ENTITY_TYPE[1]) {\n      custom.customerL1List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[2]) {\n      custom.customerL2List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == 'DEVICE') {\n      custom.deviceList.push(custom.relations[i]);\n    }\n  }\n\n  getDeviceInfo();\n}\n\nfunction getDeviceInfo() {\n  let { custom, $scope } = self.ctx;\n  let observables = [];\n  custom.deviceList = [];\n  for (let i in custom.customerL2List) {\n    let customerId = custom.customerL2List[i].id.id;\n    observables.push(self.ctx.http.get(`/api/customer/${customerId}/deviceInfos?pageSize=50000&page=0`));\n  }\n\n  self.ctx.rxjs.forkJoin(observables).subscribe(devices => {\n    for (let i in devices) {\n      for (let j in devices[i].data) {\n        custom.relations[devices[i].data[j].id.id].label =\n          devices[i].data[j].label != '' ? devices[i].data[j].label : devices[i].data[j].name;\n        custom.deviceList.push(custom.relations[devices[i].data[j].id.id]);\n      }\n    }\n\n    $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n    $scope.customerL1List = $scope.customerL1List.concat(\n      custom.customerL1List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n\n    changeCustomerL2List();\n    changeDeviceList();\n    self.ctx.detectChanges();\n  });\n}\n\n// Customer L2 리스트 갱신\nfunction changeCustomerL2List() {\n  let { custom, $scope } = self.ctx;\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n\n  if ($scope.selectedCustomerL1 === '') {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n  } else {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL1)\n        .map(x => {\n          return { name: x.name, value: x.id.id };\n        })\n    );\n  }\n}\n\n// 디바이스 리스트 갱신\nfunction changeDeviceList() {\n  let { custom, $scope } = self.ctx;\n  $scope.deviceList = [];\n\n  if ($scope.selectedCustomerL2 === '') {\n    if ($scope.selectedCustomerL1 === '') {\n      $scope.deviceList = $scope.deviceList.concat(\n        custom.deviceList.map(x => {\n          return { name: x.name, label: x.label, value: x.id.id };\n        })\n      );\n    } else {\n      $scope.deviceList = $scope.deviceList.concat(\n        custom.deviceList\n          .filter(x => x.parent.parent.id.id === $scope.selectedCustomerL1)\n          .map(x => {\n            return { name: x.name, label: x.label, value: x.id.id };\n          })\n      );\n    }\n  } else {\n    $scope.deviceList = $scope.deviceList.concat(\n      custom.deviceList\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL2)\n        .map(x => {\n          return { name: x.name, label: x.label, value: x.id.id };\n        })\n    );\n  }\n  $scope.deviceList.sort((a, b) => {\n    if (a.label > b.label) return 1;\n    if (a.label < b.label) return -1;\n    return 0;\n  });\n  $scope.deviceList = [\n    { name: t('thingplus.selector.entire-device'), label: t('thingplus.selector.entire-device'), value: '' },\n  ].concat($scope.deviceList);\n}\n\nfunction updateDashboardState() {\n  let { custom, $scope } = self.ctx;\n  let target,\n    param = {};\n  if ($scope.selectedDevice != '') {\n    target = custom.relations[$scope.selectedDevice];\n  } else if ($scope.selectedCustomerL2 != '') {\n    target = custom.relations[$scope.selectedCustomerL2];\n  } else if ($scope.selectedCustomerL1 != '') {\n    target = custom.relations[$scope.selectedCustomerL1];\n  }\n  if (target) {\n    param = {\n      entityId: target.id,\n      entityName: target.name,\n      entityLabel: target.label,\n    };\n  }\n  if ($scope.selectedCustomerL1 != '') {\n    let customerL1 = custom.relations[$scope.selectedCustomerL1];\n    param.customerL1 = {\n      entityId: customerL1.id,\n      entityName: customerL1.name,\n      entityLabel: customerL1.label,\n    };\n  }\n  if ($scope.selectedCustomerL2 != '') {\n    let customerL2 = custom.relations[$scope.selectedCustomerL2];\n    param.customerL2 = {\n      entityId: customerL2.id,\n      entityName: customerL2.name,\n      entityLabel: customerL2.label,\n    };\n  }\n  if ($scope.selectedDevice != '') {\n    let device = custom.relations[$scope.selectedDevice];\n    param.device = {\n      entityId: device.id,\n      entityName: device.name,\n      entityLabel: device.label,\n    };\n  }\n  param.basicTs = moment($scope.basicDate).valueOf();\n  self.ctx.stateController.updateState('default', param, null);\n  self.ctx.updateAliases();\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgba(255,255,255,0)\",\"color\":\"var(--tb-service-accent)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"Energy Selector\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"2em\",\"font-weight\":500,\"letter-spacing\":\"-0.05em\",\"color\":\"var(--tb-service-font-5)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    },
    {
      "alias": "report_selector",
      "name": "Report Selector",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 9,
        "sizeY": 1,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\">\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\" translate>title</div>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex fxLayoutAlign=\"end center\">\n      <div class=\"entity-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\" fxShow.lt-md=\"false\">\n        <span class=\"normal-label\" [fxShow]=\"ownerLevel <= 1\" translate>thingplus.selector.target-selection</span>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel == 0\"\n          (ngModelChange)=\"setCustomerL1($event)\"\n          [ngModel]=\"selectedCustomerL1\"\n        >\n          <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n            {{customerL1.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel <= 1\"\n          (ngModelChange)=\"setCustomerL2($event)\"\n          [ngModel]=\"selectedCustomerL2\"\n        >\n          <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n            {{customerL2.name}}\n          </mat-option>\n        </mat-select>\n      </div>\n      <div class=\"date-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\" fxShow.lt-md=\"false\">\n        <div class=\"normal-label\" translate>thingplus.selector.date-selection</div>\n        <div class=\"date-selector\" fxLayoutAlign=\"space-between center\">\n          <mat-datetimepicker #startDatePicker type=\"date\"></mat-datetimepicker>\n          <input\n            class=\"hidden\"\n            matInput\n            readonly\n            [(ngModel)]=\"startDate\"\n            [max]=\"endDate\"\n            [matDatetimepicker]=\"startDatePicker\"\n            (ngModelChange)=\"setStartDate($event)\"\n          />\n          <input class=\"start-date\" (click)=\"startDatePicker.open()\" [(ngModel)]=\"viewStartDate\" readonly />\n          <div class=\"select-arrow\"></div>\n        </div>\n        <span class=\"normal-label\"> ~ </span>\n        <div class=\"date-selector\" fxLayoutAlign=\"space-between center\">\n          <mat-datetimepicker #endDatePicker type=\"date\"></mat-datetimepicker>\n          <input\n            class=\"hidden\"\n            matInput\n            readonly\n            [(ngModel)]=\"endDate\"\n            [min]=\"startDate\"\n            [max]=\"nowDate\"\n            [matDatetimepicker]=\"endDatePicker\"\n            (ngModelChange)=\"setEndDate($event)\"\n          />\n          <input class=\"end-date\" (click)=\"endDatePicker.open()\" [(ngModel)]=\"viewEndDate\" readonly />\n          <div class=\"select-arrow\"></div>\n        </div>\n      </div>\n      <div class=\"range-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"-1px\" fxShow.lt-md=\"false\">\n        <button\n          class=\"action-btn range-btn\"\n          [ngClass]=\"range == 'DAY' ? 'active' : ''\"\n          (click)=\"setRange($event, 'DAY')\"\n          fxLayoutAlign=\"center center\"\n        >\n          <span translate>thingplus.time-format.day</span>\n        </button>\n        <button\n          class=\"action-btn range-btn\"\n          [ngClass]=\"range == 'WEEK' ? 'active' : ''\"\n          (click)=\"setRange($event, 'WEEK')\"\n          fxLayoutAlign=\"center center\"\n        >\n          <span translate>thingplus.time-format.week</span>\n        </button>\n        <button\n          class=\"action-btn range-btn\"\n          [ngClass]=\"range == 'MONTH' ? 'active' : ''\"\n          (click)=\"setRange($event, 'MONTH')\"\n          fxLayoutAlign=\"center center\"\n        >\n          <span translate>thingplus.time-format.month</span>\n        </button>\n      </div>\n      <button class=\"action-btn text-btn\" (click)=\"search($event)\" fxShow.lt-md=\"false\">\n        <span translate>thingplus.action.search</span>\n      </button>\n      <button class=\"action-btn text-btn\" (click)=\"openFilter($event)\" fxShow.gt-sm=\"false\">\n        <span translate>thingplus.action.search</span>\n      </button>\n    </section>\n  </header>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  height: 100%;\n  padding: var(--tb-config-padding);\n}\n\n.normal-label {\n  font-size: 1.2em;\n  font-weight: 500;\n  line-height: 1.17;\n  letter-spacing: -0.03em;\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n}\n\n/* widget-header-right-section */\n/* Entity Controller */\n.widget-header-right-section .entity-controller {\n  margin-right: var(--tb-config-padding);\n}\n.widget-header-right-section .mat-select {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .mat-select:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .mat-select-trigger {\n  width: 13em;\n  min-width: 130px;\n  padding: calc(9em / 14);\n  font-size: 1.4em;\n  line-height: 1;\n}\n.widget-header-right-section .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n.widget-header-right-section .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n/* Date Controller */\n.widget-header-right-section .date-controller {\n  margin-right: var(--tb-config-padding);\n}\n.widget-header-right-section .date-selector {\n  position: relative;\n  width: 13em;\n  min-width: 70px;\n  line-height: 1;\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  padding: 0.6em 0.9em;\n  cursor: pointer;\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .date-selector:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .date-selector input {\n  font-family: var(--tb-config-font-family);\n  font-size: 1.4em;\n  font-weight: 300;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  line-height: 1.3;\n}\n.select-arrow {\n  border-left: 0.5em solid transparent;\n  border-right: 0.5em solid transparent;\n  border-top: 0.5em solid;\n  color: var(--tb-service-accent);\n}\n.widget-header-right-section .start-date,\n.widget-header-right-section .end-date {\n  all: unset;\n  width: 100%;\n}\n.widget-header-right-section .hidden {\n  visibility: hidden;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n/* Action Button */\n.widget-header-right-section .action-btn {\n  all: unset;\n  line-height: 1.3;\n  cursor: pointer;\n  transition-property: border-color, color;\n  transition-duration: var(--tb-config-color-duration);\n  white-space: nowrap;\n}\n/* Range Controller */\n.widget-header-right-section .range-controller {\n  margin-right: var(--tb-config-padding);\n}\n.widget-header-right-section .range-btn {\n  position: relative;\n  width: 6em;\n  min-width: 60px;\n  padding: 0.6em 0em;\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  color: var(--tb-service-font-4);\n}\n.widget-header-right-section .range-btn.active {\n  border-color: var(--tb-service-accent);\n  color: var(--tb-service-accent);\n  z-index: 1;\n}\n.widget-header-right-section .range-btn:not(.active):hover {\n  border-color: var(--tb-service-border-3);\n  z-index: 2;\n}\n.widget-header-right-section .range-btn span {\n  font-size: 1.4em;\n}\n/* Action Button */\n.widget-header-right-section .text-btn {\n  padding: 0.6em 1.6em;\n  background-color: var(--tb-service-accent);\n  border: 1px solid var(--tb-service-accent);\n}\n.widget-header-right-section .text-btn:hover {\n  background-color: var(--tb-service-accent-hover);\n  border-color: var(--tb-service-accent-hover);\n}\n.widget-header-right-section .text-btn:active {\n  background-color: var(--tb-service-accent-pressed);\n  border-color: var(--tb-service-accent-pressed);\n}\n.widget-header-right-section .text-btn span {\n  font-size: 1.4em;\n  color: var(--tb-service-font-0);\n}\n\n@media (max-width: 959px) {\n  header.widget-header {\n    padding: 0px;\n  }\n}\n",
        "controllerScript": "const ENTITY_TYPE = ['TENANT', 'CUSTOMER_L1', 'CUSTOMER_L2'];\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  getDashboardParameter();\n\n  self.onResize();\n\n  if (!custom.isSample) {\n    // 현재 사용자의 Root 엔터티로부터 관계 트리 형성\n    custom.relations[custom.rootEntity.id.id] = {\n      id: custom.rootEntity.id,\n      name: custom.rootEntity.name,\n      parent: '',\n      child: [],\n    };\n    $scope.ownerLevel = await getCurrentLevel();\n    getCustomer([custom.relations[custom.rootEntity.id.id]]);\n  }\n  self.onResize();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.actionSources = function () {\n  return {\n    filterAction: {\n      name: 'Filter Action',\n      multiple: false,\n    },\n  };\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n\n  // Define Scope Variables\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n  $scope.selectedCustomerL1 = '';\n  $scope.selectedCustomerL2 = '';\n  $scope.ownerLevel = 2;\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.rootEntity = custom.ownerDatasource.entity;\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.relations = [];\n  custom.ymd = t('thingplus.time-format.ymd');\n\n  let now = moment().valueOf();\n  custom.startTs = moment(now).startOf('day').valueOf();\n  custom.endTs = moment(now).valueOf();\n  $scope.startDate = moment(custom.startTs).toDate();\n  $scope.endDate = moment(custom.endTs).toDate();\n  $scope.viewStartDate = moment(custom.startTs).format(custom.ymd);\n  $scope.viewEndDate = moment(custom.endTs).format(custom.ymd);\n  $scope.nowDate = moment(custom.endTs).toDate();\n  $scope.range = '';\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(self.ctx.widget.config.title);\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope } = self.ctx;\n  $scope.setCustomerL1 = function (e) {\n    $scope.selectedCustomerL1 = e;\n    $scope.selectedCustomerL2 = '';\n    changeCustomerL2List();\n  };\n  $scope.setCustomerL2 = function (e) {\n    $scope.selectedCustomerL2 = e;\n  };\n  $scope.search = function (e) {\n    updateDashboardState();\n  };\n  $scope.setStartDate = function (e) {\n    $scope.startDate = e;\n    $scope.viewStartDate = moment(e).format(custom.ymd);\n    $scope.range = '';\n  };\n  $scope.setEndDate = function (e) {\n    $scope.endDate = e;\n    $scope.viewEndDate = moment(e).format(custom.ymd);\n    $scope.range = '';\n  };\n  $scope.setRange = function (e, range) {\n    $scope.range = range;\n    if (range == 'DAY') {\n      $scope.startDate = moment($scope.endDate).startOf('day').toDate();\n      $scope.viewStartDate = moment($scope.startDate).format(custom.ymd);\n    } else if (range == 'WEEK') {\n      $scope.startDate = moment($scope.endDate).subtract(1, 'weeks').startOf('day').toDate();\n      $scope.viewStartDate = moment($scope.startDate).format(custom.ymd);\n    } else if (range == 'MONTH') {\n      let currentDate = moment($scope.endDate).date();\n      let prevMaxDate = moment($scope.endDate).subtract(1, 'months').endOf('month').date();\n      if (prevMaxDate < currentDate) {\n        currentDate = prevMaxDate;\n      }\n      $scope.startDate = moment($scope.endDate).subtract(1, 'months').date(currentDate).toDate();\n      $scope.viewStartDate = moment($scope.startDate).format(custom.ymd);\n    }\n  };\n  $scope.openFilter = function (e) {\n    let descriptor = self.ctx.actionsApi.getActionDescriptors('filterAction')[0];\n    self.ctx.actionsApi.handleWidgetAction(\n      {},\n      descriptor,\n      custom.ownerDatasource.entity.id,\n      custom.ownerDatasource.entityName,\n      {},\n      custom.ownerDatasource.entityLabel\n    );\n  };\n}\n\nfunction getDashboardParameter() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return {};\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n  if (custom.dashboardParams) {\n    if (custom.dashboardParams.customerL1) {\n      $scope.selectedCustomerL1 = custom.dashboardParams.customerL1.entityId.id;\n    }\n    if (custom.dashboardParams.customerL2) {\n      $scope.selectedCustomerL2 = custom.dashboardParams.customerL2.entityId.id;\n    }\n    if (custom.dashboardParams.startTs) {\n      custom.startTs = custom.dashboardParams.startTs;\n      $scope.startDate = moment(custom.startTs).toDate();\n      $scope.viewStartDate = moment(custom.startTs).format(custom.ymd);\n    }\n    if (custom.dashboardParams.endTs) {\n      custom.endTs = custom.dashboardParams.endTs;\n      $scope.endDate = moment(custom.endTs).toDate();\n      $scope.viewEndDate = moment(custom.endTs).format(custom.ymd);\n    }\n    if (custom.dashboardParams.range) {\n      $scope.range = custom.dashboardParams.range;\n    }\n    self.ctx.detectChanges();\n  }\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n    if (self.ctx.width < 600) {\n      originWidth = 600;\n    }\n  }\n  let widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  custom.$widget.css('font-size', `${widgetFontSize}px`);\n}\n\nasync function getCurrentLevel() {\n  let { custom } = self.ctx;\n  if (custom.rootEntity.id.entityType == 'TENANT') {\n    return 0;\n  } else {\n    let result = await self.ctx.attributeService\n      .getEntityAttributes(custom.rootEntity.id, 'SERVER_SCOPE', ['customerType'])\n      .toPromise();\n    if (result && result[0]) {\n      if (result[0].value == ENTITY_TYPE[1]) {\n        return 1;\n      } else {\n        return 2;\n      }\n    }\n  }\n}\n\nfunction getCustomer(entities) {\n  let { custom } = self.ctx;\n  let promises = [];\n  if (entities.length > 0) {\n    for (let i = 0; i < entities.length; i++) {\n      promises.push(self.ctx.entityRelationService.findInfoByFrom(entities[i].id));\n    }\n    self.ctx.rxjs.forkJoin(promises).subscribe(childs => {\n      let newChild = [];\n      for (let j = 0; j < childs.length; j++) {\n        for (let k = 0; k < childs[j].length; k++) {\n          custom.relations[childs[j][k].to.id] = {\n            id: childs[j][k].to,\n            name: childs[j][k].toName,\n            parent: entities[j],\n            child: [],\n            type: 'CUSTOMER',\n          };\n          custom.relations[entities[j].id.id].child.push(custom.relations[childs[j][k].to.id]);\n          if (childs[j][k].to.entityType === 'USER') {\n            custom.relations[childs[j][k].to.id].type = 'USER';\n          }\n          if (childs[j][k].to.entityType === 'DEVICE') {\n            custom.relations[childs[j][k].to.id].type = 'DEVICE';\n          }\n          if (childs[j][k].to.entityType === 'ASSET') {\n            custom.relations[childs[j][k].to.id].type = 'ASSET';\n          }\n          if (childs[j][k].to.entityType === 'CUSTOMER') {\n            newChild.push(custom.relations[childs[j][k].to.id]);\n          }\n        }\n      }\n      getCustomer(newChild);\n    });\n  } else {\n    distributeLevel();\n  }\n}\n\n// hierarchy 레벨에 따라 배열에 따로 저장\nfunction distributeLevel() {\n  let { custom, $scope } = self.ctx;\n  let depth = $scope.ownerLevel;\n  let root = custom.relations[custom.rootEntity.id.id];\n  root.type = ENTITY_TYPE[depth];\n  for (let i in root.child) {\n    if (root.child[i].type == 'CUSTOMER') {\n      root.child[i].type = ENTITY_TYPE[depth + 1];\n    }\n    for (let j in root.child[i].child) {\n      if (root.child[i].child[j].type == 'CUSTOMER') {\n        root.child[i].child[j].type = ENTITY_TYPE[depth + 2];\n      }\n    }\n  }\n  custom.customerL1List = [];\n  custom.customerL2List = [];\n\n  for (let i in custom.relations) {\n    if (custom.relations[i].type == ENTITY_TYPE[1]) {\n      custom.customerL1List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[2]) {\n      custom.customerL2List.push(custom.relations[i]);\n    }\n  }\n\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL1List = $scope.customerL1List.concat(\n    custom.customerL1List.map(x => {\n      return { name: x.name, value: x.id.id };\n    })\n  );\n\n  changeCustomerL2List();\n  self.ctx.detectChanges();\n}\n\n// Customer L2 리스트 갱신\nfunction changeCustomerL2List() {\n  let { custom, $scope } = self.ctx;\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n\n  if ($scope.selectedCustomerL1 === '') {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n  } else {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL1)\n        .map(x => {\n          return { name: x.name, value: x.id.id };\n        })\n    );\n  }\n}\n\nfunction updateDashboardState() {\n  let { custom, $scope } = self.ctx;\n  let target,\n    param = {};\n  if ($scope.selectedCustomerL2 != '') {\n    target = custom.relations[$scope.selectedCustomerL2];\n  } else if ($scope.selectedCustomerL1 != '') {\n    target = custom.relations[$scope.selectedCustomerL1];\n  }\n  if (target) {\n    param = {\n      entityId: target.id,\n      entityName: target.name,\n      entityLabel: target.label,\n    };\n  }\n  if ($scope.selectedCustomerL1 != '') {\n    let customerL1 = custom.relations[$scope.selectedCustomerL1];\n    param.customerL1 = {\n      entityId: customerL1.id,\n      entityName: customerL1.name,\n      entityLabel: customerL1.label,\n    };\n  }\n  if ($scope.selectedCustomerL2 != '') {\n    let customerL2 = custom.relations[$scope.selectedCustomerL2];\n    param.customerL2 = {\n      entityId: customerL2.id,\n      entityName: customerL2.name,\n      entityLabel: customerL2.label,\n    };\n  }\n  param.startTs = moment($scope.startDate).startOf('day').valueOf();\n  param.endTs = moment($scope.endDate).endOf('day').valueOf();\n  let now = moment().valueOf();\n  if (param.endTs > now) {\n    param.endTs = now;\n  }\n  param.range = $scope.range;\n  self.ctx.stateController.updateState('default', param, null);\n  self.ctx.updateAliases();\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgba(255,255,255,0)\",\"color\":\"var(--tb-service-accent)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"Report Selector\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"2em\",\"font-weight\":500,\"letter-spacing\":\"-0.05em\",\"color\":\"var(--tb-service-font-5)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    },
    {
      "alias": "simple_workspace_selector",
      "name": "Simple Workspace Selector",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 9,
        "sizeY": 1,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <header\n    class=\"widget-header\"\n    fxLayoutAlign=\"space-between center\"\n    fxLayout.xs=\"column\"\n    fxLayoutAlign.xs=\"center start\"\n    fxLayoutGap.xs=\"\"\n  >\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <span class=\"widget-title\" translate>title</span>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex fxLayoutAlign=\"end center\">\n      <div class=\"entity-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n        <span class=\"normal-label\" translate [fxShow]=\"ownerLevel <= 1\">thingplus.selector.customerL2-selection</span>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel == 0\"\n          (ngModelChange)=\"setCustomerL1($event)\"\n          [ngModel]=\"selectedCustomerL1\"\n        >\n          <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n            {{customerL1.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel <= 1\"\n          (ngModelChange)=\"setCustomerL2($event)\"\n          [ngModel]=\"selectedCustomerL2\"\n        >\n          <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n            {{customerL2.name}}\n          </mat-option>\n        </mat-select>\n      </div>\n      <button class=\"action-btn text-btn\" (click)=\"search($event)\">\n        <span translate>thingplus.action.search</span>\n      </button>\n    </section>\n  </header>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n}\n\n.normal-label {\n  font-size: 1.2em;\n  font-weight: 500;\n  line-height: 1.17;\n  letter-spacing: -0.03em;\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n}\n\n/* widget-header-right-section */\n/* Entity Controller */\n.widget-header-right-section .entity-controller {\n  margin-right: var(--tb-config-padding);\n}\n.widget-header-right-section .mat-select {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .mat-select:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .mat-select-trigger {\n  width: 13em;\n  min-width: 130px;\n  padding: calc(9em / 14);\n  font-size: 1.4em;\n  line-height: 1;\n}\n.widget-header-right-section .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n.widget-header-right-section .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n/* Action Button */\n.widget-header-right-section .action-btn {\n  all: unset;\n  line-height: 1.3;\n  cursor: pointer;\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n  white-space: nowrap;\n}\n.widget-header-right-section .text-btn {\n  padding: 0.6em 1.6em;\n  background-color: var(--tb-service-accent);\n  border: 1px solid var(--tb-service-accent);\n}\n.widget-header-right-section .text-btn:hover {\n  background-color: var(--tb-service-accent-hover);\n  border-color: var(--tb-service-accent-hover);\n}\n.widget-header-right-section .text-btn:active {\n  background-color: var(--tb-service-accent-pressed);\n  border-color: var(--tb-service-accent-pressed);\n}\n.widget-header-right-section .text-btn span {\n  font-size: 1.4em;\n  color: var(--tb-service-font-0);\n}\n",
        "controllerScript": "const ENTITY_TYPE = ['TENANT', 'CUSTOMER_L1', 'CUSTOMER_L2'];\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  getDashboardParameter();\n\n  self.onResize();\n\n  if (!custom.isSample) {\n    // 현재 사용자의 Root 엔터티로부터 관계 트리 형성\n    custom.relations[custom.rootEntity.id.id] = {\n      id: custom.rootEntity.id,\n      name: custom.rootEntity.name,\n      parent: '',\n      child: [],\n    };\n    $scope.ownerLevel = await getCurrentLevel();\n    getCustomer([custom.relations[custom.rootEntity.id.id]]);\n  }\n  self.onResize();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n\n  // Define Scope Variables\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n  $scope.selectedCustomerL1 = '';\n  $scope.selectedCustomerL2 = '';\n  $scope.ownerLevel = 2;\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.rootEntity = custom.ownerDatasource.entity;\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.relations = [];\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(self.ctx.widget.config.title);\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { $scope } = self.ctx;\n  $scope.setCustomerL1 = function (e) {\n    $scope.selectedCustomerL1 = e;\n    $scope.selectedCustomerL2 = '';\n    changeCustomerL2List();\n  };\n  $scope.setCustomerL2 = function (e) {\n    $scope.selectedCustomerL2 = e;\n  };\n  $scope.search = function (e) {\n    updateDashboardState();\n  };\n}\n\nfunction getDashboardParameter() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return {};\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n  if (!_.isNil(custom.dashboardParams)) {\n    if (!_.isNil(custom.dashboardParams.customerL1)) {\n      $scope.selectedCustomerL1 = custom.dashboardParams.customerL1.entityId.id;\n    }\n    if (!_.isNil(custom.dashboardParams.customerL2)) {\n      $scope.selectedCustomerL2 = custom.dashboardParams.customerL2.entityId.id;\n    }\n    self.ctx.detectChanges();\n  }\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  let widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  custom.$widget.css('font-size', `${widgetFontSize}px`);\n}\n\nasync function getCurrentLevel() {\n  let { custom } = self.ctx;\n  if (custom.rootEntity.id.entityType == 'TENANT') {\n    return 0;\n  } else {\n    let result = await self.ctx.attributeService\n      .getEntityAttributes(custom.rootEntity.id, 'SERVER_SCOPE', ['customerType'])\n      .toPromise();\n    if (result && result[0]) {\n      if (result[0].value == ENTITY_TYPE[1]) {\n        return 1;\n      } else {\n        return 2;\n      }\n    }\n  }\n}\n\nfunction getCustomer(entities) {\n  let { custom } = self.ctx;\n  let promises = [];\n  if (entities.length > 0) {\n    for (let i = 0; i < entities.length; i++) {\n      promises.push(self.ctx.entityRelationService.findInfoByFrom(entities[i].id));\n    }\n    self.ctx.rxjs.forkJoin(promises).subscribe(childs => {\n      let newChild = [];\n      for (let j = 0; j < childs.length; j++) {\n        for (let k = 0; k < childs[j].length; k++) {\n          custom.relations[childs[j][k].to.id] = {\n            id: childs[j][k].to,\n            name: childs[j][k].toName,\n            parent: entities[j],\n            child: [],\n            type: 'CUSTOMER',\n          };\n          custom.relations[entities[j].id.id].child.push(custom.relations[childs[j][k].to.id]);\n          if (childs[j][k].to.entityType === 'USER') {\n            custom.relations[childs[j][k].to.id].type = 'USER';\n          }\n          if (childs[j][k].to.entityType === 'DEVICE') {\n            custom.relations[childs[j][k].to.id].type = 'DEVICE';\n          }\n          if (childs[j][k].to.entityType === 'ASSET') {\n            custom.relations[childs[j][k].to.id].type = 'ASSET';\n          }\n          if (childs[j][k].to.entityType === 'CUSTOMER') {\n            newChild.push(custom.relations[childs[j][k].to.id]);\n          }\n        }\n      }\n      getCustomer(newChild);\n    });\n  } else {\n    distributeLevel();\n  }\n}\n\n// hierarchy 레벨에 따라 배열에 따로 저장\nfunction distributeLevel() {\n  let { custom, $scope } = self.ctx;\n  let depth = $scope.ownerLevel;\n  let root = custom.relations[custom.rootEntity.id.id];\n  root.type = ENTITY_TYPE[depth];\n  for (let i in root.child) {\n    if (root.child[i].type == 'CUSTOMER') {\n      root.child[i].type = ENTITY_TYPE[depth + 1];\n    }\n    for (let j in root.child[i].child) {\n      if (root.child[i].child[j].type == 'CUSTOMER') {\n        root.child[i].child[j].type = ENTITY_TYPE[depth + 2];\n      }\n    }\n  }\n  custom.customerL1List = [];\n  custom.customerL2List = [];\n\n  for (let i in custom.relations) {\n    if (custom.relations[i].type == ENTITY_TYPE[1]) {\n      custom.customerL1List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[2]) {\n      custom.customerL2List.push(custom.relations[i]);\n    }\n  }\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL1List = $scope.customerL1List.concat(\n    custom.customerL1List.map(x => {\n      return { name: x.name, value: x.id.id };\n    })\n  );\n\n  changeCustomerL2List();\n  self.ctx.detectChanges();\n}\n\n// Customer L2 리스트 갱신\nfunction changeCustomerL2List() {\n  let { custom, $scope } = self.ctx;\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n\n  if ($scope.selectedCustomerL1 === '') {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n  } else {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL1)\n        .map(x => {\n          return { name: x.name, value: x.id.id };\n        })\n    );\n  }\n}\n\nfunction updateDashboardState() {\n  let { custom, $scope } = self.ctx;\n  let target,\n    param = {};\n  if ($scope.selectedCustomerL2 != '') {\n    target = custom.relations[$scope.selectedCustomerL2];\n  } else if ($scope.selectedCustomerL1 != '') {\n    target = custom.relations[$scope.selectedCustomerL1];\n  }\n  if (target) {\n    param = {\n      entityId: target.id,\n      entityName: target.name,\n      entityLabel: target.label,\n    };\n  }\n  if ($scope.selectedCustomerL1 != '') {\n    let customerL1 = custom.relations[$scope.selectedCustomerL1];\n    param.customerL1 = {\n      entityId: customerL1.id,\n      entityName: customerL1.name,\n      entityLabel: customerL1.label,\n    };\n  }\n  if ($scope.selectedCustomerL2 != '') {\n    let customerL2 = custom.relations[$scope.selectedCustomerL2];\n    param.customerL2 = {\n      entityId: customerL2.id,\n      entityName: customerL2.name,\n      entityLabel: customerL2.label,\n    };\n  }\n  self.ctx.stateController.updateState('default', param, null);\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgba(255,255,255,0)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"Simple Workspace Selector\",\"showTitleIcon\":false,\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false,\"titleTooltip\":\"\",\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"2em\",\"font-weight\":500,\"letter-spacing\":\"-0.05em\",\"color\":\"var(--tb-service-font-5)\"}}"
      }
    },
    {
      "alias": "date_range_selector",
      "name": "Date Range Selector",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 9,
        "sizeY": 1,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\">\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\" translate>title</div>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex fxLayoutAlign=\"end center\">\n      <div class=\"entity-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.8em\" fxShow.lt-md=\"false\">\n        <span class=\"normal-label\" translate>thingplus.selector.device-selection</span>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel == 0\"\n          (ngModelChange)=\"setCustomerL1($event)\"\n          [ngModel]=\"selectedCustomerL1\"\n        >\n          <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n            {{customerL1.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel <= 1\"\n          (ngModelChange)=\"setCustomerL2($event)\"\n          [ngModel]=\"selectedCustomerL2\"\n        >\n          <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n            {{customerL2.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select class=\"entity-selector\" (ngModelChange)=\"setDevice($event)\" [ngModel]=\"selectedDevice\">\n          <mat-option *ngFor=\"let device of deviceList\" [value]=\"device.value\"> {{device.label}} </mat-option>\n        </mat-select>\n      </div>\n      <div class=\"date-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.8em\" fxShow.lt-md=\"false\">\n        <div class=\"normal-label\" translate>thingplus.selector.date-selection</div>\n        <mat-select\n          class=\"date-selector date-group-selector\"\n          (ngModelChange)=\"setDateGroup($event)\"\n          [ngModel]=\"selectedDateGroup\"\n        >\n          <mat-option *ngFor=\"let dateGroup of dateGroupList\" [value]=\"dateGroup.value\">\n            {{dateGroup.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select\n          class=\"date-selector date-range-selector\"\n          (ngModelChange)=\"setDateRange($event)\"\n          [ngModel]=\"selectedDateRange\"\n        >\n          <mat-option *ngFor=\"let dateRange of dateRangeList\" [value]=\"dateRange.value\">\n            {{dateRange.name}}\n          </mat-option>\n        </mat-select>\n      </div>\n      <button class=\"action-btn text-btn\" (click)=\"search($event)\" fxShow.lt-md=\"false\">\n        <span translate>thingplus.action.search</span>\n      </button>\n      <button class=\"action-btn text-btn\" (click)=\"openFilter($event)\" fxShow.gt-sm=\"false\">\n        <span translate>thingplus.action.search</span>\n      </button>\n    </section>\n  </header>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  height: 100%;\n  padding: var(--tb-config-padding);\n}\n\n.normal-label {\n  font-size: 1.2em;\n  font-weight: 500;\n  line-height: 1.17;\n  letter-spacing: -0.03em;\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n}\n\n/* widget-header-right-section */\n/* Entity Controller */\n.widget-header-right-section .entity-controller {\n  margin-right: var(--tb-config-padding);\n}\n.widget-header-right-section .mat-select {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .mat-select:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .mat-select-trigger {\n  width: 13em;\n  min-width: 130px;\n  padding: calc(9em / 14);\n  font-size: 1.4em;\n  line-height: 1;\n}\n.widget-header-right-section .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n.widget-header-right-section .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n\n.widget-header-right-section .date-controller {\n  margin-right: 0.8em;\n}\n.widget-header-right-section .date-group-selector .mat-select-trigger {\n  width: 8em;\n  min-width: 80px;\n}\n\n/* Action Button */\n.widget-header-right-section .action-btn {\n  all: unset;\n  line-height: 1.3;\n  cursor: pointer;\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n  white-space: nowrap;\n}\n.widget-header-right-section .text-btn {\n  padding: 0.6em 1.6em;\n  background-color: var(--tb-service-accent);\n  border: 1px solid var(--tb-service-accent);\n}\n.widget-header-right-section .text-btn:hover {\n  background-color: var(--tb-service-accent-hover);\n  border-color: var(--tb-service-accent-hover);\n}\n.widget-header-right-section .text-btn:active {\n  background-color: var(--tb-service-accent-pressed);\n  border-color: var(--tb-service-accent-pressed);\n}\n.widget-header-right-section .text-btn span {\n  font-size: 1.4em;\n  color: var(--tb-service-font-0);\n}\n\n@media (max-width: 959px) {\n  header.widget-header {\n    padding: 0px;\n  }\n}\n",
        "controllerScript": "const ENTITY_TYPE = ['TENANT', 'CUSTOMER_L1', 'CUSTOMER_L2'];\nconst SELECTOR_START = '2023-01-01';\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  getDashboardParameter();\n\n  self.onResize();\n\n  if (!custom.isSample) {\n    // 현재 사용자의 Root 엔터티로부터 관계 트리 형성\n    custom.relations[custom.rootEntity.id.id] = {\n      id: custom.rootEntity.id,\n      name: custom.rootEntity.name,\n      parent: '',\n      child: [],\n    };\n    $scope.ownerLevel = await getCurrentLevel();\n    getCustomer([custom.relations[custom.rootEntity.id.id]]);\n  }\n  self.onResize();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.actionSources = function () {\n  return {\n    filterAction: {\n      name: 'Filter Action',\n      multiple: false,\n    },\n  };\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n\n  // Define Scope Variables\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n  $scope.deviceList = [\n    { name: t('thingplus.selector.select-device'), label: t('thingplus.selector.select-device'), value: '' },\n  ];\n  $scope.selectedCustomerL1 = '';\n  $scope.selectedCustomerL2 = '';\n  $scope.selectedDevice = '';\n  $scope.ownerLevel = 2;\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.rootEntity = custom.ownerDatasource.entity;\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.relations = [];\n  custom.ymd = t('thingplus.time-format.ymd');\n\n  let now = moment().valueOf();\n  custom.startTs = moment(now).startOf('day').valueOf();\n  custom.endTs = moment(now).valueOf();\n  $scope.dateGroupList = [\n    { name: t('thingplus.time-format.daily'), value: 'DAY' },\n    { name: t('thingplus.time-format.weekly2'), value: 'WEEK' },\n    { name: t('thingplus.time-format.monthly'), value: 'MONTH' },\n  ];\n  $scope.selectedDateGroup = 'DAY';\n  $scope.dateRangeList = getDateRangeList($scope.selectedDateGroup);\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(self.ctx.widget.config.title);\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope } = self.ctx;\n  $scope.setCustomerL1 = function (e) {\n    $scope.selectedCustomerL1 = e;\n    $scope.selectedCustomerL2 = '';\n    $scope.selectedDevice = '';\n    changeCustomerL2List();\n    changeDeviceList();\n  };\n  $scope.setCustomerL2 = function (e) {\n    $scope.selectedCustomerL2 = e;\n    $scope.selectedDevice = '';\n    changeDeviceList();\n  };\n  $scope.setDevice = function (e) {\n    $scope.selectedDevice = e;\n  };\n  $scope.search = function (e) {\n    updateDashboardState();\n  };\n  $scope.setDateGroup = function (e) {\n    $scope.selectedDateGroup = e;\n    $scope.dateRangeList = getDateRangeList($scope.selectedDateGroup);\n  };\n  $scope.setDateRange = function (e) {\n    $scope.selectedDateRange = e;\n  };\n  $scope.openFilter = function (e) {\n    let descriptor = self.ctx.actionsApi.getActionDescriptors('filterAction')[0];\n    self.ctx.actionsApi.handleWidgetAction(\n      {},\n      descriptor,\n      custom.ownerDatasource.entity.id,\n      custom.ownerDatasource.entityName,\n      {},\n      custom.ownerDatasource.entityLabel\n    );\n  };\n}\n\nfunction getDashboardParameter() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return {};\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n  if (custom.dashboardParams) {\n    if (custom.dashboardParams.customerL1) {\n      $scope.selectedCustomerL1 = custom.dashboardParams.customerL1.entityId.id;\n    }\n    if (custom.dashboardParams.customerL2) {\n      $scope.selectedCustomerL2 = custom.dashboardParams.customerL2.entityId.id;\n    }\n    if (custom.dashboardParams.entityId && custom.dashboardParams.entityId.entityType == 'DEVICE') {\n      $scope.selectedDevice = custom.dashboardParams.entityId.id;\n    }\n    if (custom.dashboardParams.dateGroup) {\n      $scope.selectedDateGroup = custom.dashboardParams.dateGroup;\n      $scope.dateRangeList = getDateRangeList($scope.selectedDateGroup);\n    }\n    if (custom.dashboardParams.dateRange) {\n      $scope.selectedDateRange = custom.dashboardParams.dateRange;\n    }\n    console.log($scope.selectedDateRange);\n\n    self.ctx.detectChanges();\n  }\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n    if (self.ctx.width < 600) {\n      originWidth = 600;\n    }\n  }\n  let widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  custom.$widget.css('font-size', `${widgetFontSize}px`);\n}\n\nasync function getCurrentLevel() {\n  let { custom } = self.ctx;\n  if (custom.rootEntity.id.entityType == 'TENANT') {\n    return 0;\n  } else {\n    let result = await self.ctx.attributeService\n      .getEntityAttributes(custom.rootEntity.id, 'SERVER_SCOPE', ['customerType'])\n      .toPromise();\n    if (result && result[0]) {\n      if (result[0].value == ENTITY_TYPE[1]) {\n        return 1;\n      } else {\n        return 2;\n      }\n    }\n  }\n}\n\nfunction getCustomer(entities) {\n  let { custom } = self.ctx;\n  let promises = [];\n  if (entities.length > 0) {\n    for (let i = 0; i < entities.length; i++) {\n      promises.push(self.ctx.entityRelationService.findInfoByFrom(entities[i].id));\n    }\n    self.ctx.rxjs.forkJoin(promises).subscribe(childs => {\n      let newChild = [];\n      for (let j = 0; j < childs.length; j++) {\n        for (let k = 0; k < childs[j].length; k++) {\n          custom.relations[childs[j][k].to.id] = {\n            id: childs[j][k].to,\n            name: childs[j][k].toName,\n            parent: entities[j],\n            child: [],\n            type: 'CUSTOMER',\n          };\n          custom.relations[entities[j].id.id].child.push(custom.relations[childs[j][k].to.id]);\n          if (childs[j][k].to.entityType === 'USER') {\n            custom.relations[childs[j][k].to.id].type = 'USER';\n          }\n          if (childs[j][k].to.entityType === 'DEVICE') {\n            custom.relations[childs[j][k].to.id].type = 'DEVICE';\n          }\n          if (childs[j][k].to.entityType === 'ASSET') {\n            custom.relations[childs[j][k].to.id].type = 'ASSET';\n          }\n          if (childs[j][k].to.entityType === 'CUSTOMER') {\n            newChild.push(custom.relations[childs[j][k].to.id]);\n          }\n        }\n      }\n      getCustomer(newChild);\n    });\n  } else {\n    distributeLevel();\n  }\n}\n\n// hierarchy 레벨에 따라 배열에 따로 저장\nfunction distributeLevel() {\n  let { custom, $scope } = self.ctx;\n  let depth = $scope.ownerLevel;\n  let root = custom.relations[custom.rootEntity.id.id];\n  root.type = ENTITY_TYPE[depth];\n  for (let i in root.child) {\n    if (root.child[i].type == 'CUSTOMER') {\n      root.child[i].type = ENTITY_TYPE[depth + 1];\n    }\n    for (let j in root.child[i].child) {\n      if (root.child[i].child[j].type == 'CUSTOMER') {\n        root.child[i].child[j].type = ENTITY_TYPE[depth + 2];\n      }\n    }\n  }\n  custom.customerL1List = [];\n  custom.customerL2List = [];\n  custom.deviceList = [];\n\n  for (let i in custom.relations) {\n    if (custom.relations[i].type == ENTITY_TYPE[1]) {\n      custom.customerL1List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[2]) {\n      custom.customerL2List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == 'DEVICE') {\n      custom.deviceList.push(custom.relations[i]);\n    }\n  }\n\n  getDeviceInfo();\n}\n\nfunction getDeviceInfo() {\n  let { custom, $scope } = self.ctx;\n  let observables = [];\n  custom.deviceList = [];\n  for (let i in custom.customerL2List) {\n    let customerId = custom.customerL2List[i].id.id;\n    observables.push(self.ctx.http.get(`/api/customer/${customerId}/deviceInfos?pageSize=50000&page=0`));\n  }\n\n  self.ctx.rxjs.forkJoin(observables).subscribe(devices => {\n    for (let i in devices) {\n      for (let j in devices[i].data) {\n        custom.relations[devices[i].data[j].id.id].label =\n          devices[i].data[j].label != '' ? devices[i].data[j].label : devices[i].data[j].name;\n        custom.deviceList.push(custom.relations[devices[i].data[j].id.id]);\n      }\n    }\n\n    $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n    $scope.customerL1List = $scope.customerL1List.concat(\n      custom.customerL1List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n\n    changeCustomerL2List();\n    changeDeviceList();\n    self.ctx.detectChanges();\n  });\n}\n\n// Customer L2 리스트 갱신\nfunction changeCustomerL2List() {\n  let { custom, $scope } = self.ctx;\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n\n  if ($scope.selectedCustomerL1 === '') {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n  } else {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL1)\n        .map(x => {\n          return { name: x.name, value: x.id.id };\n        })\n    );\n  }\n}\n\n// 디바이스 리스트 갱신\nfunction changeDeviceList() {\n  let { custom, $scope } = self.ctx;\n  $scope.deviceList = [];\n\n  if ($scope.selectedCustomerL2 === '') {\n    if ($scope.selectedCustomerL1 === '') {\n      $scope.deviceList = $scope.deviceList.concat(\n        custom.deviceList.map(x => {\n          return { name: x.name, label: x.label, value: x.id.id };\n        })\n      );\n    } else {\n      $scope.deviceList = $scope.deviceList.concat(\n        custom.deviceList\n          .filter(x => x.parent.parent.id.id === $scope.selectedCustomerL1)\n          .map(x => {\n            return { name: x.name, label: x.label, value: x.id.id };\n          })\n      );\n    }\n  } else {\n    $scope.deviceList = $scope.deviceList.concat(\n      custom.deviceList\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL2)\n        .map(x => {\n          return { name: x.name, label: x.label, value: x.id.id };\n        })\n    );\n  }\n  $scope.deviceList.sort((a, b) => {\n    if (a.label > b.label) return 1;\n    if (a.label < b.label) return -1;\n    return 0;\n  });\n  $scope.deviceList = [\n    { name: t('thingplus.selector.select-device'), label: t('thingplus.selector.select-device'), value: '' },\n  ].concat($scope.deviceList);\n}\n\nfunction updateDashboardState() {\n  let { custom, $scope } = self.ctx;\n  if ($scope.selectedDevice == '') {\n    window.alert(t('thingplus.help.error-select-device'));\n    return;\n  }\n  let target = custom.relations[$scope.selectedDevice];\n  let param = {\n    entityId: target.id,\n    entityName: target.name,\n    entityLabel: target.label,\n  };\n  if (target) {\n    param = {\n      entityId: target.id,\n      entityName: target.name,\n      entityLabel: target.label,\n    };\n  }\n  if ($scope.selectedCustomerL1 != '') {\n    let customerL1 = custom.relations[$scope.selectedCustomerL1];\n    param.customerL1 = {\n      entityId: customerL1.id,\n      entityName: customerL1.name,\n      entityLabel: customerL1.label,\n    };\n  }\n  if ($scope.selectedCustomerL2 != '') {\n    let customerL2 = custom.relations[$scope.selectedCustomerL2];\n    param.customerL2 = {\n      entityId: customerL2.id,\n      entityName: customerL2.name,\n      entityLabel: customerL2.label,\n    };\n  }\n  if ($scope.selectedDevice != '') {\n    let device = custom.relations[$scope.selectedDevice];\n    param.device = {\n      entityId: device.id,\n      entityName: device.name,\n      entityLabel: device.label,\n    };\n  }\n  param.dateGroup = $scope.selectedDateGroup;\n  param.dateRange = $scope.selectedDateRange;\n  param.startTs = param.dateRange;\n  if (param.dateGroup == 'DAY') {\n    param.endTs = moment(param.dateRange).add(1, 'months').valueOf();\n  } else if (param.dateGroup == 'WEEK') {\n    param.endTs = moment(param.dateRange).add(1, 'quarters').valueOf();\n  } else if (param.dateGroup == 'MONTH') {\n    param.endTs = moment(param.dateRange).add(1, 'years').valueOf();\n  }\n  if (param.endTs > moment().valueOf()) {\n    param.endTs = moment().valueOf();\n  }\n\n  self.ctx.stateController.updateState('default', param, null);\n  self.ctx.updateAliases();\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n\nfunction getDateRangeList(group) {\n  let { custom, $scope } = self.ctx;\n  let result = [];\n  let nowTs = moment().endOf('month').valueOf();\n  let startTs = moment(SELECTOR_START).valueOf();\n\n  while (startTs < nowTs) {\n    if (group === 'DAY') {\n      result.push({ name: moment(startTs).format(t('thingplus.time-format.ym-str')), value: startTs });\n      startTs = moment(startTs).add(1, 'months').valueOf();\n    } else if (group === 'WEEK') {\n      result.push({ name: moment(startTs).format(t('thingplus.time-format.yq-str')), value: startTs });\n      startTs = moment(startTs).add(1, 'quarters').valueOf();\n    } else if (group === 'MONTH') {\n      result.push({ name: moment(startTs).format(t('thingplus.time-format.y-str')), value: startTs });\n      startTs = moment(startTs).add(1, 'years').valueOf();\n    }\n  }\n  result.sort((a, b) => {\n    if (a.value < b.value) return 1;\n    if (a.value > b.value) return -1;\n    return 0;\n  });\n\n  $scope.selectedDateRange = result[0].value;\n\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgba(255,255,255,0)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"Date Range Selector\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"1.6em\",\"font-weight\":600,\"letter-spacing\":\"var(--tb-config-letter-spacing)\",\"color\":\"var(--tb-service-font-5)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    }
  ]
}