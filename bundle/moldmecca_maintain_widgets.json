{
  "widgetsBundle": {
    "alias": "moldmecca_maintain_widgets",
    "title": "Moldmecca Maintain Widgets",
    "image": null,
    "description": null
  },
  "widgetTypes": [
    {
      "alias": "maintain_entity",
      "name": "Maintain Entity",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <div class=\"widget-tab\" fxLayoutAlign=\"start center\" *ngIf=\"tabList && tabList.length > 1\">\n    <div\n      class=\"tab\"\n      *ngFor=\"let tab of tabList\"\n      fxLayoutAlign=\"center center\"\n      [ngClass]=\"{'active': tab.isActive}\"\n      (click)=\"selectTab(tab.id)\"\n    >\n      {{tab.label | translate}}\n    </div>\n  </div>\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\">\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\" translate>title</div>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <div\n        class=\"entity-controller\"\n        *ngIf=\"ownerLevel == 0 && filterLevel <= 1\"\n        fxLayoutAlign=\"end center\"\n        fxLayoutGap=\"1em\"\n      >\n        <span class=\"normal-label\" translate> thingplus.selector.target-selection </span>\n        <mat-select class=\"entity-selector\" (ngModelChange)=\"setCustomerL1($event)\" [ngModel]=\"selectedCustomerL1\">\n          <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n            {{customerL1.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select\n          class=\"entity-selector\"\n          *ngIf=\"filterLevel == 0\"\n          (ngModelChange)=\"setCustomerL2($event)\"\n          [ngModel]=\"selectedCustomerL2\"\n        >\n          <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n            {{customerL2.name}}\n          </mat-option>\n        </mat-select>\n      </div>\n      <div class=\"widget-action\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n        <div\n          class=\"widget-header-action\"\n          *ngFor=\"let headerAction of headerActionList\"\n          fxLayoutAlign=\"start center\"\n          fxLayoutGap=\"0.5em\"\n          (click)=\"headerAction.action($event)\"\n        >\n          <span translate>{{headerAction.name}}</span>\n          <i class=\"material-icons\">{{headerAction.icon}}</i>\n        </div>\n      </div>\n    </section>\n  </header>\n  <main class=\"widget-content\">\n    <section class=\"table-section\">\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th *ngFor=\"let th of thList\" (click)=\"changeSort($event, th)\" [ngClass]=\"th.order\">\n              <div class=\"th-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <span class=\"th-label\">{{th.label}}</span>\n                <i class=\"th-sort material-icons\">arrow_upward</i>\n              </div>\n            </th>\n            <th *ngIf=\"hasCellAction\" [ngStyle]=\"{'width': actionSize}\"></th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tr of trList\">\n            <td\n              *ngFor=\"let td of tr.tdList\"\n              [ngStyle]=\"td.style\"\n              [innerHTML]=\"td.value\"\n              (click)=\"td.action && td.action($event)\"\n            ></td>\n            <td *ngIf=\"hasCellAction\" class=\"action\">\n              <div class=\"cell-action-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <i\n                  *ngFor=\"let cellAction of cellActionList\"\n                  class=\"material-icons cell-action\"\n                  (click)=\"cellAction.action($event, tr.index)\"\n                >\n                  {{cellAction.icon}}\n                </i>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </section>\n  </main>\n  <footer class=\"widget-footer\" fxLayoutAlign=\"end center\">\n    <section class=\"page-section\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.5em\">\n      <div class=\"material-icons page-button first-button\" (click)=\"getFirstPage()\">first_page</div>\n      <div class=\"material-icons page-button prev-button\" (click)=\"getPrevPage()\">keyboard_arrow_left</div>\n      <div\n        class=\"page-button page-number-button\"\n        [class.big]=\"page.isBig\"\n        [class.active]=\"page.isActive\"\n        *ngFor=\"let page of pageList\"\n        (click)=\"changePage($event, page)\"\n      >\n        {{page.number}}\n      </div>\n      <div class=\"material-icons page-button next-button\" (click)=\"getNextPage()\">keyboard_arrow_right</div>\n      <div class=\"material-icons page-button last-button\" (click)=\"getLastPage()\">last_page</div>\n    </section>\n  </footer>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n  white-space: nowrap;\n  letter-spacing: var(--tb-config-letter-spacing);\n}\n\n.widget-tab {\n  width: 100%;\n  height: 5em;\n  min-height: 30px;\n  background-color: var(--tb-service-background-2);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.tab {\n  min-width: 8em;\n  height: 100%;\n  font-size: 1.4em;\n  font-weight: 500;\n  border-right: 1px solid var(--tb-service-border-1);\n  color: var(--tb-service-font-3);\n  cursor: pointer;\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.tab.active {\n  background-color: var(--tb-service-background-0);\n  color: var(--tb-service-font-5);\n  border-top: 0.2em solid var(--tb-service-accent);\n  border-bottom: 1px solid var(--tb-service-background-0);\n  box-sizing: content-box !important;\n}\n.tab:not(.active):hover {\n  color: var(--tb-service-font-4);\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n}\n\n/* widget-header-right-section */\n.normal-label {\n  font-size: 1.2em;\n  font-weight: 500;\n  line-height: 1.17;\n  letter-spacing: -0.03em;\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n}\n.widget-header-right-section .mat-select {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .mat-select:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .mat-select-trigger {\n  width: 13em;\n  min-width: 130px;\n  padding: calc(9em / 14);\n  font-size: 1.4em;\n  line-height: 1;\n}\n.widget-header-right-section .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n.widget-header-right-section .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n.widget-header-right-section .widget-header-action {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0.6em 1.2em;\n  cursor: pointer;\n  border: 1px solid var(--tb-service-accent);\n  background-color: var(--tb-service-accent);\n  color: var(--tb-service-font-0);\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .widget-header-action span {\n  font-size: 1.4em;\n  font-weight: bold;\n  white-space: nowrap;\n}\n.widget-header-right-section .widget-header-action i {\n  font-size: 1.4em;\n  font-weight: bold;\n}\n.widget-header-right-section .widget-header-action:hover {\n  border-color: var(--tb-service-accent-hover);\n  background-color: var(--tb-service-accent-hover);\n}\n.widget-header-right-section .widget-header-action:active {\n  border-color: var(--tb-service-accent-pressed);\n  background-color: var(--tb-service-accent-pressed);\n}\n\n/*\n  Widget Content Area\n*/\nmain.widget-content {\n  width: 100%;\n}\n\n/* table-section */\n.table-section {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n.table-section::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n.table-section::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n.table-section::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n.table-section .table {\n  min-width: 100%;\n  border-spacing: 0px;\n  box-sizing: border-box;\n  table-layout: fixed;\n  border-collapse: collapse;\n  white-space: nowrap;\n}\n.table-section thead tr {\n  background-color: var(--tb-service-background-1);\n  border-top: 1px solid var(--tb-service-border-1);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.table-section th {\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  padding: 1.68em;\n  text-align: left;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 1em;\n  line-height: 1;\n}\n.table-section th .th-label {\n  font-size: 1.2em;\n  margin-right: 0.5em;\n}\n.table-section th .th-sort {\n  font-size: 1.4em;\n  opacity: 0;\n  vertical-align: top;\n  transition-property: transform, opacity;\n  transition-duration: var(--tb-config-color-duration);\n  color: var(--tb-service-accent);\n}\n.table-section th:not(.DESC):not(.ASC):hover .th-sort {\n  opacity: 0.4;\n}\n.table-section th.ASC .th-sort {\n  opacity: 1;\n  transform: rotate(0deg);\n}\n.table-section th.DESC .th-sort {\n  opacity: 1;\n  transform: rotate(180deg);\n}\n.table-section tbody tr {\n  border-bottom: 1px solid var(--tb-service-border-1);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section tbody tr:nth-child(odd) {\n  background-color: var(--tb-service-background-0);\n}\n.table-section tbody tr:nth-child(even) {\n  background-color: var(--tb-service-background-1);\n}\n.table-section td {\n  line-height: 1;\n}\n.table-section td:not(.action) {\n  color: var(--tb-service-font-4);\n  padding: 1.2em;\n  font-size: 1.4em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  user-select: text;\n}\n.table-section tbody tr:hover {\n  background-color: var(--tb-service-background-2);\n}\n.table-section td.action {\n  font-size: 1em;\n  padding: 0em 1.68em;\n  text-overflow: initial;\n}\n.table-section .cell-action {\n  font-size: 2em;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section .cell-action:hover {\n  color: var(--tb-service-font-5);\n}\n.table-section .cell-action.active {\n  color: var(--tb-service-accent);\n}\n.table-section .activate-switch {\n  position: relative;\n  width: 3.6em;\n  height: 1.6em;\n  border-radius: 0.8em;\n  background-color: var(--tb-service-font-3);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n  margin: auto;\n  cursor: pointer;\n}\n.table-section .activate-switch.active {\n  background-color: var(--tb-service-accent);\n}\n.table-section .activate-switch .ball {\n  position: absolute;\n  top: 50%;\n  left: 0.8em;\n  transform: translate(-50%, -50%);\n  width: 1.2em;\n  height: 1.2em;\n  border-radius: 0.6em;\n  background-color: var(--tb-service-background-0);\n  transition-property: left;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section .activate-switch.active .ball {\n  left: calc(100% - 0.8em);\n}\n\n/*\n  Widget Footer Area\n*/\nfooter.widget-footer {\n  width: 100%;\n  padding: var(--tb-config-padding);\n}\n\n/* page-section */\n.page-section .page-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 2em;\n  min-width: 20px;\n  height: 2em;\n  min-height: 20px;\n  font-size: 1.2em;\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  cursor: pointer;\n  color: var(--tb-service-font-4);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.page-section .first-button,\n.page-section .last-button,\n.page-section .prev-button,\n.page-section .next-button {\n  font-size: 1.6em;\n  width: 1.5em;\n  height: 1.5em;\n}\n.page-section .page-button:not(.active):hover {\n  border: 1px solid var(--tb-service-accent-hover);\n}\n.page-section .page-button:not(.active):active {\n  border: 1px solid var(--tb-service-accent-pressed);\n}\n.page-section .page-button.big-page {\n  width: 3.5em;\n  min-width: 35px;\n}\n.page-section .page-number-button.active {\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-accent);\n}\n",
        "controllerScript": "const ENTITY_TYPE = ['TENANT', 'CUSTOMER_L1', 'CUSTOMER_L2'];\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  makeTab();\n  makeHead();\n  initPage();\n  makeBody();\n  self.onResize();\n\n  // Action 파트에서 사용하기 위한 설정\n  if (!custom.isSample) {\n    // 현재 사용자의 Root 엔터티로부터 관계 트리 형성\n    custom.relations[custom.rootEntity.id.id] = {\n      id: custom.rootEntity.id,\n      name: custom.rootEntity.name,\n      parent: '',\n      child: [],\n    };\n    $scope.ownerLevel = await getCurrentLevel();\n    await getCustomer([custom.relations[custom.rootEntity.id.id]]);\n  }\n  custom.isInitialized = true;\n  self.onDataUpdated();\n  self.onResize();\n};\n\nself.onDataUpdated = function () {\n  let { custom } = self.ctx;\n  if (custom.isInitialized && custom.originDataKeys.length > 0) {\n    custom.mainData = preprocessData();\n    sortData();\n    insertData();\n  }\n  self.ctx.detectChanges();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.actionSources = function () {\n  return {\n    widgetHeaderButton: {\n      name: 'Custom Header Button',\n      multiple: true,\n    },\n    actionCellButton: {\n      name: 'widget-action.action-cell-button',\n      multiple: true,\n    },\n    customAction: {\n      name: 'Custom Action',\n      multiple: true,\n    },\n  };\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n  custom.$widgetAction = $('.widget-action', $container);\n  custom.$widgetContent = $('.widget-content', $container);\n  custom.$table = $('.table', $container);\n  custom.$theadTr = $('.table thead tr', $container);\n  custom.$tbody = $('.table tbody', $container);\n  custom.$widgetFooter = $('.widget-footer', $container);\n\n  // Define Scope Variables\n  $scope.tabList = [];\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n  $scope.selectedCustomerL1 = '';\n  $scope.selectedCustomerL2 = '';\n  $scope.ownerLevel = 2;\n  $scope.filterLevel = self.ctx.settings.widget.filterLevel;\n  $scope.thList = [];\n  $scope.trList = [];\n  $scope.pageList = [];\n  $scope.headerActionList = self.ctx.actionsApi.getActionDescriptors('widgetHeaderButton').map(x => {\n    return { name: x.name, icon: x.icon, action: e => handleHeaderAction(x) };\n  });\n  $scope.cellActionList = self.ctx.actionsApi.getActionDescriptors('actionCellButton').map(x => {\n    return { name: x.name, icon: x.icon, action: (e, i) => handleCellAction(x, i) };\n  });\n  $scope.hasCellAction = $scope.cellActionList.length > 0;\n  $scope.actionSize = `${$scope.cellActionList.length * 2 + 3.36 + ($scope.cellActionList.length - 1) * 0.5}em`;\n\n  // Define Normal Variables\n  custom.relations = {};\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.rootEntity = custom.ownerDatasource.entity;\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.hiddenDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.ownerDatasource.entityAliasId);\n  custom.mainDatasources = self.ctx.datasources.filter(x => x.entityAliasId !== custom.ownerDatasource.entityAliasId);\n  custom.originDataKeys = self.ctx.defaultSubscription.configuredDatasources[1].dataKeys.filter(\n    x => x.settings.hidden !== true\n  );\n  custom.targetDatasources = [];\n  custom.isInitialized = false;\n  custom.selectedIndex = 0;\n  custom.currentPage = 1;\n  custom.countPerPage = 10;\n  custom.t = t;\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(self.ctx.widget.config.title);\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope } = self.ctx;\n  $scope.selectTab = function (e) {\n    let state = e || 'default';\n    let param = custom.dashboardParams || {};\n    self.ctx.stateController.updateState(state, param, null);\n  };\n  $scope.setCustomerL1 = function (e) {\n    $scope.selectedCustomerL1 = e;\n    $scope.selectedCustomerL2 = '';\n    changeCustomerL2List();\n    filterDatasources();\n  };\n  $scope.setCustomerL2 = function (e) {\n    $scope.selectedCustomerL2 = e;\n    filterDatasources();\n  };\n  $scope.getPrevPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage--;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getNextPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage++;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getFirstPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage = 1;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getLastPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage = custom.totalPage;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.changePage = function (e, page) {\n    if (!page.isActive) {\n      custom.currentPage = page.number;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.changeSort = function (e, th) {\n    if (th.isAction) return;\n    if (th.index == custom.selectedIndex) {\n      if (th.order != 'ASC') {\n        $scope.thList[th.index].order = 'ASC';\n      } else {\n        $scope.thList[th.index].order = 'DESC';\n      }\n    } else {\n      $scope.thList.forEach(x => (x.order = ''));\n      custom.selectedIndex = th.index;\n      $scope.thList[th.index].order = 'ASC';\n    }\n    initPage();\n    makeBody();\n    sortData();\n    insertData();\n  };\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  let widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (widgetFontSize < 6.25) {\n    widgetFontSize = 6.25;\n  }\n  custom.$widget.css('font-size', `${widgetFontSize}px`);\n\n  // Header와 Footer Height를 제외한 영역을 Main의 Height로 설정\n  let headerHeight = custom.$widgetHeader.outerHeight(true);\n  let footerHeight = custom.$widgetFooter.outerHeight(true);\n  custom.$widgetContent.css('height', `calc(100% - ${headerHeight + footerHeight}px)`);\n}\n\nasync function getCurrentLevel() {\n  let { custom } = self.ctx;\n  if (custom.rootEntity.id.entityType == 'TENANT') {\n    return 0;\n  } else {\n    let result = await self.ctx.attributeService\n      .getEntityAttributes(custom.rootEntity.id, 'SERVER_SCOPE', ['customerType'])\n      .toPromise();\n    if (result && result[0]) {\n      if (result[0].value == 'CUSTOMER_L1') {\n        return 1;\n      } else {\n        return 2;\n      }\n    }\n  }\n}\n\nfunction getCustomer(entities) {\n  return new Promise(resolve => {\n    let { custom } = self.ctx;\n    let promises = [];\n    if (entities.length > 0) {\n      for (let i = 0; i < entities.length; i++) {\n        promises.push(self.ctx.entityRelationService.findInfoByFrom(entities[i].id));\n      }\n      self.ctx.rxjs.forkJoin(promises).subscribe(async childs => {\n        let newChild = [];\n        for (let j = 0; j < childs.length; j++) {\n          for (let k = 0; k < childs[j].length; k++) {\n            custom.relations[childs[j][k].to.id] = {\n              id: childs[j][k].to,\n              name: childs[j][k].toName,\n              parent: entities[j],\n              child: [],\n              type: 'CUSTOMER',\n            };\n            custom.relations[entities[j].id.id].child.push(custom.relations[childs[j][k].to.id]);\n            if (childs[j][k].to.entityType === 'USER') {\n              custom.relations[childs[j][k].to.id].type = 'USER';\n            }\n            if (childs[j][k].to.entityType === 'DEVICE') {\n              custom.relations[childs[j][k].to.id].type = 'DEVICE';\n            }\n            if (childs[j][k].to.entityType === 'ASSET') {\n              custom.relations[childs[j][k].to.id].type = 'ASSET';\n            }\n            if (childs[j][k].to.entityType === 'CUSTOMER') {\n              newChild.push(custom.relations[childs[j][k].to.id]);\n            }\n          }\n        }\n        await getCustomer(newChild);\n        resolve();\n      });\n    } else {\n      distributeLevel();\n      resolve();\n    }\n  });\n}\n\n// hierarchy 레벨에 따라 배열에 따로 저장\nfunction distributeLevel() {\n  let { custom, $scope } = self.ctx;\n  let depth = $scope.ownerLevel;\n  let root = custom.relations[custom.rootEntity.id.id];\n  root.type = ENTITY_TYPE[depth];\n  for (let i in root.child) {\n    if (root.child[i].type == 'CUSTOMER') {\n      root.child[i].type = ENTITY_TYPE[depth + 1];\n    }\n    for (let j in root.child[i].child) {\n      if (root.child[i].child[j].type == 'CUSTOMER') {\n        root.child[i].child[j].type = ENTITY_TYPE[depth + 2];\n      }\n    }\n  }\n  custom.customerL1List = [];\n  custom.customerL2List = [];\n\n  for (let i in custom.relations) {\n    if (custom.relations[i].type == ENTITY_TYPE[1]) {\n      custom.customerL1List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[2]) {\n      custom.customerL2List.push(custom.relations[i]);\n    }\n  }\n\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL1List = $scope.customerL1List.concat(\n    custom.customerL1List.map(x => {\n      return { name: x.name, value: x.id.id };\n    })\n  );\n\n  changeCustomerL2List();\n  self.ctx.detectChanges();\n}\n\n// Customer L2 리스트 갱신\nfunction changeCustomerL2List() {\n  let { custom, $scope } = self.ctx;\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n\n  if ($scope.selectedCustomerL1 === '') {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n  } else {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL1)\n        .map(x => {\n          return { name: x.name, value: x.id.id };\n        })\n    );\n  }\n}\n\nfunction filterDatasources() {\n  let { custom, $scope } = self.ctx;\n  custom.mainDatasources = self.ctx.datasources.filter(x => x.entityAliasId !== custom.ownerDatasource.entityAliasId);\n  if ($scope.ownerLevel == 0) {\n    // 상위 검사\n    custom.mainDatasources = custom.mainDatasources.filter(\n      x =>\n        $scope.selectedCustomerL1 == '' ||\n        (custom.relations[x.entityId].parent &&\n          (custom.relations[x.entityId].parent.id.id == $scope.selectedCustomerL1 ||\n            (custom.relations[x.entityId].parent.parent &&\n              custom.relations[x.entityId].parent.parent.id.id == $scope.selectedCustomerL1)))\n    );\n  }\n  if ($scope.filterLevel == 0) {\n    // 하위 검사\n    custom.mainDatasources = custom.mainDatasources.filter(\n      x =>\n        $scope.selectedCustomerL2 == '' ||\n        (custom.relations[x.entityId].parent && custom.relations[x.entityId].parent.id.id == $scope.selectedCustomerL2)\n    );\n  }\n\n  initPage();\n  makeBody();\n  custom.mainData = preprocessData();\n  sortData();\n  insertData();\n  self.ctx.detectChanges();\n}\n\n// 대시보드 상태 탭 생성\nfunction makeTab() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return;\n  $scope.tabList = [];\n  for (let i in self.ctx.stateController.statesValue) {\n    $scope.tabList.push({\n      label: 'thingplus.menu.' + i,\n      id: i,\n      isActive: i == self.ctx.stateController.stateValue,\n    });\n  }\n}\n\n// 헤더 부분 생성\nfunction makeHead() {\n  let { custom, $scope } = self.ctx;\n  $scope.thList = [];\n  for (let i in custom.originDataKeys) {\n    $scope.thList.push({\n      index: i,\n      key: custom.originDataKeys[i].name,\n      label: t(custom.originDataKeys[i].label),\n      order: custom.selectedIndex == i ? 'ASC' : '',\n    });\n  }\n}\n\n// 페이지에 맞는 데이터 출력 및 페이지 표시\nfunction initPage() {\n  let { custom, $scope } = self.ctx;\n  custom.totalPage = Math.ceil(custom.mainDatasources.length / custom.countPerPage);\n  // 현재 페이지 기준 왼쪽이 5개 오른쪽이 4개가 되도록\n  custom.startPage = custom.currentPage - 5;\n  // 6번까지는 왼쪽이 5개 이하이므로 시작을 1로 고정\n  if (custom.currentPage <= 6) {\n    custom.startPage = 1;\n  }\n  // 마지막에서 5칸 아래페이지 부터는 오른쪽이 4개 이하이므로 시작을 마지막에서 9을 뺀것으로 고정\n  if (custom.totalPage >= 10 && custom.currentPage > custom.totalPage - 5) {\n    custom.startPage = custom.totalPage - 9;\n  }\n  custom.endPage = custom.startPage + 9;\n  // 끝 페이지가 총 페이지보다 크면 총페이지를 끝 페이지로\n  if (custom.endPage > custom.totalPage) {\n    custom.endPage = custom.totalPage;\n  }\n\n  // 페이지 리스트 구성\n  $scope.pageList = [];\n  for (let i = custom.startPage; i <= custom.endPage; i++) {\n    $scope.pageList.push({\n      number: i,\n      isBig: i > 99,\n      isActive: custom.currentPage == i,\n    });\n  }\n\n  custom.startIndex = (custom.currentPage - 1) * custom.countPerPage;\n  custom.endIndex = custom.currentPage * custom.countPerPage - 1;\n  // 끝 페이지가 데이터 소스의 길이보다 많으면 데이터 소스의 길이로 변경\n  if (custom.endIndex > custom.mainDatasources.length - 1) {\n    custom.endIndex = custom.mainDatasources.length - 1;\n  }\n  custom.targetDatasources = custom.mainDatasources.slice(custom.startIndex, custom.endIndex + 1);\n}\n\nfunction preprocessData() {\n  let { custom } = self.ctx;\n  let result = [];\n  for (let i in custom.mainDatasources) {\n    result.push({\n      id: custom.mainDatasources[i].entity.id,\n      name: custom.mainDatasources[i].entityName,\n      label: custom.mainDatasources[i].entityLabel,\n    });\n  }\n  for (let i in self.ctx.data) {\n    let target = self.ctx.data[i];\n    if (!_.isNil(target.data[0])) {\n      let entityId = target.datasource.entityId;\n      let name = target.dataKey.name;\n      let data = target.data[0][1];\n      let datasourceIndex = result.findIndex(x => x.id.id == entityId);\n      if (datasourceIndex !== -1) {\n        result[datasourceIndex][name] = data;\n      }\n    }\n  }\n  return result;\n}\n\n// 테이블 바디 생성\nfunction makeBody() {\n  let { custom, $scope } = self.ctx;\n  $scope.trList = [];\n  // 현재 페이지의 데이터 수 만큼 행 출력\n  for (let i = custom.startIndex; i <= custom.endIndex; i++) {\n    let tdList = [];\n    for (let j in custom.originDataKeys) {\n      tdList.push({ index: j, name: custom.originDataKeys[j].name, style: '', value: '' });\n    }\n    $scope.trList.push({\n      index: i,\n      tdList: tdList,\n    });\n  }\n}\n\n// 데이터 재 정렬\nfunction sortData() {\n  let { custom, $scope } = self.ctx;\n  // subscribe하는 데이터 키의 레이블 중 정렬기준으로 선택된 레이블의 인덱스 추출\n  // 정렬에 사용할 객체를 깊은 복사\n  let selectedKey = $scope.thList[custom.selectedIndex].key;\n  let selectedOrder = $scope.thList[custom.selectedIndex].order;\n  if (selectedOrder == 'ASC') {\n    custom.mainData.sort((a, b) => {\n      if (a[selectedKey] > b[selectedKey]) return 1;\n      if (a[selectedKey] < b[selectedKey]) return -1;\n      return 0;\n    });\n  } else {\n    custom.mainData.sort((a, b) => {\n      if (a[selectedKey] > b[selectedKey]) return -1;\n      if (a[selectedKey] < b[selectedKey]) return 1;\n      return 0;\n    });\n  }\n}\n\n// 데이터 삽입\nfunction insertData() {\n  let { custom, $scope } = self.ctx;\n  for (let i = custom.startIndex; i <= custom.endIndex; i++) {\n    for (let j in custom.originDataKeys) {\n      let key = custom.originDataKeys[j].name;\n      let data = custom.mainData[i][key];\n\n      // Apply cell style function\n      if (custom.originDataKeys[j].settings.useCellStyleFunction) {\n        try {\n          let styleFunction = new Function(\n            'value',\n            'index',\n            'ctx',\n            custom.originDataKeys[j].settings.cellStyleFunction\n          );\n          let style = styleFunction(data, i, self.ctx);\n          $scope.trList[i - custom.startIndex].tdList[j].style = style;\n        } catch (err) {\n          console.error(err);\n        }\n      }\n      // Apply cell action function\n      if (custom.originDataKeys[j].settings.useCellActionFunction) {\n        try {\n          let actionFunction = new Function(\n            'value',\n            'index',\n            'tr',\n            'td',\n            'ctx',\n            custom.originDataKeys[j].settings.cellActionFunction\n          );\n          $scope.trList[i - custom.startIndex].tdList[j].action = function (e) {\n            actionFunction(\n              data,\n              i,\n              $scope.trList[i - custom.startIndex],\n              $scope.trList[i - custom.startIndex].tdList[j],\n              self.ctx\n            );\n          };\n        } catch (err) {\n          console.error(err);\n        }\n      }\n      // Apply cell content function\n      if (custom.originDataKeys[j].settings.useCellContentFunction) {\n        try {\n          let contentFunction = new Function(\n            'value',\n            'index',\n            'ctx',\n            custom.originDataKeys[j].settings.cellContentFunction\n          );\n          data = contentFunction(data, i, self.ctx);\n        } catch (err) {\n          console.error(err);\n        }\n      }\n\n      $scope.trList[i - custom.startIndex].tdList[j].value = data;\n    }\n  }\n}\n\nfunction handleHeaderAction(descriptor) {\n  let { custom } = self.ctx;\n  self.ctx.actionsApi.handleWidgetAction(\n    {},\n    descriptor,\n    custom.ownerDatasource.entity.id,\n    custom.ownerDatasource.entityName,\n    {},\n    custom.ownerDatasource.entityLabel\n  );\n}\n\nfunction handleCellAction(descriptor, index) {\n  let { custom, $scope } = self.ctx;\n  let realIndex = $scope.trList[index - custom.startIndex].index;\n  self.ctx.actionsApi.handleWidgetAction(\n    {},\n    descriptor,\n    custom.mainData[realIndex].id,\n    custom.mainData[realIndex].name,\n    custom.mainData[realIndex],\n    custom.mainData[realIndex].label\n  );\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          },\n          \"filterLevel\": {\n            \"title\": \"Filter Level\",\n            \"type\": \"number\",\n            \"default\": 2\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\", \"widget.filterLevel\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"title\": \"DataKeySettings\",\n    \"properties\": {\n      \"hidden\": {\n        \"title\": \"Hide from table\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"useCellStyleFunction\": {\n        \"title\": \"Use cell style function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellStyleFunction\": {\n        \"title\": \"Cell style function: f(value, index, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      },\n      \"useCellContentFunction\": {\n        \"title\": \"Use cell content function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellContentFunction\": {\n        \"title\": \"Cell content function: f(value, index, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      },\n      \"useCellActionFunction\": {\n        \"title\": \"Use cell action function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellActionFunction\": {\n        \"title\": \"Cell action function: f(value, index, tr, td, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      }\n    },\n    \"required\": []\n  },\n  \"form\": [\n    \"hidden\",\n    \"useCellStyleFunction\",\n    {\n      \"key\": \"cellStyleFunction\",\n      \"type\": \"javascript\"\n    },\n    \"useCellContentFunction\",\n    {\n      \"key\": \"cellContentFunction\",\n      \"type\": \"javascript\"\n    },\n    \"useCellActionFunction\",\n    {\n      \"key\": \"cellActionFunction\",\n      \"type\": \"javascript\"\n    }\n  ]\n}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.2627186949891651,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"var(--tb-service-background-0)\",\"color\":\"var(--tb-service-accent)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630,\"filterLevel\":2}},\"title\":\"Maintain Entity\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"1.6em\",\"font-weight\":500,\"letter-spacing\":\"-0.04em\",\"color\":\"var(--tb-service-font-5)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    },
    {
      "alias": "maintain_entity_two_rows",
      "name": "Maintain Entity Two Rows",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <div class=\"widget-tab\" fxLayoutAlign=\"start center\" *ngIf=\"tabList && tabList.length > 1\">\n    <div\n      class=\"tab\"\n      *ngFor=\"let tab of tabList\"\n      fxLayoutAlign=\"center center\"\n      [ngClass]=\"{'active': tab.isActive}\"\n      (click)=\"selectTab(tab.id)\"\n    >\n      {{tab.label | translate}}\n    </div>\n  </div>\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\">\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\" translate>title</div>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <div\n        class=\"entity-controller\"\n        *ngIf=\"ownerLevel == 0 && filterLevel <= 1\"\n        fxLayoutAlign=\"end center\"\n        fxLayoutGap=\"1em\"\n      >\n        <span class=\"normal-label\" translate> thingplus.selector.workspace-selection </span>\n        <mat-select class=\"entity-selector\" (ngModelChange)=\"setCustomerL1($event)\" [ngModel]=\"selectedCustomerL1\">\n          <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n            {{customerL1.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select\n          class=\"entity-selector\"\n          *ngIf=\"filterLevel == 0\"\n          (ngModelChange)=\"setCustomerL2($event)\"\n          [ngModel]=\"selectedCustomerL2\"\n        >\n          <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n            {{customerL2.name}}\n          </mat-option>\n        </mat-select>\n      </div>\n      <div class=\"widget-action\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n        <div\n          class=\"widget-header-action\"\n          *ngFor=\"let headerAction of headerActionList\"\n          fxLayoutAlign=\"start center\"\n          fxLayoutGap=\"0.5em\"\n          (click)=\"headerAction.action($event)\"\n        >\n          <span translate>{{headerAction.name}}</span>\n          <i class=\"material-icons\">{{headerAction.icon}}</i>\n        </div>\n      </div>\n    </section>\n  </header>\n  <main class=\"widget-content\">\n    <section class=\"table-section\">\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th\n              *ngFor=\"let th of mainThList\"\n              (click)=\"changeSort($event, th)\"\n              [attr.rowspan]=\"th.rowspan\"\n              [attr.colspan]=\"th.colspan\"\n              #tooltip=\"matTooltip\"\n              [matTooltip]=\"th.help\"\n              matTooltipClass=\"tp-service-tooltip\"\n              [ngClass]=\"{'DESC': th.order == 'DESC','ASC': th.order == 'ASC','main': !th.index}\"\n            >\n              <div class=\"th-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <span class=\"th-label\">{{th.label}}</span>\n                <i class=\"th-help material-icons\" *ngIf=\"th.help\">help</i>\n                <i class=\"th-sort material-icons\">arrow_upward</i>\n              </div>\n            </th>\n            <th *ngIf=\"hasCellAction\" rowspan=\"2\" [ngStyle]=\"{'width': actionSize}\"></th>\n          </tr>\n          <tr>\n            <th class=\"sub\" *ngFor=\"let th of subThList\" (click)=\"changeSort($event, th)\" [ngClass]=\"th.order\">\n              <div class=\"th-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <span class=\"th-label\">{{th.label}}</span>\n                <i class=\"th-sort material-icons\">arrow_upward</i>\n              </div>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tr of trList\">\n            <td\n              *ngFor=\"let td of tr.tdList\"\n              [ngStyle]=\"td.style\"\n              [innerHTML]=\"td.value\"\n              (click)=\"td.action && td.action($event)\"\n            ></td>\n            <td *ngIf=\"hasCellAction\" class=\"action\">\n              <div class=\"cell-action-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <i\n                  *ngFor=\"let cellAction of cellActionList\"\n                  class=\"material-icons cell-action\"\n                  (click)=\"cellAction.action($event, tr.index)\"\n                >\n                  {{cellAction.icon}}\n                </i>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </section>\n  </main>\n  <footer class=\"widget-footer\" fxLayoutAlign=\"end center\">\n    <section class=\"page-section\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.5em\">\n      <div class=\"material-icons page-button first-button\" (click)=\"getFirstPage()\">first_page</div>\n      <div class=\"material-icons page-button prev-button\" (click)=\"getPrevPage()\">keyboard_arrow_left</div>\n      <div\n        class=\"page-button page-number-button\"\n        [class.big]=\"page.isBig\"\n        [class.active]=\"page.isActive\"\n        *ngFor=\"let page of pageList\"\n        (click)=\"changePage($event, page)\"\n      >\n        {{page.number}}\n      </div>\n      <div class=\"material-icons page-button next-button\" (click)=\"getNextPage()\">keyboard_arrow_right</div>\n      <div class=\"material-icons page-button last-button\" (click)=\"getLastPage()\">last_page</div>\n    </section>\n  </footer>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n}\n\n.widget-tab {\n  width: 100%;\n  height: 5em;\n  min-height: 30px;\n  background-color: var(--tb-service-background-2);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.tab {\n  min-width: 8em;\n  height: 100%;\n  font-size: 1.4em;\n  font-weight: 500;\n  border-right: 1px solid var(--tb-service-border-1);\n  color: var(--tb-service-font-3);\n  cursor: pointer;\n}\n.tab.active {\n  background-color: var(--tb-service-background-0);\n  color: var(--tb-service-font-5);\n  border-top: 0.2em solid var(--tb-service-accent);\n  border-bottom: 1px solid var(--tb-service-background-0);\n  box-sizing: content-box !important;\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n}\n\n/* widget-header-right-section */\n.normal-label {\n  font-size: 1.2em;\n  font-weight: 500;\n  line-height: 1.17;\n  letter-spacing: -0.03em;\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n}\n.widget-header-right-section .mat-select {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .mat-select:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .mat-select-trigger {\n  width: 13em;\n  min-width: 130px;\n  padding: calc(9em / 14);\n  font-size: 1.4em;\n  line-height: 1;\n}\n.widget-header-right-section .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n.widget-header-right-section .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n.widget-header-right-section .widget-header-action {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0.6em 1.2em;\n  cursor: pointer;\n  border: 1px solid var(--tb-service-accent);\n  background-color: var(--tb-service-accent);\n  color: var(--tb-service-font-0);\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .widget-header-action span {\n  font-size: 1.4em;\n  font-weight: bold;\n  white-space: nowrap;\n}\n.widget-header-right-section .widget-header-action i {\n  font-size: 1.4em;\n  font-weight: bold;\n}\n.widget-header-right-section .widget-header-action:hover {\n  border-color: var(--tb-service-accent-hover);\n  background-color: var(--tb-service-accent-hover);\n}\n.widget-header-right-section .widget-header-action:active {\n  border-color: var(--tb-service-accent-pressed);\n  background-color: var(--tb-service-accent-pressed);\n}\n\n/*\n  Widget Content Area\n*/\nmain.widget-content {\n  width: 100%;\n}\n\n/* table-section */\n.table-section {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n.table-section::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n.table-section::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n.table-section::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n.table-section .table {\n  min-width: 100%;\n  border-spacing: 0px;\n  box-sizing: border-box;\n  table-layout: fixed;\n  border-collapse: collapse;\n  white-space: nowrap;\n}\n.table-section thead tr {\n  background-color: var(--tb-service-background-1);\n  border-top: 1px solid var(--tb-service-border-1);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.table-section th {\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  padding: 1.68em;\n  text-align: left;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 1em;\n  line-height: 1;\n  border: 1px solid var(--tb-service-border-1);\n}\n.table-section th:first-child {\n  border-left: none;\n}\n.table-section th:last-child {\n  border-right: none;\n}\n.table-section th.main .th-box {\n  justify-content: center !important;\n}\n.table-section th.sub {\n  background-color: var(--tb-service-background-3);\n  padding: 1em;\n}\n.table-section th .th-label {\n  font-size: 1.2em;\n  margin-right: 0.5em;\n}\n.table-section th.main .th-label {\n  margin-right: 0em;\n}\n.table-section th .th-help {\n  font-size: 1.4em;\n  color: var(--tb-service-font-3);\n}\n.table-section th .th-sort {\n  font-size: 1.4em;\n  opacity: 0;\n  vertical-align: top;\n  transition-property: transform, opacity;\n  transition-duration: var(--tb-config-color-duration);\n  color: var(--tb-service-accent);\n}\n.table-section th:not(.DESC):not(.ASC):hover .th-sort {\n  opacity: 0.4;\n}\n.table-section th.ASC .th-sort {\n  opacity: 1;\n  transform: rotate(0deg);\n}\n.table-section th.DESC .th-sort {\n  opacity: 1;\n  transform: rotate(180deg);\n}\n.table-section th.main .th-sort {\n  display: none;\n}\n.table-section tbody tr {\n  border-bottom: 1px solid var(--tb-service-border-1);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section tbody tr:nth-child(odd) {\n  background-color: var(--tb-service-background-0);\n}\n.table-section tbody tr:nth-child(even) {\n  background-color: var(--tb-service-background-1);\n}\n.table-section td {\n  line-height: 1;\n  border: 1px solid var(--tb-service-border-1);\n}\n.table-section td:first-child {\n  border-left: none;\n}\n.table-section td:last-child {\n  border-right: none;\n}\n.table-section td:not(.action) {\n  color: var(--tb-service-font-4);\n  padding: 1.2em;\n  font-size: 1.4em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  user-select: text;\n}\n.table-section tbody tr:hover {\n  background-color: var(--tb-service-background-2);\n}\n.table-section td.action {\n  font-size: 1em;\n  padding: 0em 1.68em;\n  text-overflow: initial;\n}\n.table-section .cell-action {\n  font-size: 2em;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section .cell-action:hover {\n  color: var(--tb-service-font-5);\n}\n.table-section .cell-action.active {\n  color: var(--tb-service-accent);\n}\n.table-section .activate-switch {\n  position: relative;\n  width: 3.6em;\n  height: 1.6em;\n  border-radius: 0.8em;\n  background-color: var(--tb-service-font-3);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n  margin: auto;\n  cursor: pointer;\n}\n.table-section .activate-switch.active {\n  background-color: var(--tb-service-accent);\n}\n.table-section .activate-switch .ball {\n  position: absolute;\n  top: 50%;\n  left: 0.8em;\n  transform: translate(-50%, -50%);\n  width: 1.2em;\n  height: 1.2em;\n  border-radius: 0.6em;\n  background-color: var(--tb-service-background-0);\n  transition-property: left;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section .activate-switch.active .ball {\n  left: calc(100% - 0.8em);\n}\n\n/*\n  Widget Footer Area\n*/\nfooter.widget-footer {\n  width: 100%;\n  padding: var(--tb-config-padding);\n}\n\n/* page-section */\n.page-section .page-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 2em;\n  min-width: 20px;\n  height: 2em;\n  min-height: 20px;\n  font-size: 1.2em;\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  cursor: pointer;\n  color: var(--tb-service-font-4);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.page-section .first-button,\n.page-section .last-button,\n.page-section .prev-button,\n.page-section .next-button {\n  font-size: 1.6em;\n  width: 1.5em;\n  height: 1.5em;\n}\n.page-section .page-button:not(.active):hover {\n  border: 1px solid var(--tb-service-accent-hover);\n}\n.page-section .page-button:not(.active):active {\n  border: 1px solid var(--tb-service-accent-pressed);\n}\n.page-section .page-button.big-page {\n  width: 3.5em;\n  min-width: 35px;\n}\n.page-section .page-number-button.active {\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-accent);\n}\n",
        "controllerScript": "const ENTITY_TYPE = ['TENANT', 'CUSTOMER_L1', 'CUSTOMER_L2'];\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  makeTab();\n  makeHead();\n  initPage();\n  makeBody();\n  self.onResize();\n\n  // Action 파트에서 사용하기 위한 설정\n  if (!custom.isSample) {\n    // 현재 사용자의 Root 엔터티로부터 관계 트리 형성\n    custom.relations[custom.rootEntity.id.id] = {\n      id: custom.rootEntity.id,\n      name: custom.rootEntity.name,\n      parent: '',\n      child: [],\n    };\n    $scope.ownerLevel = await getCurrentLevel();\n    await getCustomer([custom.relations[custom.rootEntity.id.id]]);\n  }\n  custom.isInitialized = true;\n  self.onDataUpdated();\n  self.onResize();\n};\n\nself.onDataUpdated = function () {\n  let { custom } = self.ctx;\n  if (custom.isInitialized && custom.originDataKeys.length > 0) {\n    custom.mainData = preprocessData();\n    sortData();\n    insertData();\n  }\n  self.ctx.detectChanges();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.actionSources = function () {\n  return {\n    widgetHeaderButton: {\n      name: 'Custom Header Button',\n      multiple: true,\n    },\n    actionCellButton: {\n      name: 'widget-action.action-cell-button',\n      multiple: true,\n    },\n    customAction: {\n      name: 'Custom Action',\n      multiple: true,\n    },\n  };\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n  custom.$widgetAction = $('.widget-action', $container);\n  custom.$widgetContent = $('.widget-content', $container);\n  custom.$table = $('.table', $container);\n  custom.$theadTr = $('.table thead tr', $container);\n  custom.$tbody = $('.table tbody', $container);\n  custom.$widgetFooter = $('.widget-footer', $container);\n\n  // Define Scope Variables\n  $scope.tabList = [];\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n  $scope.selectedCustomerL1 = '';\n  $scope.selectedCustomerL2 = '';\n  $scope.ownerLevel = 2;\n  $scope.filterLevel = self.ctx.settings.widget.filterLevel;\n  $scope.thList = [];\n  $scope.mainThList = [];\n  $scope.subThList = [];\n  $scope.trList = [];\n  $scope.pageList = [];\n  custom.relations = [];\n  $scope.headerActionList = self.ctx.actionsApi.getActionDescriptors('widgetHeaderButton').map(x => {\n    return { name: x.name, icon: x.icon, action: e => handleHeaderAction(x) };\n  });\n  $scope.cellActionList = self.ctx.actionsApi.getActionDescriptors('actionCellButton').map(x => {\n    return { name: x.name, icon: x.icon, action: (e, i) => handleCellAction(x, i) };\n  });\n  $scope.hasCellAction = $scope.cellActionList.length > 0;\n  $scope.actionSize = `${$scope.cellActionList.length * 2 + 3.36 + ($scope.cellActionList.length - 1) * 0.5}em`;\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.mainDatasource = self.ctx.defaultSubscription.configuredDatasources[1];\n  custom.rootEntity = custom.ownerDatasource.entity;\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.hiddenDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.ownerDatasource.entityAliasId);\n  custom.mainDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.mainDatasource.entityAliasId);\n  custom.originDataKeys = self.ctx.defaultSubscription.configuredDatasources[1].dataKeys.filter(\n    x => x.settings.hidden !== true\n  );\n  custom.targetDatasources = [];\n  custom.isInitialized = false;\n  custom.selectedIndex = 0;\n  custom.currentPage = 1;\n  custom.countPerPage = 10;\n  custom.t = t;\n  custom.toTime = toTime;\n  custom.addZero = addZero;\n  custom.headerConfig = {\n    main: self.ctx.settings.widget.mainHeader.split(','),\n    sub: self.ctx.settings.widget.subHeader.split(','),\n  };\n}\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(self.ctx.widget.config.title);\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope } = self.ctx;\n  $scope.selectTab = function (e) {\n    let state = e || 'default';\n    let param = custom.dashboardParams || {};\n    self.ctx.stateController.updateState(state, param, null);\n  };\n  $scope.setCustomerL1 = function (e) {\n    $scope.selectedCustomerL1 = e;\n    $scope.selectedCustomerL2 = '';\n    changeCustomerL2List();\n    filterDatasources();\n  };\n  $scope.setCustomerL2 = function (e) {\n    $scope.selectedCustomerL2 = e;\n    filterDatasources();\n  };\n  $scope.getPrevPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage--;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getNextPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage++;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getFirstPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage = 1;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getLastPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage = custom.totalPage;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.changePage = function (e, page) {\n    if (!page.isActive) {\n      custom.currentPage = page.number;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.changeSort = function (e, th) {\n    if (!th.index) return;\n    if (th.isAction) return;\n    if (th.index == custom.selectedIndex) {\n      if (th.order != 'ASC') {\n        $scope.thList[th.index].order = 'ASC';\n      } else {\n        $scope.thList[th.index].order = 'DESC';\n      }\n    } else {\n      $scope.thList.forEach(x => (x.order = ''));\n      custom.selectedIndex = th.index;\n      $scope.thList[th.index].order = 'ASC';\n    }\n    initPage();\n    makeBody();\n    sortData();\n    insertData();\n  };\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  let widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (widgetFontSize < 6.25) {\n    widgetFontSize = 6.25;\n  }\n  custom.$widget.css('font-size', `${widgetFontSize}px`);\n\n  // Header와 Footer Height를 제외한 영역을 Main의 Height로 설정\n  let headerHeight = custom.$widgetHeader.outerHeight(true);\n  let footerHeight = custom.$widgetFooter.outerHeight(true);\n  custom.$widgetContent.css('height', `calc(100% - ${headerHeight + footerHeight}px)`);\n}\n\nasync function getCurrentLevel() {\n  let { custom } = self.ctx;\n  if (custom.rootEntity.id.entityType == 'TENANT') {\n    return 0;\n  } else {\n    let result = await self.ctx.attributeService\n      .getEntityAttributes(custom.rootEntity.id, 'SERVER_SCOPE', ['customerType'])\n      .toPromise();\n    if (result && result[0]) {\n      if (result[0].value == 'CUSTOMER_L1') {\n        return 1;\n      } else {\n        return 2;\n      }\n    }\n  }\n}\n\nfunction getCustomer(entities) {\n  return new Promise(resolve => {\n    let { custom } = self.ctx;\n    let promises = [];\n    if (entities.length > 0) {\n      for (let i = 0; i < entities.length; i++) {\n        promises.push(self.ctx.entityRelationService.findInfoByFrom(entities[i].id));\n      }\n      self.ctx.rxjs.forkJoin(promises).subscribe(async childs => {\n        let newChild = [];\n        for (let j = 0; j < childs.length; j++) {\n          for (let k = 0; k < childs[j].length; k++) {\n            custom.relations[childs[j][k].to.id] = {\n              id: childs[j][k].to,\n              name: childs[j][k].toName,\n              parent: entities[j],\n              child: [],\n              type: 'CUSTOMER',\n            };\n            custom.relations[entities[j].id.id].child.push(custom.relations[childs[j][k].to.id]);\n            if (childs[j][k].to.entityType === 'USER') {\n              custom.relations[childs[j][k].to.id].type = 'USER';\n            }\n            if (childs[j][k].to.entityType === 'DEVICE') {\n              custom.relations[childs[j][k].to.id].type = 'DEVICE';\n            }\n            if (childs[j][k].to.entityType === 'ASSET') {\n              custom.relations[childs[j][k].to.id].type = 'ASSET';\n            }\n            if (childs[j][k].to.entityType === 'CUSTOMER') {\n              newChild.push(custom.relations[childs[j][k].to.id]);\n            }\n          }\n        }\n        await getCustomer(newChild);\n        resolve();\n      });\n    } else {\n      distributeLevel();\n      resolve();\n    }\n  });\n}\n\n// hierarchy 레벨에 따라 배열에 따로 저장\nfunction distributeLevel() {\n  let { custom, $scope } = self.ctx;\n  let depth = $scope.ownerLevel;\n  let root = custom.relations[custom.rootEntity.id.id];\n  root.type = ENTITY_TYPE[depth];\n  for (let i in root.child) {\n    if (root.child[i].type == 'CUSTOMER') {\n      root.child[i].type = ENTITY_TYPE[depth + 1];\n    }\n    for (let j in root.child[i].child) {\n      if (root.child[i].child[j].type == 'CUSTOMER') {\n        root.child[i].child[j].type = ENTITY_TYPE[depth + 2];\n      }\n    }\n  }\n  custom.customerL1List = [];\n  custom.customerL2List = [];\n  custom.userList = [];\n\n  for (let i in custom.relations) {\n    if (custom.relations[i].type == ENTITY_TYPE[1]) {\n      custom.customerL1List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[2]) {\n      custom.customerL2List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == 'USER') {\n      custom.userList.push(custom.relations[i]);\n    }\n  }\n\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL1List = $scope.customerL1List.concat(\n    custom.customerL1List.map(x => {\n      return { name: x.name, value: x.id.id };\n    })\n  );\n  getUserInfo();\n  changeCustomerL2List();\n  self.ctx.detectChanges();\n}\n\nfunction getUserInfo() {\n  let { custom, $scope } = self.ctx;\n  let observables = [];\n  for (let i in custom.userList) {\n    let userId = custom.userList[i].id.id;\n    observables.push(self.ctx.http.get(`/api/user/${userId}`));\n  }\n\n  self.ctx.rxjs.forkJoin(observables).subscribe(users => {\n    for (let i in users) {\n      custom.relations[users[i].id.id].details = users[i];\n    }\n  });\n}\n\n// Customer L2 리스트 갱신\nfunction changeCustomerL2List() {\n  let { custom, $scope } = self.ctx;\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n\n  if ($scope.selectedCustomerL1 === '') {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n  } else {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL1)\n        .map(x => {\n          return { name: x.name, value: x.id.id };\n        })\n    );\n  }\n}\n\nfunction filterDatasources() {\n  let { custom, $scope } = self.ctx;\n  custom.mainDatasources = self.ctx.datasources.filter(x => x.entityAliasId !== custom.ownerDatasource.entityAliasId);\n  if ($scope.ownerLevel == 0) {\n    // 상위 검사\n    custom.mainDatasources = custom.mainDatasources.filter(\n      x =>\n        $scope.selectedCustomerL1 == '' ||\n        (custom.relations[x.entityId].parent &&\n          (custom.relations[x.entityId].parent.id.id == $scope.selectedCustomerL1 ||\n            (custom.relations[x.entityId].parent.parent &&\n              custom.relations[x.entityId].parent.parent.id.id == $scope.selectedCustomerL1)))\n    );\n  }\n  if ($scope.filterLevel == 0) {\n    // 하위 검사\n    custom.mainDatasources = custom.mainDatasources.filter(\n      x =>\n        $scope.selectedCustomerL2 == '' ||\n        (custom.relations[x.entityId].parent && custom.relations[x.entityId].parent.id.id == $scope.selectedCustomerL2)\n    );\n  }\n\n  initPage();\n  makeBody();\n  custom.mainData = preprocessData();\n  sortData();\n  insertData();\n  self.ctx.detectChanges();\n}\n\n// 대시보드 상태 탭 생성\nfunction makeTab() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return;\n  $scope.tabList = [];\n  for (let i in self.ctx.stateController.statesValue) {\n    $scope.tabList.push({\n      label: 'thingplus.menu.' + i,\n      id: i,\n      isActive: i == self.ctx.stateController.stateValue,\n    });\n  }\n}\n\n// 헤더 부분 생성\nfunction makeHead() {\n  let { custom, $scope, $container } = self.ctx;\n  $scope.thList = [];\n  $scope.mainThList = [];\n  $scope.subThList = [];\n  for (let i in custom.originDataKeys) {\n    let newTh = {\n      index: i,\n      key: custom.originDataKeys[i].name,\n      label: t(custom.originDataKeys[i].label),\n      order: custom.selectedIndex == i ? 'ASC' : '',\n    };\n    if (custom.originDataKeys[i].label == 'thingplus.label.snooze') {\n      newTh.help = t('thingplus.help.help-snooze');\n    }\n    $scope.thList.push(newTh);\n  }\n  for (let i in $scope.thList) {\n    if (custom.headerConfig.main[i] != 1) {\n      if (custom.headerConfig.main[i]) {\n        let target = custom.headerConfig.main[i].split(':');\n        $scope.mainThList.push({\n          label: t(target[1]),\n          order: '',\n          colspan: target[0],\n          rowspan: 1,\n        });\n      }\n    }\n    if (custom.headerConfig.sub[i] == 0) {\n      $scope.thList[i].colspan = 1;\n      $scope.thList[i].rowspan = 2;\n      $scope.mainThList.push($scope.thList[i]);\n    } else {\n      $scope.thList[i].colspan = 1;\n      $scope.thList[i].rowspan = 1;\n      $scope.subThList.push($scope.thList[i]);\n    }\n  }\n}\n\n// 페이지에 맞는 데이터 출력 및 페이지 표시\nfunction initPage() {\n  let { custom, $scope } = self.ctx;\n  custom.totalPage = Math.ceil(custom.mainDatasources.length / custom.countPerPage);\n  // 현재 페이지 기준 왼쪽이 5개 오른쪽이 4개가 되도록\n  custom.startPage = custom.currentPage - 5;\n  // 6번까지는 왼쪽이 5개 이하이므로 시작을 1로 고정\n  if (custom.currentPage <= 6) {\n    custom.startPage = 1;\n  }\n  // 마지막에서 5칸 아래페이지 부터는 오른쪽이 4개 이하이므로 시작을 마지막에서 9을 뺀것으로 고정\n  if (custom.totalPage >= 10 && custom.currentPage > custom.totalPage - 5) {\n    custom.startPage = custom.totalPage - 9;\n  }\n  custom.endPage = custom.startPage + 9;\n  // 끝 페이지가 총 페이지보다 크면 총페이지를 끝 페이지로\n  if (custom.endPage > custom.totalPage) {\n    custom.endPage = custom.totalPage;\n  }\n\n  // 페이지 리스트 구성\n  $scope.pageList = [];\n  for (let i = custom.startPage; i <= custom.endPage; i++) {\n    $scope.pageList.push({\n      number: i,\n      isBig: i > 99,\n      isActive: custom.currentPage == i,\n    });\n  }\n\n  custom.startIndex = (custom.currentPage - 1) * custom.countPerPage;\n  custom.endIndex = custom.currentPage * custom.countPerPage - 1;\n  // 끝 페이지가 데이터 소스의 길이보다 많으면 데이터 소스의 길이로 변경\n  if (custom.endIndex > custom.mainDatasources.length - 1) {\n    custom.endIndex = custom.mainDatasources.length - 1;\n  }\n  custom.targetDatasources = custom.mainDatasources.slice(custom.startIndex, custom.endIndex + 1);\n}\n\nfunction preprocessData() {\n  let { custom } = self.ctx;\n  let result = [];\n  for (let i in custom.mainDatasources) {\n    result.push({\n      id: custom.mainDatasources[i].entity.id,\n      name: custom.mainDatasources[i].entityName,\n      label: custom.mainDatasources[i].entityLabel,\n    });\n  }\n  for (let i in self.ctx.data) {\n    let target = self.ctx.data[i];\n    if (!_.isNil(target.data[0])) {\n      let entityId = target.datasource.entityId;\n      let name = target.dataKey.name;\n      let data = target.data[0][1];\n      let datasourceIndex = result.findIndex(x => x.id.id == entityId);\n      if (datasourceIndex !== -1) {\n        result[datasourceIndex][name] = data;\n      }\n    }\n  }\n  return result;\n}\n\n// 테이블 바디 생성\nfunction makeBody() {\n  let { custom, $scope } = self.ctx;\n  $scope.trList = [];\n  // 현재 페이지의 데이터 수 만큼 행 출력\n  for (let i = custom.startIndex; i <= custom.endIndex; i++) {\n    let tdList = [];\n    for (let j in custom.originDataKeys) {\n      tdList.push({ index: j, name: custom.originDataKeys[j].name, style: '', value: '' });\n    }\n    $scope.trList.push({\n      index: i,\n      tdList: tdList,\n    });\n  }\n}\n\n// 데이터 재 정렬\nfunction sortData() {\n  let { custom, $scope } = self.ctx;\n  // subscribe하는 데이터 키의 레이블 중 정렬기준으로 선택된 레이블의 인덱스 추출\n  // 정렬에 사용할 객체를 깊은 복사\n  let selectedKey = $scope.thList[custom.selectedIndex].key;\n  let selectedOrder = $scope.thList[custom.selectedIndex].order;\n  if (selectedOrder == 'ASC') {\n    custom.mainData.sort((a, b) => {\n      if (a[selectedKey] > b[selectedKey]) return 1;\n      if (a[selectedKey] < b[selectedKey]) return -1;\n      return 0;\n    });\n  } else {\n    custom.mainData.sort((a, b) => {\n      if (a[selectedKey] > b[selectedKey]) return -1;\n      if (a[selectedKey] < b[selectedKey]) return 1;\n      return 0;\n    });\n  }\n}\n\n// 데이터 삽입\nfunction insertData() {\n  let { custom, $scope } = self.ctx;\n  for (let i = custom.startIndex; i <= custom.endIndex; i++) {\n    for (let j in custom.originDataKeys) {\n      let key = custom.originDataKeys[j].name;\n      let data = custom.mainData[i][key];\n\n      // Apply cell style function\n      if (custom.originDataKeys[j].settings.useCellStyleFunction) {\n        try {\n          let styleFunction = new Function('value', 'ctx', custom.originDataKeys[j].settings.cellStyleFunction);\n          let style = styleFunction(data, self.ctx);\n          $scope.trList[i - custom.startIndex].tdList[j].style = style;\n        } catch (err) {\n          console.error(err);\n        }\n      }\n      // Apply cell action function\n      if (custom.originDataKeys[j].settings.useCellActionFunction) {\n        try {\n          let actionFunction = new Function(\n            'value',\n            'tr',\n            'td',\n            'ctx',\n            custom.originDataKeys[j].settings.cellActionFunction\n          );\n          $scope.trList[i - custom.startIndex].tdList[j].action = function (e) {\n            actionFunction(\n              data,\n              $scope.trList[i - custom.startIndex],\n              $scope.trList[i - custom.startIndex].tdList[j],\n              self.ctx\n            );\n          };\n        } catch (err) {\n          console.error(err);\n        }\n      }\n      // Apply cell content function\n      if (custom.originDataKeys[j].settings.useCellContentFunction) {\n        try {\n          let contentFunction = new Function('value', 'ctx', custom.originDataKeys[j].settings.cellContentFunction);\n          data = contentFunction(data, self.ctx);\n        } catch (err) {\n          console.error(err);\n        }\n      }\n\n      $scope.trList[i - custom.startIndex].tdList[j].value = data;\n    }\n  }\n}\n\nfunction handleHeaderAction(descriptor) {\n  let { custom } = self.ctx;\n  self.ctx.actionsApi.handleWidgetAction(\n    {},\n    descriptor,\n    custom.ownerDatasource.entity.id,\n    custom.ownerDatasource.entityName,\n    {},\n    custom.ownerDatasource.entityLabel\n  );\n}\n\nfunction handleCellAction(descriptor, index) {\n  let { custom, $scope } = self.ctx;\n  let realIndex = $scope.trList[index - custom.startIndex].index;\n  self.ctx.actionsApi.handleWidgetAction(\n    {},\n    descriptor,\n    custom.mainData[realIndex].id,\n    custom.mainData[realIndex].name,\n    custom.mainData[realIndex],\n    custom.mainData[realIndex].label\n  );\n}\n\nfunction toTime(value) {\n  if (isNaN(Number(value))) return '-';\n  if (value > 86400000) {\n    value = 86400000;\n  }\n  let hour = Math.floor(value / 3600000);\n  let temp = value % 3600000;\n  let min = Math.floor(temp / 60000);\n  return addZero(hour, 2) + ':' + addZero(min, 2);\n}\n\nfunction addZero(value, pos) {\n  let result = value.toString();\n  for (let i = result.length; i < pos; i++) {\n    result = '0' + result;\n  }\n  return result;\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          },\n          \"filterLevel\": {\n            \"title\": \"Filter Level\",\n            \"type\": \"number\",\n            \"default\": 2\n          },\n          \"mainHeader\": {\n            \"title\": \"Main Header Config\",\n            \"type\": \"string\",\n            \"default\": \"1,1,1,1,1,7:label,1\"\n          },\n          \"subHeader\": {\n            \"title\": \"Sub Header Config\",\n            \"type\": \"string\",\n            \"default\": \"0,0,0,0,0,1,1,1,1,1,1,1,0\"\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\", \"widget.filterLevel\", \"widget.mainHeader\", \"widget.subHeader\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"title\": \"DataKeySettings\",\n    \"properties\": {\n      \"hidden\": {\n        \"title\": \"Hide from table\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"useCellStyleFunction\": {\n        \"title\": \"Use cell style function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellStyleFunction\": {\n        \"title\": \"Cell style function: f(value, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      },\n      \"useCellContentFunction\": {\n        \"title\": \"Use cell content function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellContentFunction\": {\n        \"title\": \"Cell content function: f(value, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      },\n      \"useCellActionFunction\": {\n        \"title\": \"Use cell action function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellActionFunction\": {\n        \"title\": \"Cell action function: f(value, tr, td, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      }\n    },\n    \"required\": []\n  },\n  \"form\": [\n    \"hidden\",\n    \"useCellStyleFunction\",\n    {\n      \"key\": \"cellStyleFunction\",\n      \"type\": \"javascript\"\n    },\n    \"useCellContentFunction\",\n    {\n      \"key\": \"cellContentFunction\",\n      \"type\": \"javascript\"\n    },\n    \"useCellActionFunction\",\n    {\n      \"key\": \"cellActionFunction\",\n      \"type\": \"javascript\"\n    }\n  ]\n}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":null},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin 2\",\"color\":\"#607d8b\",\"settings\":{\"hidden\":false,\"useCellStyleFunction\":false,\"cellStyleFunction\":\"\",\"useCellContentFunction\":false,\"cellContentFunction\":\"\"},\"_hash\":0.8351315093682103,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin 3\",\"color\":\"#9c27b0\",\"settings\":{\"hidden\":false,\"useCellStyleFunction\":false,\"cellStyleFunction\":\"\",\"useCellContentFunction\":false,\"cellContentFunction\":\"\"},\"_hash\":0.28417771350998144,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Cos 2\",\"color\":\"#8bc34a\",\"settings\":{\"hidden\":false,\"useCellStyleFunction\":false,\"cellStyleFunction\":\"\",\"useCellContentFunction\":false,\"cellContentFunction\":\"\"},\"_hash\":0.004708982775879944,\"funcBody\":\"return Math.round(1000*Math.cos(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random 3\",\"color\":\"#3f51b5\",\"settings\":{\"hidden\":false,\"useCellStyleFunction\":false,\"cellStyleFunction\":\"\",\"useCellContentFunction\":false,\"cellContentFunction\":\"\"},\"_hash\":0.8295068885518331,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"var(--tb-service-background-0)\",\"color\":\"var(--tb-service-accent)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630,\"filterLevel\":2,\"mainHeader\":\"1,1,1,1,1,7:label,1\",\"subHeader\":\"0,0,0,0,0,1,1,1,1,1,1,1,0\"}},\"title\":\"Maintain Entity Two Rows\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"1.6em\",\"font-weight\":500,\"letter-spacing\":\"-0.05em\",\"color\":\"var(--tb-service-font-5)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    },
    {
      "alias": "maintain_report",
      "name": "Maintain Report",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\">\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\" translate>title</div>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-action\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n        <div\n          class=\"widget-header-action\"\n          *ngFor=\"let headerAction of headerActionList\"\n          fxLayoutAlign=\"start center\"\n          fxLayoutGap=\"0.5em\"\n          (click)=\"headerAction.action($event)\"\n        >\n          <span translate>{{headerAction.name}}</span>\n          <i class=\"material-icons\">{{headerAction.icon}}</i>\n        </div>\n      </div>\n    </section>\n  </header>\n  <main class=\"widget-content\">\n    <section class=\"table-section\">\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th *ngFor=\"let th of thList\" (click)=\"changeSort($event, th)\" [ngClass]=\"th.order\">\n              <div class=\"th-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <span class=\"th-label\">{{th.label}}</span>\n                <i class=\"th-sort material-icons\">arrow_upward</i>\n              </div>\n            </th>\n            <th *ngIf=\"hasCellAction\" [ngStyle]=\"{'width': actionSize}\"></th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tr of trList\">\n            <td\n              *ngFor=\"let td of tr.tdList\"\n              [ngStyle]=\"td.style\"\n              [innerHTML]=\"td.value\"\n              (click)=\"td.action && td.action($event)\"\n            ></td>\n            <td *ngIf=\"hasCellAction\" class=\"action\">\n              <div class=\"cell-action-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <i\n                  *ngFor=\"let cellAction of cellActionList\"\n                  class=\"material-icons cell-action\"\n                  (click)=\"cellAction.action($event, tr.index)\"\n                >\n                  {{cellAction.icon}}\n                </i>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </section>\n  </main>\n  <footer class=\"widget-footer\" fxLayoutAlign=\"end center\">\n    <section class=\"page-section\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.5em\">\n      <div class=\"material-icons page-button first-button\" (click)=\"getFirstPage()\">first_page</div>\n      <div class=\"material-icons page-button prev-button\" (click)=\"getPrevPage()\">keyboard_arrow_left</div>\n      <div\n        class=\"page-button page-number-button\"\n        [class.big]=\"page.isBig\"\n        [class.active]=\"page.isActive\"\n        *ngFor=\"let page of pageList\"\n        (click)=\"changePage($event, page)\"\n      >\n        {{page.number}}\n      </div>\n      <div class=\"material-icons page-button next-button\" (click)=\"getNextPage()\">keyboard_arrow_right</div>\n      <div class=\"material-icons page-button last-button\" (click)=\"getLastPage()\">last_page</div>\n    </section>\n  </footer>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n}\n\n.widget-header-right-section .widget-header-action {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0.6em 1.2em;\n  cursor: pointer;\n  border: 1px solid var(--tb-service-accent);\n  background-color: var(--tb-service-accent);\n  color: var(--tb-service-font-0);\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .widget-header-action span {\n  font-size: 1.4em;\n  font-weight: bold;\n  white-space: nowrap;\n}\n.widget-header-right-section .widget-header-action i {\n  font-size: 1.4em;\n  font-weight: bold;\n}\n.widget-header-right-section .widget-header-action:hover {\n  border-color: var(--tb-service-accent-hover);\n  background-color: var(--tb-service-accent-hover);\n}\n.widget-header-right-section .widget-header-action:active {\n  border-color: var(--tb-service-accent-pressed);\n  background-color: var(--tb-service-accent-pressed);\n}\n\n/*\n  Widget Content Area\n*/\nmain.widget-content {\n  width: 100%;\n}\n\n/* table-section */\n.table-section {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n.table-section::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n.table-section::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n.table-section::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n.table-section .table {\n  min-width: 100%;\n  border-spacing: 0px;\n  box-sizing: border-box;\n  table-layout: fixed;\n  border-collapse: collapse;\n  white-space: nowrap;\n}\n.table-section thead tr {\n  background-color: var(--tb-service-background-1);\n  border-top: 1px solid var(--tb-service-border-1);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.table-section th {\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  padding: 1.68em;\n  text-align: left;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 1em;\n  line-height: 1;\n}\n.table-section th .th-label {\n  font-size: 1.2em;\n  margin-right: 0.5em;\n}\n.table-section th .th-sort {\n  font-size: 1.4em;\n  opacity: 0;\n  vertical-align: top;\n  transition-property: transform, opacity;\n  transition-duration: var(--tb-config-color-duration);\n  color: var(--tb-service-accent);\n}\n.table-section th:not(.DESC):not(.ASC):hover .th-sort {\n  opacity: 0.4;\n}\n.table-section th.ASC .th-sort {\n  opacity: 1;\n  transform: rotate(0deg);\n}\n.table-section th.DESC .th-sort {\n  opacity: 1;\n  transform: rotate(180deg);\n}\n.table-section tbody tr {\n  border-bottom: 1px solid var(--tb-service-border-1);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section tbody tr:nth-child(odd) {\n  background-color: var(--tb-service-background-0);\n}\n.table-section tbody tr:nth-child(even) {\n  background-color: var(--tb-service-background-1);\n}\n.table-section td {\n  line-height: 1;\n}\n.table-section td:not(.action) {\n  color: var(--tb-service-font-4);\n  padding: 1.2em;\n  font-size: 1.4em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  user-select: text;\n}\n.table-section tbody tr:hover {\n  background-color: var(--tb-service-background-2);\n}\n.table-section td.action {\n  font-size: 1em;\n  padding: 0em 1.68em;\n  text-overflow: initial;\n}\n.table-section .cell-action {\n  font-size: 2em;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section .cell-action:hover {\n  color: var(--tb-service-font-5);\n}\n.table-section .cell-action.active {\n  color: var(--tb-service-accent);\n}\n.table-section .activate-switch {\n  position: relative;\n  width: 3.6em;\n  height: 1.6em;\n  border-radius: 0.8em;\n  background-color: var(--tb-service-font-3);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n  margin: auto;\n  cursor: pointer;\n}\n.table-section .activate-switch.active {\n  background-color: var(--tb-service-accent);\n}\n.table-section .activate-switch .ball {\n  position: absolute;\n  top: 50%;\n  left: 0.8em;\n  transform: translate(-50%, -50%);\n  width: 1.2em;\n  height: 1.2em;\n  border-radius: 0.6em;\n  background-color: var(--tb-service-background-0);\n  transition-property: left;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section .activate-switch.active .ball {\n  left: calc(100% - 0.8em);\n}\n\n/*\n  Widget Footer Area\n*/\nfooter.widget-footer {\n  width: 100%;\n  padding: var(--tb-config-padding);\n}\n\n/* page-section */\n.page-section .page-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 2em;\n  min-width: 20px;\n  height: 2em;\n  min-height: 20px;\n  font-size: 1.2em;\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  cursor: pointer;\n  color: var(--tb-service-font-4);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.page-section .first-button,\n.page-section .last-button,\n.page-section .prev-button,\n.page-section .next-button {\n  font-size: 1.6em;\n  width: 1.5em;\n  height: 1.5em;\n}\n.page-section .page-button:not(.active):hover {\n  border: 1px solid var(--tb-service-accent-hover);\n}\n.page-section .page-button:not(.active):active {\n  border: 1px solid var(--tb-service-accent-pressed);\n}\n.page-section .page-button.big-page {\n  width: 3.5em;\n  min-width: 35px;\n}\n.page-section .page-number-button.active {\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-accent);\n}\n",
        "controllerScript": "const ENTITY_TYPE = ['TENANT', 'CUSTOMER_L1', 'CUSTOMER_L2', 'DEVICE'];\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  getDashboardParameter();\n  makeHead();\n  initPage();\n  makeBody();\n  self.onResize();\n  custom.dashboardList = await getDashboardList();\n  // Action 파트에서 사용하기 위한 설정\n  if (!custom.isSample) {\n    // 현재 사용자의 Root 엔터티로부터 관계 트리 형성\n    custom.relations[custom.rootEntity.id.id] = {\n      id: custom.rootEntity.id,\n      name: custom.rootEntity.name,\n      parent: '',\n      child: [],\n    };\n    $scope.ownerLevel = await getCurrentLevel();\n    await getCustomer([custom.relations[custom.rootEntity.id.id]]);\n  }\n  custom.isInitialized = true;\n  self.onDataUpdated();\n  self.onResize();\n};\n\nself.onDataUpdated = function () {\n  let { custom } = self.ctx;\n  if (!custom.isSample && custom.isInitialized && custom.isFirstUpdate) {\n    filterDatasource();\n  }\n  if (custom.isInitialized && custom.originDataKeys.length > 0) {\n    custom.mainData = preprocessData();\n    sortData();\n    insertData();\n  }\n  self.ctx.detectChanges();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.actionSources = function () {\n  return {\n    widgetHeaderButton: {\n      name: 'Custom Header Button',\n      multiple: true,\n    },\n    actionCellButton: {\n      name: 'widget-action.action-cell-button',\n      multiple: true,\n    },\n    customAction: {\n      name: 'Custom Action',\n      multiple: true,\n    },\n  };\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n  custom.$widgetAction = $('.widget-action', $container);\n  custom.$widgetContent = $('.widget-content', $container);\n  custom.$table = $('.table', $container);\n  custom.$theadTr = $('.table thead tr', $container);\n  custom.$tbody = $('.table tbody', $container);\n  custom.$widgetFooter = $('.widget-footer', $container);\n\n  // Define Scope Variables\n  $scope.ownerLevel = 2;\n  $scope.thList = [];\n  $scope.trList = [];\n  $scope.pageList = [];\n  $scope.headerActionList = self.ctx.actionsApi.getActionDescriptors('widgetHeaderButton').map(x => {\n    return { name: x.name, icon: x.icon, action: e => handleHeaderAction(x) };\n  });\n  $scope.cellActionList = self.ctx.actionsApi.getActionDescriptors('actionCellButton').map(x => {\n    return { name: x.name, icon: x.icon, action: (e, i) => handleCellAction(x, i) };\n  });\n  $scope.hasCellAction = $scope.cellActionList.length > 0;\n  $scope.actionSize = `${$scope.cellActionList.length * 2 + 3.36 + ($scope.cellActionList.length - 1) * 0.5}em`;\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.rootEntity = custom.ownerDatasource.entity;\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.hiddenDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.ownerDatasource.entityAliasId);\n  custom.mainDatasources = self.ctx.datasources.filter(x => x.entityAliasId !== custom.ownerDatasource.entityAliasId);\n  custom.originDataKeys = self.ctx.defaultSubscription.configuredDatasources[1].dataKeys.filter(\n    x => x.settings.hidden !== true\n  );\n  custom.relations = {};\n  custom.targetDatasources = [];\n  custom.isInitialized = false;\n  custom.isFirstUpdate = true;\n  custom.selectedIndex = 0;\n  custom.currentPage = 1;\n  custom.countPerPage = 10;\n  custom.t = t;\n  custom.toTime = toTime;\n  custom.addZero = addZero;\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(self.ctx.widget.config.title);\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope } = self.ctx;\n  $scope.getPrevPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage--;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getNextPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage++;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getFirstPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage = 1;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getLastPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage = custom.totalPage;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.changePage = function (e, page) {\n    if (!page.isActive) {\n      custom.currentPage = page.number;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.changeSort = function (e, th) {\n    if (th.isAction) return;\n    if (th.index == custom.selectedIndex) {\n      if (th.order != 'ASC') {\n        $scope.thList[th.index].order = 'ASC';\n      } else {\n        $scope.thList[th.index].order = 'DESC';\n      }\n    } else {\n      $scope.thList.forEach(x => (x.order = ''));\n      custom.selectedIndex = th.index;\n      $scope.thList[th.index].order = 'ASC';\n    }\n    initPage();\n    makeBody();\n    sortData();\n    insertData();\n  };\n}\n\nfunction getDashboardParameter() {\n  let { custom } = self.ctx;\n  if (custom.isSample) {\n    custom.dashboardParams = {};\n    return;\n  }\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n}\n\nasync function getDashboardList() {\n  let dashboardList;\n  if (self.ctx.currentUser.authority == 'TENANT_ADMIN') {\n    dashboardList = await self.ctx.http.get(`/api/tenant/dashboards?pageSize=1024&page=0`).toPromise();\n  } else {\n    let customerId = self.ctx.currentUser.customerId;\n    dashboardList = await self.ctx.http.get(`/api/customer/${customerId}/dashboards?pageSize=1024&page=0`).toPromise();\n  }\n  let result = {};\n  for (let i in dashboardList.data) {\n    result[dashboardList.data[i].title] = dashboardList.data[i];\n  }\n  return result;\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  let widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (widgetFontSize < 6.25) {\n    widgetFontSize = 6.25;\n  }\n  custom.$widget.css('font-size', `${widgetFontSize}px`);\n\n  // Header와 Footer Height를 제외한 영역을 Main의 Height로 설정\n  let headerHeight = custom.$widgetHeader.outerHeight(true);\n  let footerHeight = custom.$widgetFooter.outerHeight(true);\n  custom.$widgetContent.css('height', `calc(100% - ${headerHeight + footerHeight}px)`);\n}\n\nasync function getCurrentLevel() {\n  let { custom } = self.ctx;\n  if (custom.rootEntity.id.entityType == 'TENANT') {\n    return 0;\n  } else {\n    let result = await self.ctx.attributeService\n      .getEntityAttributes(custom.rootEntity.id, 'SERVER_SCOPE', ['customerType'])\n      .toPromise();\n    if (result && result[0]) {\n      if (result[0].value == 'CUSTOMER_L1') {\n        return 1;\n      } else {\n        return 2;\n      }\n    }\n  }\n}\n\nfunction getCustomer(entities) {\n  return new Promise(resolve => {\n    let { custom } = self.ctx;\n    let promises = [];\n    if (entities.length > 0) {\n      for (let i = 0; i < entities.length; i++) {\n        promises.push(self.ctx.entityRelationService.findInfoByFrom(entities[i].id));\n      }\n      self.ctx.rxjs.forkJoin(promises).subscribe(async childs => {\n        let newChild = [];\n        for (let j = 0; j < childs.length; j++) {\n          for (let k = 0; k < childs[j].length; k++) {\n            custom.relations[childs[j][k].to.id] = {\n              id: childs[j][k].to,\n              name: childs[j][k].toName,\n              parent: entities[j],\n              child: [],\n              type: 'CUSTOMER',\n            };\n            custom.relations[entities[j].id.id].child.push(custom.relations[childs[j][k].to.id]);\n            if (childs[j][k].to.entityType === 'USER') {\n              custom.relations[childs[j][k].to.id].type = 'USER';\n            }\n            if (childs[j][k].to.entityType === 'DEVICE') {\n              custom.relations[childs[j][k].to.id].type = 'DEVICE';\n            }\n            if (childs[j][k].to.entityType === 'ASSET') {\n              custom.relations[childs[j][k].to.id].type = 'ASSET';\n            }\n            if (childs[j][k].to.entityType === 'CUSTOMER') {\n              newChild.push(custom.relations[childs[j][k].to.id]);\n            }\n          }\n        }\n        await getCustomer(newChild);\n        resolve();\n      });\n    } else {\n      distributeLevel();\n      resolve();\n    }\n  });\n}\n\n// hierarchy 레벨에 따라 배열에 따로 저장\nfunction distributeLevel() {\n  let { custom, $scope } = self.ctx;\n  let depth = $scope.ownerLevel;\n  let root = custom.relations[custom.rootEntity.id.id];\n  root.type = ENTITY_TYPE[depth];\n  for (let i in root.child) {\n    if (root.child[i].type == 'CUSTOMER') {\n      root.child[i].type = ENTITY_TYPE[depth + 1];\n    }\n    for (let j in root.child[i].child) {\n      if (root.child[i].child[j].type == 'CUSTOMER') {\n        root.child[i].child[j].type = ENTITY_TYPE[depth + 2];\n      }\n    }\n  }\n  custom.customerL1List = [];\n  custom.customerL2List = [];\n  custom.deviceList = [];\n  custom.userList = [];\n\n  for (let i in custom.relations) {\n    if (custom.relations[i].type == ENTITY_TYPE[1]) {\n      custom.customerL1List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[2]) {\n      custom.customerL2List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[3]) {\n      custom.deviceList.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == 'USER') {\n      custom.userList.push(custom.relations[i]);\n    }\n  }\n\n  getDeviceInfo();\n  getUserInfo();\n  self.ctx.detectChanges();\n}\n\nfunction getDeviceInfo() {\n  let { custom, $scope } = self.ctx;\n  let observables = [];\n  custom.deviceList = [];\n  for (let i in custom.customerL2List) {\n    let customerId = custom.customerL2List[i].id.id;\n    observables.push(self.ctx.http.get(`/api/customer/${customerId}/deviceInfos?pageSize=50000&page=0`));\n  }\n\n  self.ctx.rxjs.forkJoin(observables).subscribe(devices => {\n    for (let i in devices) {\n      for (let j in devices[i].data) {\n        custom.relations[devices[i].data[j].id.id].label =\n          devices[i].data[j].label != '' ? devices[i].data[j].label : devices[i].data[j].name;\n        custom.deviceList.push(custom.relations[devices[i].data[j].id.id]);\n      }\n    }\n\n    insertData(); // 위젯 데이터 키 액션 순서에 따라서 데이터가 안불러와질 수 있으므로, 데이터를 불러온 후에 insertData()를 호출한다.\n    self.ctx.detectChanges();\n  });\n}\n\nfunction getUserInfo() {\n  let { custom, $scope } = self.ctx;\n  let observables = [];\n  for (let i in custom.userList) {\n    let userId = custom.userList[i].id.id;\n    observables.push(self.ctx.http.get(`/api/user/${userId}`));\n  }\n\n  self.ctx.rxjs.forkJoin(observables).subscribe(users => {\n    for (let i in users) {\n      custom.relations[users[i].id.id].details = users[i];\n    }\n  });\n}\n\n// 대시보드 상태 탭 생성\nfunction makeTab() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return;\n  $scope.tabList = [];\n  for (let i in self.ctx.stateController.statesValue) {\n    $scope.tabList.push({\n      label: 'thingplus.menu.' + i,\n      id: i,\n      isActive: i == self.ctx.stateController.stateValue,\n    });\n  }\n}\n\n// 헤더 부분 생성\nfunction makeHead() {\n  let { custom, $scope } = self.ctx;\n  $scope.thList = [];\n  for (let i in custom.originDataKeys) {\n    $scope.thList.push({\n      index: i,\n      key: custom.originDataKeys[i].name,\n      label: t(custom.originDataKeys[i].label),\n      order: custom.selectedIndex == i ? 'ASC' : '',\n    });\n  }\n}\n\n// 페이지에 맞는 데이터 출력 및 페이지 표시\nfunction initPage() {\n  let { custom, $scope } = self.ctx;\n  custom.totalPage = Math.ceil(custom.mainDatasources.length / custom.countPerPage);\n  // 현재 페이지 기준 왼쪽이 5개 오른쪽이 4개가 되도록\n  custom.startPage = custom.currentPage - 5;\n  // 6번까지는 왼쪽이 5개 이하이므로 시작을 1로 고정\n  if (custom.currentPage <= 6) {\n    custom.startPage = 1;\n  }\n  // 마지막에서 5칸 아래페이지 부터는 오른쪽이 4개 이하이므로 시작을 마지막에서 9을 뺀것으로 고정\n  if (custom.totalPage >= 10 && custom.currentPage > custom.totalPage - 5) {\n    custom.startPage = custom.totalPage - 9;\n  }\n  custom.endPage = custom.startPage + 9;\n  // 끝 페이지가 총 페이지보다 크면 총페이지를 끝 페이지로\n  if (custom.endPage > custom.totalPage) {\n    custom.endPage = custom.totalPage;\n  }\n\n  // 페이지 리스트 구성\n  $scope.pageList = [];\n  for (let i = custom.startPage; i <= custom.endPage; i++) {\n    $scope.pageList.push({\n      number: i,\n      isBig: i > 99,\n      isActive: custom.currentPage == i,\n    });\n  }\n\n  custom.startIndex = (custom.currentPage - 1) * custom.countPerPage;\n  custom.endIndex = custom.currentPage * custom.countPerPage - 1;\n  // 끝 페이지가 데이터 소스의 길이보다 많으면 데이터 소스의 길이로 변경\n  if (custom.endIndex > custom.mainDatasources.length - 1) {\n    custom.endIndex = custom.mainDatasources.length - 1;\n  }\n  custom.targetDatasources = custom.mainDatasources.slice(custom.startIndex, custom.endIndex + 1);\n}\n\nfunction filterDatasource() {\n  let { custom } = self.ctx;\n  custom.mainDatasources = self.ctx.datasources.filter(x => x.entityAliasId !== custom.ownerDatasource.entityAliasId);\n  if (custom.mainDatasources.length == 0) {\n    custom.isFirstUpdate = false;\n    return;\n  }\n  let filterIdList = [];\n  for (let i in self.ctx.data) {\n    let target = self.ctx.data[i];\n    if (!_.isNil(target.data[0])) {\n      custom.isFirstUpdate = false;\n      let name = target.dataKey.name;\n      let data = target.data[0][1];\n      if (custom.dashboardParams.customerL2) {\n        if (name == 'customerL2' && data != '' && data != custom.dashboardParams.entityId) {\n          filterIdList.push(target.datasource.entityId);\n        }\n      } else if (custom.dashboardParams.customerL1) {\n        if (name == 'customerL1' && data != '' && data != custom.dashboardParams.entityId) {\n          filterIdList.push(target.datasource.entityId);\n        }\n      }\n    }\n  }\n  custom.mainDatasources = custom.mainDatasources.filter(x => !filterIdList.includes(x.entityId));\n  initPage();\n  makeBody();\n  self.onDataUpdated();\n}\n\nfunction preprocessData() {\n  let { custom } = self.ctx;\n  let result = [];\n  for (let i in custom.mainDatasources) {\n    result.push({\n      id: custom.mainDatasources[i].entity.id,\n      name: custom.mainDatasources[i].entityName,\n      label: custom.mainDatasources[i].entityLabel,\n    });\n  }\n  for (let i in self.ctx.data) {\n    let target = self.ctx.data[i];\n    if (!_.isNil(target.data[0])) {\n      let entityId = target.datasource.entityId;\n      let name = target.dataKey.name;\n      let data = target.data[0][1];\n      let datasourceIndex = result.findIndex(x => x.id.id == entityId);\n      if (datasourceIndex !== -1) {\n        result[datasourceIndex][name] = data;\n      }\n    }\n  }\n  return result;\n}\n\n// 테이블 바디 생성\nfunction makeBody() {\n  let { custom, $scope } = self.ctx;\n  $scope.trList = [];\n  // 현재 페이지의 데이터 수 만큼 행 출력\n  for (let i = custom.startIndex; i <= custom.endIndex; i++) {\n    let tdList = [];\n    for (let j in custom.originDataKeys) {\n      tdList.push({ index: j, name: custom.originDataKeys[j].name, style: '', value: '' });\n    }\n    $scope.trList.push({\n      index: i,\n      tdList: tdList,\n    });\n  }\n}\n\n// 데이터 재 정렬\nfunction sortData() {\n  let { custom, $scope } = self.ctx;\n  // subscribe하는 데이터 키의 레이블 중 정렬기준으로 선택된 레이블의 인덱스 추출\n  // 정렬에 사용할 객체를 깊은 복사\n  let selectedKey = $scope.thList[custom.selectedIndex].key;\n  let selectedOrder = $scope.thList[custom.selectedIndex].order;\n  if (selectedOrder == 'ASC') {\n    custom.mainData.sort((a, b) => {\n      if (a[selectedKey] > b[selectedKey]) return 1;\n      if (a[selectedKey] < b[selectedKey]) return -1;\n      return 0;\n    });\n  } else {\n    custom.mainData.sort((a, b) => {\n      if (a[selectedKey] > b[selectedKey]) return -1;\n      if (a[selectedKey] < b[selectedKey]) return 1;\n      return 0;\n    });\n  }\n}\n\n// 데이터 삽입\nfunction insertData() {\n  let { custom, $scope } = self.ctx;\n  for (let i = custom.startIndex; i <= custom.endIndex; i++) {\n    for (let j in custom.originDataKeys) {\n      let key = custom.originDataKeys[j].name;\n      let data = custom.mainData[i][key];\n      // Apply cell style function\n      if (custom.originDataKeys[j].settings.useCellStyleFunction) {\n        try {\n          let styleFunction = new Function('value', 'row', 'ctx', custom.originDataKeys[j].settings.cellStyleFunction);\n          let style = styleFunction(data, custom.mainData[i], self.ctx);\n          $scope.trList[i - custom.startIndex].tdList[j].style = style;\n        } catch (err) {\n          console.error(err);\n        }\n      }\n      // Apply cell action function\n      if (custom.originDataKeys[j].settings.useCellActionFunction) {\n        try {\n          let actionFunction = new Function(\n            'value',\n            'tr',\n            'td',\n            'row',\n            'ctx',\n            custom.originDataKeys[j].settings.cellActionFunction\n          );\n          $scope.trList[i - custom.startIndex].tdList[j].action = function (e) {\n            actionFunction(\n              data,\n              $scope.trList[i - custom.startIndex],\n              $scope.trList[i - custom.startIndex].tdList[j],\n              custom.mainData[i],\n              self.ctx\n            );\n          };\n        } catch (err) {\n          console.error(err);\n        }\n      }\n      // Apply cell content function\n      if (custom.originDataKeys[j].settings.useCellContentFunction) {\n        try {\n          let contentFunction = new Function(\n            'value',\n            'row',\n            'ctx',\n            custom.originDataKeys[j].settings.cellContentFunction\n          );\n          data = contentFunction(data, custom.mainData[i], self.ctx);\n        } catch (err) {\n          console.error(err);\n        }\n      }\n\n      $scope.trList[i - custom.startIndex].tdList[j].value = data;\n    }\n  }\n}\n\nfunction handleHeaderAction(descriptor) {\n  let { custom } = self.ctx;\n  self.ctx.actionsApi.handleWidgetAction(\n    {},\n    descriptor,\n    custom.ownerDatasource.entity.id,\n    custom.ownerDatasource.entityName,\n    {},\n    custom.ownerDatasource.entityLabel\n  );\n}\n\nfunction handleCellAction(descriptor, index) {\n  let { custom, $scope } = self.ctx;\n  let realIndex = $scope.trList[index - custom.startIndex].index;\n  self.ctx.actionsApi.handleWidgetAction(\n    {},\n    descriptor,\n    custom.mainData[realIndex].id,\n    custom.mainData[realIndex].name,\n    custom.mainData[realIndex],\n    custom.mainData[realIndex].label\n  );\n}\n\nfunction toTime(value) {\n  if (isNaN(Number(value))) return '-';\n  if (value > 86400000) {\n    value = 86400000;\n  }\n  let hour = Math.floor(value / 3600000);\n  let temp = value % 3600000;\n  let min = Math.floor(temp / 60000);\n  return addZero(hour, 2) + ':' + addZero(min, 2);\n}\n\nfunction addZero(value, pos) {\n  let result = value.toString();\n  for (let i = result.length; i < pos; i++) {\n    result = '0' + result;\n  }\n  return result;\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"title\": \"DataKeySettings\",\n    \"properties\": {\n      \"hidden\": {\n        \"title\": \"Hide from table\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"useCellStyleFunction\": {\n        \"title\": \"Use cell style function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellStyleFunction\": {\n        \"title\": \"Cell style function: f(value, row, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      },\n      \"useCellContentFunction\": {\n        \"title\": \"Use cell content function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellContentFunction\": {\n        \"title\": \"Cell content function: f(value, row, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      },\n      \"useCellActionFunction\": {\n        \"title\": \"Use cell action function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellActionFunction\": {\n        \"title\": \"Cell action function: f(value, tr, td, row, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      }\n    },\n    \"required\": []\n  },\n  \"form\": [\n    \"hidden\",\n    \"useCellStyleFunction\",\n    {\n      \"key\": \"cellStyleFunction\",\n      \"type\": \"javascript\"\n    },\n    \"useCellContentFunction\",\n    {\n      \"key\": \"cellContentFunction\",\n      \"type\": \"javascript\"\n    },\n    \"useCellActionFunction\",\n    {\n      \"key\": \"cellActionFunction\",\n      \"type\": \"javascript\"\n    }\n  ]\n}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#4caf50\",\"settings\":{\"hidden\":false,\"useCellStyleFunction\":false,\"cellStyleFunction\":\"\",\"useCellContentFunction\":false,\"cellContentFunction\":\"\",\"useCellActionFunction\":false,\"cellActionFunction\":\"\"},\"_hash\":0.3391152090346836,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"Maintain Report\",\"showTitleIcon\":false,\"dropShadow\":true,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false,\"titleTooltip\":\"\",\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"1.6em\",\"font-weight\":500,\"letter-spacing\":\"-0.04em\",\"color\":\"var(--tb-service-font-5)\"}}"
      }
    },
    {
      "alias": "maintain_data",
      "name": "Maintain Data",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 6,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"start center\">\n  <main class=\"widget-content\">\n    <section class=\"card-section\" fxLayout=\"column\" *ngFor=\"let device of deviceList\">\n      <div class=\"card-header-box\" fxLayoutAlign=\"space-between center\">\n        <div class=\"left-header\" fxLayout=\"column\" fxLayoutAlign=\"start start\">\n          <div class=\"device-name\">{{device.index}}. {{device.name}}</div>\n          <div class=\"device-label\">{{device.label}}</div>\n        </div>\n        <div class=\"right-header\" fxLayout=\"column\" fxLayoutAlign=\"center end\" fxLayoutGap=\"0.5em\">\n          <div\n            class=\"card-header-action\"\n            *ngFor=\"let cardAction of cardActionList\"\n            fxLayoutAlign=\"start center\"\n            fxLayoutGap=\"0.5em\"\n            (click)=\"cardAction.action($event, device)\"\n          >\n            <span translate>{{cardAction.name}}</span>\n            <i class=\"material-icons\">{{cardAction.icon}}</i>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-image-box\" fxFlex (click)=\"flipCard($event, device)\">\n        <div class=\"flip-card-inner\" [ngClass]=\"{'flip': device.isFlip}\">\n          <div class=\"flip-card-front\" fxLayout=\"column\" fxLayoutAlign=\"space-evenly center\" fxLayoutGap=\"2em\">\n            <img class=\"device-image\" [src]=\"device.imgSource\" [fxShow]=\"device.imgSource\" />\n            <div class=\"device-model\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"0.5em\">\n              <span class=\"model\">{{device.model}}</span>\n              <span class=\"model-str\">{{device.modelStr}}</span>\n            </div>\n          </div>\n          <div class=\"flip-card-back\">\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>Key</th>\n                  <th>Value</th>\n                  <th>Timestamp</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let tr of device.trList\">\n                  <td>{{tr.key}}</td>\n                  <td>{{tr.value}}</td>\n                  <td>{{tr.ts}}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-detail-box\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"2em\">\n        <div\n          fxFlex=\"50\"\n          class=\"card-detail\"\n          [ngClass]=\"{'good': device.isExistData == 1, 'bad': device.isExistData == 0}\"\n          fxLayoutAlign=\"center center\"\n          [matTooltip]=\"device.ExistDataTooltip\"\n          matTooltipPosition=\"above\"\n          translate\n        >\n          thingplus.label.data-exist\n        </div>\n        <div\n          fxFlex=\"50\"\n          class=\"card-detail\"\n          [ngClass]=\"{'good': device.isValidData == 1, 'bad': device.isValidData == 0}\"\n          fxLayoutAlign=\"center center\"\n          [matTooltip]=\"device.ValidDataTooltip\"\n          matTooltipPosition=\"above\"\n          translate\n        >\n          thingplus.label.data-valid\n        </div>\n      </div>\n    </section>\n  </main>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n  white-space: nowrap;\n}\n\n/*\n  Widget Content Area\n*/\n.widget-content {\n  display: grid;\n  width: 100%;\n  max-width: 100%;\n  height: 100%;\n  grid-template-columns: repeat(1, 1fr);\n  grid-auto-rows: 650px;\n  padding: var(--tb-config-padding);\n  gap: var(--tb-config-padding);\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.widget-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n.widget-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n.widget-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n/* card-section */\n.card-section {\n  width: 100%;\n  min-width: 250px;\n  height: 100%;\n  border: 1px solid var(--tb-service-border-1);\n  font-size: 10px;\n}\n.card-section .card-header-box {\n  width: 100%;\n  border-bottom: 1px solid var(--tb-service-border-1);\n  padding: var(--tb-config-padding);\n}\n.card-section .device-name {\n  font-size: 2em;\n  color: var(--tb-service-font-5);\n}\n.card-section .device-label {\n  font-size: 1.6em;\n  color: var(--tb-service-font-4);\n}\n.card-section .card-header-action {\n  padding: 0.6em 1.2em;\n  cursor: pointer;\n  border: 1px solid var(--tb-service-accent);\n  background-color: var(--tb-service-accent);\n  color: var(--tb-service-font-0);\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.card-section .card-header-action span {\n  font-size: 1.4em;\n  font-weight: bold;\n  white-space: nowrap;\n}\n.card-section .card-header-action i {\n  font-size: 1.4em;\n  font-weight: bold;\n}\n.card-section .card-header-action:hover {\n  border-color: var(--tb-service-accent-hover);\n  background-color: var(--tb-service-accent-hover);\n}\n.card-section .card-header-action:active {\n  border-color: var(--tb-service-accent-pressed);\n  background-color: var(--tb-service-accent-pressed);\n}\n\n.card-section .card-image-box {\n  width: 100%;\n  height: 60%;\n  perspective: 1000px; /* Remove this if you don't want the 3D effect */\n}\n.flip-card-inner {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  max-height: 100%;\n  text-align: center;\n  transition: transform 0.5s;\n  transform-style: preserve-3d;\n}\n.flip-card-inner.flip {\n  transform: rotateY(180deg);\n}\n/* flip-card-front */\n.flip-card-front {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  max-height: 100%;\n  padding: var(--tb-config-padding);\n  background-color: var(--tb-service-background-1);\n  -webkit-backface-visibility: hidden; /* Safari */\n  backface-visibility: hidden;\n}\n/* Style the back side */\n.flip-card-back {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  max-height: 100%;\n  overflow: auto;\n  background-color: var(--tb-service-background-1);\n  transform: rotateY(180deg);\n  -webkit-backface-visibility: hidden; /* Safari */\n  backface-visibility: hidden;\n}\n\n.card-section .device-model {\n  font-size: 1.6em;\n  color: var(--tb-service-font-5);\n}\n.card-section .device-image {\n  max-width: 75%;\n  max-height: 75%;\n  width: 75%;\n  aspect-ratio: 1 / 1;\n}\n.card-section::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n.card-section::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n.card-section::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n.card-section .table {\n  min-width: 100%;\n  min-height: 100%;\n  border-spacing: 0px;\n  box-sizing: border-box;\n  table-layout: fixed;\n  border-collapse: collapse;\n  white-space: nowrap;\n}\n.card-section thead tr {\n  background-color: var(--tb-service-background-1);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.card-section th {\n  color: var(--tb-service-font-5);\n  padding: 0.5em;\n  font-weight: bold;\n  text-align: left;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 1em;\n}\n.card-section tbody tr {\n  border-bottom: 1px solid var(--tb-service-border-1);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.card-section tbody tr:nth-child(odd) {\n  background-color: var(--tb-service-background-0);\n}\n.card-section tbody tr:nth-child(even) {\n  background-color: var(--tb-service-background-1);\n}\n.card-section td {\n  color: var(--tb-service-font-4);\n  padding: 0em 0.5em;\n  font-size: 1em;\n  text-align: left;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  user-select: text;\n}\n\n.card-section .card-detail-box {\n  width: 100%;\n  border-top: 1px solid var(--tb-service-border-1);\n  padding: var(--tb-config-padding);\n}\n.card-section .card-detail {\n  padding: 1em 0em;\n  font-size: 1.4em;\n  border: 1px solid var(--tb-service-inactivated);\n  color: var(--tb-service-inactivated);\n  background-color: var(--tb-service-blur-inactivated);\n  transition-property: background-color, border-color, color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.card-section .card-detail.good {\n  border-color: var(--tb-service-working);\n  color: var(--tb-service-working);\n  background-color: var(--tb-service-blur-working);\n}\n.card-section .card-detail.bad {\n  border-color: var(--tb-service-warn);\n  color: var(--tb-service-warn);\n  background-color: var(--tb-service-warn-a100);\n}\n",
        "controllerScript": "const KEY_LIST = [\n  'unbal',\n  'frequency',\n  'f1_type',\n  'f1_volt1',\n  'f1_volt2',\n  'f1_volt3',\n  'f1_amp1',\n  'f1_amp2',\n  'f1_amp3',\n  'f1_watt',\n  'f1_var',\n  'f1_VA',\n  'f1_PF',\n  'f1_kwh_imp',\n  'f1_unbal',\n  'f1_thd',\n];\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  createList();\n  self.onResize();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.onDataUpdated = function () {\n  preprocessData();\n  insertData();\n  self.ctx.detectChanges();\n};\n\nself.actionSources = function () {\n  return {\n    customAction: {\n      name: 'Custom Action',\n      multiple: true,\n    },\n  };\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetContent = $('.widget-content', $container);\n  custom.$cardHeaderSection = $('.card-header-section', $container);\n  custom.$titleSection = $('.title-section', $container);\n  custom.$detailSection = $('.detail-section', $container);\n\n  $scope.deviceList = [];\n  $scope.flipCard = function (e, device) {\n    device.isFlip = !device.isFlip;\n    self.ctx.detectChanges();\n  };\n  $scope.cardActionList = self.ctx.actionsApi.getActionDescriptors('customAction').map(x => {\n    return { name: x.name, icon: x.icon, action: (e, device) => handleHeaderAction(x, device) };\n  });\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.hiddenDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.ownerDatasource.entityAliasId);\n  custom.mainDatasources = self.ctx.datasources.filter(x => x.entityAliasId !== custom.ownerDatasource.entityAliasId);\n  custom.t = t;\n  custom.modelList = [];\n\n  for (let i in custom.mainDatasources) {\n    $scope.deviceList.push({});\n  }\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  let widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (widgetFontSize < 6.25) {\n    widgetFontSize = 6.25;\n  }\n  custom.$widget.css('font-size', `${widgetFontSize}px`);\n\n  let cardRow = Math.ceil(self.ctx.width / 500);\n  custom.$widgetContent.css('grid-template-columns', `repeat(${cardRow}, 1fr)`);\n}\n\nfunction createList() {\n  let { custom, $scope, $container } = self.ctx;\n  $scope.deviceList = [];\n  custom.mainDatasources.sort((a, b) => {\n    if (a.name > b.name) return 1;\n    if (a.name < b.name) return -1;\n    return 0;\n  });\n  for (let i in custom.mainDatasources) {\n    $scope.deviceList.push({\n      index: Number(i) + 1,\n      id: custom.mainDatasources[i].entity.id,\n      name: custom.mainDatasources[i].entityName,\n      label: custom.mainDatasources[i].entityLabel,\n      model: '',\n      modelStr: '',\n      isExistData: 0,\n      isValidData: -1,\n      ExistDataTooltip: '수신되지 않은 데이터가 있습니다.',\n      ValidDataTooltip:\n        '전력이 낮아 데이터의 정합성의 판단이 불가능합니다. 장비가 가동되고 전력이 공급된 이후 판단 가능합니다.',\n      trList: [],\n      data: {},\n      isFlip: false,\n    });\n  }\n}\n\nfunction preprocessData() {\n  let { $scope } = self.ctx;\n  for (let i in self.ctx.data) {\n    let target = self.ctx.data[i];\n    if (!_.isNil(target.data[0])) {\n      let entityId = target.datasource.entityId;\n      let name = target.dataKey.name;\n      let data = target.data[0];\n      let datasourceIndex = $scope.deviceList.findIndex(x => x.id.id == entityId);\n      if (datasourceIndex !== -1) {\n        $scope.deviceList[datasourceIndex].data[name] = data;\n      }\n    }\n  }\n}\n\nfunction insertData() {\n  let { custom, $scope } = self.ctx;\n  for (let i in $scope.deviceList) {\n    if ($scope.deviceList[i].data.model) {\n      if ($scope.deviceList[i].data.model[1]) {\n        $scope.deviceList[i].model = $scope.deviceList[i].data.model[1];\n        $scope.deviceList[i].modelStr = t(`thingplus.device-model.${$scope.deviceList[i].data.model[1]}`).summary;\n        $scope.deviceList[\n          i\n        ].imgSource = `https://tp-resource.thingplus.net/service/moldmecca/model/${$scope.deviceList[i].data.model[1]}.png`;\n      } else {\n        $scope.deviceList[i].model = 'No Data';\n        $scope.deviceList[i].modelStr = '';\n        $scope.deviceList[i].imgSource = null;\n      }\n    }\n    // 키 체크\n    $scope.deviceList[i].trList = [];\n    $scope.deviceList[i].isExistData = 1;\n    $scope.deviceList[i].isValidData = -1;\n    $scope.deviceList[i].ExistDataTooltip = '데이터가 정상입니다.';\n    $scope.deviceList[i].ValidDataTooltip =\n      '전력이 낮아 데이터의 정합성의 판단이 불가능합니다. 장비가 가동되고 전력이 공급된 이후 판단 가능합니다.';\n    for (let key of KEY_LIST) {\n      let row = {\n        key: key,\n        value: '-',\n        ts: '-',\n      };\n      if (!_.isNil($scope.deviceList[i].data[key]) && $scope.deviceList[i].data[key][1] !== '') {\n        row.value = $scope.deviceList[i].data[key][1];\n        if (!_.isNil($scope.deviceList[i].data[key][0]) && $scope.deviceList[i].data[key][0] > 0) {\n          row.ts = moment($scope.deviceList[i].data[key][0]).format('YYYY-MM-DD HH:mm:ss:SSS');\n        }\n      } else {\n        $scope.deviceList[i].isExistData = 0;\n        $scope.deviceList[i].ExistDataTooltip = '수신되지 않은 데이터가 있습니다.';\n      }\n      $scope.deviceList[i].trList.push(row);\n    }\n\n    if ($scope.deviceList[i].data.f1_watt[1] > 0 && $scope.deviceList[i].data.f1_PF[1] > 0) {\n      $scope.deviceList[i].isValidData = 1;\n      $scope.deviceList[i].ValidDataTooltip = '데이터가 정상입니다.';\n    }\n    if ($scope.deviceList[i].data.f1_watt[1] < 0 || $scope.deviceList[i].data.f1_PF[1] < 0) {\n      $scope.deviceList[i].isValidData = 0;\n      $scope.deviceList[i].ValidDataTooltip = '유효전력, 역률 값이 음수입니다. 결선오류일 수 있습니다.';\n    }\n  }\n}\n\nfunction handleHeaderAction(descriptor, device) {\n  let { custom } = self.ctx;\n  self.ctx.actionsApi.handleWidgetAction({}, descriptor, device.id, device.name, device, device.label);\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 543\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":543}},\"title\":\"Maintain Data\",\"showTitleIcon\":false,\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\",\"box-shadow\":\"0px 2px 10px 0 rgba(0, 0, 0, 0.04)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    },
    {
      "alias": "test",
      "name": "Maintain Cam",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 9.5,
        "sizeY": 6,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"start center\">\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\">\n    <section class=\"widget-header-left-section\" fxFlex=\"100\" fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\" translate>title</div>\n    </section>\n  </header>\n  <header class=\"widget-sub-header\">\n    <section class=\"channel-section\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\">\n      <button\n        class=\"channel-button\"\n        fxFlex\n        fxLayoutAlign=\"center center\"\n        [ngClass]=\"{'active': currentChannel == 'Cam1'}\"\n        (click)=\"changeChannel($event, 'Cam1')\"\n      >\n        Cam1\n      </button>\n      <button\n        class=\"channel-button\"\n        fxFlex\n        fxLayoutAlign=\"center center\"\n        [ngClass]=\"{'active': currentChannel == 'Cam2'}\"\n        (click)=\"changeChannel($event, 'Cam2')\"\n      >\n        Cam2\n      </button>\n      <button\n        class=\"channel-button\"\n        fxFlex\n        fxLayoutAlign=\"center center\"\n        [ngClass]=\"{'active': currentChannel == 'Cam3'}\"\n        (click)=\"changeChannel($event, 'Cam3')\"\n      >\n        Cam3\n      </button>\n    </section>\n  </header>\n  <main class=\"widget-content\">\n    <section class=\"video-section\" fxLayoutAlign=\"center center\">\n      <video class=\"video\" id=\"videoElem\" autoplay muted controls=\"true\" playsinline></video>\n    </section>\n  </main>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n  white-space: nowrap;\n  letter-spacing: var(--tb-config-letter-spacing);\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n  border-bottom: 1px solid var(--tb-service-border-0);\n}\n\nheader.widget-sub-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n}\n/* channel-section */\n.channel-section {\n  width: 100%;\n}\n.channel-section .channel-button {\n  all: unset;\n  height: 4em;\n  font-size: 2em;\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  color: var(--tb-service-font-5);\n  border-radius: 0.2em;\n  transition-property: color, border-color, background-color;\n  transition-duration: var(--tb-config-color-duration);\n  cursor: pointer;\n}\n.channel-section .channel-button.active {\n  background-color: var(--tb-service-accent);\n  color: var(--tb-service-font-0);\n  border-color: var(--tb-service-accent);\n}\n.channel-section .channel-button:not(.active):hover {\n  border-color: var(--tb-service-border-3);\n}\n/*\n  Widget Content Area\n*/\nmain.widget-content {\n  width: 100%;\n  padding: var(--tb-config-padding);\n  padding-top: 0px;\n}\n\n/* video-section */\n.video-section {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  max-width: 100%;\n  max-height: 100%;\n}\n.video-section .video {\n  width: auto;\n  height: auto;\n  max-width: 100%;\n  max-height: 100%;\n  background-color: var(--tb-service-background-3);\n}\n",
        "controllerScript": "const URL = 'https://mold-pi-video.lt.thingbine.com';\nconst CONFIG = {\n  iceServers: [\n    {\n      urls: ['stun:stun.l.google.com:19302'],\n    },\n  ],\n};\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  defineVariables();\n  setTitle();\n  startVideo();\n  self.onResize();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.onDestroy = function () {\n  let { custom } = self.ctx;\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n  custom.$widgetSubHeader = $('.widget-sub-header', $container);\n  custom.$widgetContent = $('.widget-content', $container);\n\n  $scope.currentChannel = 'Cam1';\n  $scope.changeChannel = function (e, channel) {\n    $scope.currentChannel = channel;\n    startVideo();\n  };\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.t = t;\n  custom.videoElem = $('.video', $container)[0];\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(self.ctx.widget.config.title);\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  let widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (widgetFontSize < 6.25) {\n    widgetFontSize = 6.25;\n  }\n  custom.$widget.css('font-size', `${widgetFontSize}px`);\n\n  // Header Height를 제외한 영역을 Main의 Height로 설정\n  let headerHeight = custom.$widgetHeader.outerHeight(true);\n  let subHeaderHeight = custom.$widgetSubHeader.outerHeight(true);\n  custom.$widgetContent.css('height', `calc(100% - ${headerHeight + subHeaderHeight}px)`);\n}\n\nfunction startVideo() {\n  let { custom, $scope } = self.ctx;\n  let stream = new MediaStream();\n\n  custom.pc = new RTCPeerConnection(CONFIG);\n  custom.pc.onnegotiationneeded = handleNegotiationNeededEvent;\n\n  custom.pc.ontrack = function (event) {\n    stream.addTrack(event.track);\n    videoElem.srcObject = stream;\n  };\n\n  async function handleNegotiationNeededEvent() {\n    let offer = await custom.pc.createOffer();\n    await custom.pc.setLocalDescription(offer);\n    getRemoteSdp();\n  }\n\n  getCodecInfo();\n\n  function getCodecInfo() {\n    $.get(`${URL}/stream/codec/${$scope.currentChannel}`, function (data) {\n      try {\n        data = JSON.parse(data);\n      } catch (e) {\n        console.log(e);\n      } finally {\n        $.each(data, function (index, value) {\n          custom.pc.addTransceiver(value.Type, {\n            direction: 'sendrecv',\n          });\n        });\n      }\n    });\n  }\n\n  function getRemoteSdp() {\n    $.post(\n      `${URL}/stream/receiver/${$scope.currentChannel}`,\n      {\n        suuid: $scope.currentChannel,\n        data: btoa(custom.pc.localDescription.sdp),\n      },\n      function (data) {\n        try {\n          custom.pc.setRemoteDescription(\n            new RTCSessionDescription({\n              type: 'answer',\n              sdp: atob(data),\n            })\n          );\n        } catch (e) {\n          console.warn(e);\n        }\n      }\n    );\n  }\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 543\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"Maintain Cam\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\",\"box-shadow\":\"0px 2px 10px 0 rgba(0, 0, 0, 0.04)\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"1.6em\",\"font-weight\":500,\"letter-spacing\":\"var(--tb-config-letter-spacing)\",\"color\":\"var(--tb-service-font-5)\",\"white-space\":\"nowrap\",\"overflow\":\"hidden\",\"text-overflow\":\"elipsis\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    },
    {
      "alias": "schedule_management",
      "name": "Maintain Schedule",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [],
        "templateHtml": "<div id=\"widget\">\n  <div class=\"widget-tab\" fxLayoutAlign=\"start center\">\n    <div\n      class=\"tab\"\n      *ngFor=\"let tab of tabList\"\n      fxLayoutAlign=\"center center\"\n      [ngClass]=\"{'active': tab.isActive}\"\n      (click)=\"selectTab(tab.id)\"\n    >\n      {{tab.label | translate}}\n    </div>\n  </div>\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\">\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\" translate>title</div>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <div class=\"entity-controller\" *ngIf=\"ownerLevel == 0\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n        <span class=\"normal-label\" translate>thingplus.selector.device-selection</span>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel == 0\"\n          (ngModelChange)=\"setCustomerL1($event)\"\n          [ngModel]=\"selectedCustomerL1\"\n        >\n          <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n            {{customerL1.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel <= 1\"\n          (ngModelChange)=\"setCustomerL2($event)\"\n          [ngModel]=\"selectedCustomerL2\"\n        >\n          <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n            {{customerL2.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select class=\"entity-selector\" (ngModelChange)=\"setDevice($event)\" [ngModel]=\"selectedDevice\">\n          <mat-option *ngFor=\"let device of deviceList\" [value]=\"device.value\"> {{device.label}} </mat-option>\n        </mat-select>\n      </div>\n      <div class=\"date-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\" fxShow.lt-md=\"false\">\n        <div class=\"normal-label\" translate>thingplus.selector.date-selection</div>\n        <mat-select class=\"date-selector\" (ngModelChange)=\"setYear($event)\" [ngModel]=\"selectedYear\">\n          <mat-option *ngFor=\"let year of yearList\" [value]=\"year.value\"> {{year.label}} </mat-option>\n        </mat-select>\n        <mat-select class=\"date-selector\" (ngModelChange)=\"setMonth($event)\" [ngModel]=\"selectedMonth\">\n          <mat-option *ngFor=\"let month of monthList\" [value]=\"month.value\"> {{month.label}} </mat-option>\n        </mat-select>\n      </div>\n      <button class=\"action-btn text-btn\" (click)=\"search($event)\" fxShow.lt-md=\"false\">\n        <span translate>thingplus.action.search</span>\n      </button>\n      <button class=\"action-btn text-btn\" (click)=\"openFilter($event)\" fxShow.gt-sm=\"false\">\n        <span translate>thingplus.action.search</span>\n      </button>\n    </section>\n  </header>\n  <header class=\"widget-sub-header\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\">\n    <section class=\"widget-header-left-section\" fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"target-month\">{{targetMonth}}</div>\n      <div class=\"month-controller\" fxLayoutAlign=\"start center\">\n        <div class=\"page-button prev-btn\" (click)=\"prevMonth($event)\">\n          <i class=\"material-icons\">keyboard_arrow_left</i>\n        </div>\n        <div class=\"page-button prev-btn\" (click)=\"nextMonth($event)\">\n          <i class=\"material-icons\">keyboard_arrow_right</i>\n        </div>\n      </div>\n      <div class=\"today-info\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.8em\" [fxShow]=\"isCurrentMonth\">\n        <span class=\"today-date\">{{todayDate}}</span>\n        <span class=\"today-event\" [fxShow]=\"todayEvent\">{{todayEvent}}</span>\n      </div>\n    </section>\n    <section class=\"widget-header-right-section\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-action\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n        <div\n          class=\"widget-header-action\"\n          *ngFor=\"let headerAction of headerActionList\"\n          fxLayoutAlign=\"start center\"\n          fxLayoutGap=\"0.5em\"\n          (click)=\"headerAction.action($event)\"\n        >\n          <i class=\"material-icons\">{{headerAction.icon}}</i>\n          <span translate>{{headerAction.name}}</span>\n        </div>\n      </div>\n    </section>\n  </header>\n  <main class=\"widget-content\">\n    <section class=\"calendar-section\" fxLayout=\"column\">\n      <div class=\"calendar-header\" fxLayout=\"row\">\n        <div fxFlex class=\"calendar-header-left\" fxLayout=\"column\">\n          <div class=\"cell calendar-left-cell sm\">\n            <span class=\"title\" translate>thingplus.label.sort</span>\n          </div>\n          <div class=\"cell calendar-left-cell count-cell\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.8em\">\n            <span class=\"device-count-label\" translate>thingplus.label.entire</span>\n            <span class=\"device-count\">{{deviceCount}}</span>\n          </div>\n        </div>\n        <div class=\"calendar-header-right\" fxLayout=\"column\">\n          <div class=\"calendar-top\" fxLayout=\"row\">\n            <div class=\"cell header-cell week-cell week-cell-{{week.length}}\" *ngFor=\"let week of weekList\">\n              {{week.label}}\n            </div>\n          </div>\n          <div class=\"calendar-mid\" fxLayout=\"row\">\n            <div class=\"cell header-cell\" [ngClass]=\"{'holiday': day.isHoliday}\" *ngFor=\"let day of dayList\">\n              {{day.label}}\n            </div>\n          </div>\n          <div class=\"calendar-bot\" fxLayout=\"row\">\n            <div class=\"cell header-cell\" [ngClass]=\"{'holiday': date.isHoliday}\" *ngFor=\"let date of dateList\">\n              {{date.label}}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"calendar-body\" fxLayout=\"row\">\n        <div fxFlex class=\"calendar-body-left\" fxLayout=\"column\">\n          <div class=\"customer-group\" *ngFor=\"let schedule of scheduleList\">\n            <div\n              class=\"cell calendar-left-cell group-header lg pad\"\n              fxLayoutAlign=\"space-between center\"\n              fxLayoutGap=\"0.8em\"\n              (click)=\"foldGroup($event, schedule)\"\n            >\n              <div fxLayoutAlign=\"start center\" fxLayoutGap=\"0.8em\">\n                <div class=\"customer-name-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.8em\">\n                  <i class=\"material-icons\" [ngClass]=\"{'fold': schedule.isFold}\">expand_less</i>\n                  <span class=\"customer-name\">{{schedule.name}}</span>\n                </div>\n                <div class=\"device-count\">{{schedule.count}}</div>\n              </div>\n              <i\n                class=\"device-action material-icons tooltip tooltip-customerL2\"\n                [attr.data-index]=\"[schedule.index]\"\n                (click)=\"changeContent($event, 'customerL2', schedule)\"\n              >\n                more_vert\n              </i>\n            </div>\n            <div class=\"group-content\" [fxShow]=\"!schedule.isFold\">\n              <div\n                class=\"cell calendar-left-cell\"\n                *ngFor=\"let device of schedule.child\"\n                fxLayoutAlign=\"space-between center\"\n              >\n                <div class=\"device-name-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.8em\">\n                  <i class=\"material-icons\">subdirectory_arrow_right</i>\n                  <span class=\"device-name\">{{device.label}}</span>\n                </div>\n                <i\n                  class=\"device-action material-icons tooltip tooltip-device\"\n                  [attr.data-index]=\"[schedule.index, device.index]\"\n                  (click)=\"changeContent($event, 'device', device)\"\n                >\n                  more_vert\n                </i>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"calendar-body-right\">\n          <div *ngFor=\"let schedule of scheduleList\">\n            <div class=\"row\" fxLayout=\"row\">\n              <div\n                class=\"cell content-cell lg\"\n                [ngClass]=\"{'weekend': time.isWeekend, 'today': time.todayDif == 0}\"\n                *ngFor=\"let time of schedule.timeList\"\n              >\n                <div class=\"line-block\" *ngIf=\"time.value != 0\"></div>\n              </div>\n            </div>\n            <div\n              class=\"row group-content\"\n              *ngFor=\"let device of schedule.child\"\n              fxLayout=\"row\"\n              [fxShow]=\"!schedule.isFold\"\n            >\n              <div\n                class=\"cell content-cell block-cell\"\n                *ngFor=\"let time of device.timeList\"\n                [ngClass]=\"{'weekend': time.isWeekend, 'today': time.todayDif == 0}\"\n              >\n                <div\n                  class=\"block\"\n                  *ngIf=\"time.value != 0\"\n                  fxLayoutAlign=\"center center\"\n                  [ngStyle]=\"{'background-color':time.color}\"\n                  [ngClass]=\"{'prev': time.todayDif > 0, 'today': time.todayDif == 0, 'next': time.todayDif < 0}\"\n                >\n                  <div\n                    class=\"block-action\"\n                    [ngClass]=\"{'tooltip': time.todayDif <= 0, 'tooltip-time': time.todayDif <= 0}\"\n                    [attr.data-index]=\"[schedule.index, device.index, time.index]\"\n                    (click)=\"changeContent($event, 'time', time, device)\"\n                    (mouseenter)=\"changeBlockContent($event, 'time', time, device)\"\n                  ></div>\n                </div>\n                <div\n                  class=\"block new-block material-icons\"\n                  *ngIf=\"time.value == 0 && time.todayDif <= 0 && !time.isHoliday\"\n                  fxLayoutAlign=\"center center\"\n                  (click)=\"newScheduleHandler($event, device, time)\"\n                >\n                  add\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n    <div class=\"loading-layout\" [fxShow]=\"isLoading\">\n      <div class=\"progress-box\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 220 220\">\n          <linearGradient id=\"gradient-hair\">\n            <stop offset=\"0%\" stop-color=\"#ed6d0053\"></stop>\n            <stop offset=\"100%\" stop-color=\"#ed6d00ff\"></stop>\n          </linearGradient>\n          <linearGradient id=\"gradient-hair-2\">\n            <stop offset=\"0%\" stop-color=\"#ed6d0053\"></stop>\n            <stop offset=\"50%\" stop-color=\"#ed6d0000\"></stop>\n          </linearGradient>\n          <path stroke=\"url('#gradient-hair')\" stroke-width=\"20\" fill=\"none\" d=\"M 10 110 A 100 100 0 0 1 210 110\" />\n          <path stroke=\"url('#gradient-hair-2')\" stroke-width=\"20\" fill=\"none\" d=\"M 210 110 A 100 100 180 0 1 10 110\" />\n        </svg>\n      </div>\n    </div>\n  </main>\n</div>\n",
        "templateCss": "@import 'https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0';\n\n#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n  white-space: nowrap;\n}\n\n.widget-tab {\n  width: 100%;\n  height: 5em;\n  min-height: 30px;\n  background-color: var(--tb-service-background-2);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.tab {\n  min-width: 8em;\n  height: 100%;\n  font-size: 1.4em;\n  font-weight: 500;\n  border-right: 1px solid var(--tb-service-border-1);\n  color: var(--tb-service-font-4);\n  cursor: pointer;\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.tab.active {\n  background-color: var(--tb-service-background-0);\n  color: var(--tb-service-font-5);\n  border-top: 0.2em solid var(--tb-service-accent);\n  border-bottom: 1px solid var(--tb-service-background-0);\n  box-sizing: content-box !important;\n}\n.tab:not(.active):hover {\n  color: var(--tb-service-font-4);\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n\n.normal-label {\n  font-size: 1.2em;\n  font-weight: 500;\n  line-height: 1.17;\n  letter-spacing: -0.03em;\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n}\n\n/* widget-header-right-section */\n/* Entity Controller */\n.widget-header .widget-header-right-section .entity-controller {\n  margin-right: var(--tb-config-padding);\n}\n.widget-header .widget-header-right-section .mat-select {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header .widget-header-right-section .mat-select:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header .widget-header-right-section .mat-select-trigger {\n  width: 13em;\n  min-width: 130px;\n  padding: calc(9em / 14);\n  font-size: 1.4em;\n  line-height: 1;\n}\n.widget-header .widget-header-right-section .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n.widget-header .widget-header-right-section .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n/* Action Button */\n.widget-header .widget-header-right-section .action-btn {\n  all: unset;\n  line-height: 1.3;\n  cursor: pointer;\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n  white-space: nowrap;\n}\n.widget-header .widget-header-right-section .text-btn {\n  padding: 0.6em 1.6em;\n  background-color: var(--tb-service-accent);\n  border: 1px solid var(--tb-service-accent);\n}\n.widget-header .widget-header-right-section .text-btn:hover {\n  background-color: var(--tb-service-accent-hover);\n  border-color: var(--tb-service-accent-hover);\n}\n.widget-header .widget-header-right-section .text-btn:active {\n  background-color: var(--tb-service-accent-pressed);\n  border-color: var(--tb-service-accent-pressed);\n}\n.widget-header .widget-header-right-section .text-btn span {\n  font-size: 1.4em;\n  font-weight: bold;\n  color: var(--tb-service-font-0);\n}\n\n/*\n  Widget Sub Header Area\n*/\nheader.widget-sub-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n\n.widget-sub-header .widget-header-left-section .target-month {\n  color: var(--tb-service-font-5);\n  font-size: 1.6em;\n  font-weight: 600;\n}\n.widget-sub-header .widget-header-left-section .month-controller .page-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 2em;\n  min-width: 20px;\n  height: 2em;\n  min-height: 20px;\n  font-size: 1.6em;\n  cursor: pointer;\n  color: var(--tb-service-accent);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-sub-header .widget-header-left-section .month-controller .page-button:hover {\n  border: 1px solid var(--tb-service-accent);\n}\n.widget-sub-header .widget-header-left-section .today-date {\n  font-size: 1.2em;\n  color: var(--tb-service-font-4);\n}\n.widget-sub-header .widget-header-left-section .today-event {\n  font-size: 1.2em;\n  color: var(--tb-service-accent);\n}\n\n.widget-sub-header .widget-header-right-section .widget-header-action {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0.6em 1.2em;\n  cursor: pointer;\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-sub-header .widget-header-right-section .widget-header-action i {\n  font-size: 1.4em;\n  font-weight: bold;\n  color: var(--tb-service-accent);\n}\n.widget-sub-header .widget-header-right-section .widget-header-action span {\n  font-size: 1.4em;\n  color: var(--tb-service-font-5);\n  white-space: nowrap;\n}\n.widget-sub-header .widget-header-right-section .widget-header-action:hover {\n  border-color: var(--tb-service-accent-hover);\n}\n.widget-sub-header .widget-header-right-section .widget-header-action:active {\n  border-color: var(--tb-service-accent-pressed);\n}\n\n/*\n  Widget Content Area\n*/\nmain.widget-content {\n  position: relative;\n  width: 100%;\n}\n\n/* Calendar Section */\nsection.calendar-section {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n.calendar-section .calendar-header {\n  width: 100%;\n}\n.calendar-section .cell {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 1px solid var(--tb-service-border-1);\n  color: var(--tb-service-font-5);\n}\n.calendar-section .cell span {\n  font-size: 1.2em;\n}\n.count-cell {\n  padding: 2em;\n}\n.calendar-section .cell .device-count {\n  font-weight: 600;\n  background-color: var(--tb-service-blur-accent-2);\n  color: var(--tb-service-accent);\n  padding: 0.1em 0.4em;\n  border-radius: 0.1em;\n}\n.calendar-section .calendar-left-cell {\n  min-width: 30em;\n  width: 100%;\n  height: 4.8em;\n  box-sizing: border-box;\n  padding: 2em;\n}\n.calendar-section .calendar-left-cell.sm {\n  height: 3.2em;\n  padding: 0;\n}\n.calendar-section .calendar-left-cell.lg {\n  height: 6em;\n}\n.calendar-section .header-cell {\n  width: 4.2em;\n  height: 2.4em;\n  border: 1px solid var(--tb-service-border-1);\n}\n.calendar-section .calendar-header-right {\n  max-width: 100%;\n  overflow: hidden;\n}\n.calendar-section .row {\n  width: fit-content;\n}\n.calendar-section .calendar-top,\n.calendar-section .calendar-mid,\n.calendar-section .calendar-bot {\n  width: fit-content;\n}\n.calendar-section .calendar-mid .cell.holiday,\n.calendar-section .calendar-bot .cell.holiday {\n  color: var(--tb-service-accent);\n}\n.calendar-section .week-cell {\n  height: 3.2em;\n  background-color: var(--tb-service-background-1);\n}\n.calendar-section .week-cell-1 {\n  width: 4.2em;\n}\n.calendar-section .week-cell-2 {\n  width: calc(4.2em * 2);\n}\n.calendar-section .week-cell-3 {\n  width: calc(4.2em * 3);\n}\n.calendar-section .week-cell-4 {\n  width: calc(4.2em * 4);\n}\n.calendar-section .week-cell-5 {\n  width: calc(4.2em * 5);\n}\n.calendar-section .week-cell-6 {\n  width: calc(4.2em * 6);\n}\n.calendar-section .week-cell-7 {\n  width: calc(4.2em * 7);\n}\n.calendar-section .calendar-body {\n  width: 100%;\n  max-height: 100%;\n  overflow: auto;\n}\n.calendar-section .calendar-body::-webkit-scrollbar {\n  display: none;\n}\n.calendar-section .calendar-body-left {\n  height: fit-content;\n}\n.calendar-section .group-header {\n  cursor: pointer;\n}\n.calendar-section .customer-name-box i {\n  font-size: 1.6em;\n  color: var(--tb-service-accent);\n  transition-property: transform;\n  transition-duration: var(--tb-config-color-duration);\n}\n.calendar-section .customer-name-box i.fold {\n  transform: rotate(180deg);\n}\n.calendar-section .customer-name {\n  font-size: 1.4em;\n  font-weight: 500;\n  color: var(--tb-service-font-5);\n}\n.calendar-section .customer-devices {\n  font-size: 1.4em;\n  color: var(--tb-service-font-5);\n}\n.calendar-section .calendar-body-right {\n  max-width: 100%;\n  height: fit-content;\n}\n.calendar-section .device-name-box {\n  padding: 0em 2em;\n}\n.calendar-section .device-name-box i {\n  font-size: 1.6em;\n  color: var(--tb-service-font-2);\n}\n.calendar-section .device-name {\n  font-size: 1.4em;\n  color: var(--tb-service-font-5);\n}\n.calendar-section .device-name {\n  font-size: 1.4em;\n  color: var(--tb-service-font-5);\n}\n.calendar-section .device-action {\n  font-size: 1.6em;\n  color: var(--tb-service-font-2);\n  cursor: pointer;\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.calendar-section .device-action:hover {\n  color: var(--tb-service-accent);\n}\n.calendar-section .content-cell {\n  width: 4.2em;\n  height: 4.8em;\n  border-top: none;\n  border-bottom: none;\n  padding: 0.1em;\n  background-color: var(--tb-service-background-2);\n}\n.calendar-section .row .content-cell {\n  padding: 0;\n}\n.calendar-section .content-cell.lg {\n  height: 6em;\n}\n.calendar-section .content-cell.weekend {\n  background-color: var(--tb-service-background-3);\n}\n.calendar-section .content-cell.today {\n  border-left: 2px solid var(--tb-service-accent);\n}\n.calendar-section .content-cell .block {\n  width: 100%;\n  height: calc(100% / 6);\n  border-radius: 0.1em;\n  background-color: currentColor;\n  transition-property: opacity;\n  transition-duration: var(--tb-config-color-duration);\n  cursor: pointer;\n}\n.calendar-section .content-cell .block.prev {\n  cursor: default;\n}\n.calendar-section .content-cell .block:hover {\n  opacity: 0.75;\n}\n.calendar-section .content-cell .block.new-block {\n  background-color: var(--tb-service-font-4);\n  color: var(--tb-service-font-0);\n  font-size: 1em;\n  opacity: 0;\n}\n.calendar-section .content-cell .block.new-block:hover {\n  opacity: 0.5;\n}\n.calendar-section .content-cell .block-action {\n  width: 100%;\n  height: 100%;\n}\n.calendar-section .content-cell .line-block {\n  width: 100%;\n  height: 0.2em;\n  background-color: var(--tb-service-group-line);\n}\n.loading-layout {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: var(--tb-service-background-0);\n}\n\n.progress-box {\n  animation-name: example;\n  animation-duration: 2s;\n  animation-delay: 0s;\n  animation-iteration-count: infinite;\n}\n.progress-box svg {\n  width: 3em;\n  height: 3em;\n}\n\n@keyframes example {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n",
        "controllerScript": "const ENTITY_TYPE = ['TENANT', 'CUSTOMER_L1', 'CUSTOMER_L2'];\nconst STANDARD_WINDOW_SIZE = 1920 / 100;\nconst HOUR_MS = 3600000;\nconst DAY_MS = 86400000;\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope, $container } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  makeTab();\n  getDashboardParameter();\n  resize();\n  self.ctx.$scope.isLoading$.subscribe(() => {\n    $('.tooltip', $container).tooltipster({\n      content: '',\n      interactive: true,\n      theme: 'tooltipster-transparent',\n      trigger: 'click',\n      delay: 200,\n    });\n    $('.block').tooltipster({\n      content: '',\n      interactive: true,\n      theme: 'tooltipster-transparent',\n      trigger: 'hover',\n      delay: 0,\n    });\n  });\n\n  if (!custom.isSample) {\n    // 현재 사용자의 Root 엔터티로부터 관계 트리 형성\n    custom.relations[custom.rootEntity.id.id] = {\n      id: custom.rootEntity.id,\n      name: custom.rootEntity.name,\n      parent: '',\n      child: [],\n    };\n    $scope.ownerLevel = await getCurrentLevel();\n    getCustomer([custom.relations[custom.rootEntity.id.id]]);\n  }\n\n  self.ctx.detectChanges();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.actionSources = function () {\n  return {\n    widgetHeaderButton: {\n      name: 'Custom Header Button',\n      multiple: true,\n    },\n    customAction: {\n      name: 'Custom Action',\n      multiple: true,\n    },\n  };\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  custom.now = moment().valueOf();\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetTab = $('.widget-tab', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetSubHeader = $('.widget-sub-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n  custom.$widgetContent = $('.widget-content', $container);\n  custom.$calendarBody = $('.calendar-body', $container);\n  custom.$calendarBodyRight = $('.calendar-body-right', $container);\n  custom.$calendarHeaderRight = $('.calendar-header-right', $container);\n\n  custom.ymStr = t('thingplus.time-format.ym-str');\n  custom.mdStr = t('thingplus.time-format.md-str');\n  custom.day = t('thingplus.time-format.weekday-long.' + moment(custom.now).format('ddd').toLowerCase());\n\n  $scope.tabList = [];\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n  $scope.deviceList = [\n    { name: t('thingplus.selector.entire-device'), label: t('thingplus.selector.entire-device'), value: '' },\n  ];\n  $scope.selectedCustomerL1 = '';\n  $scope.selectedCustomerL2 = '';\n  $scope.selectedDevice = '';\n  $scope.ownerLevel = 2;\n  $scope.headerActionList = self.ctx.actionsApi.getActionDescriptors('widgetHeaderButton').map(x => {\n    return { name: x.name, icon: x.icon, action: e => handleHeaderAction(x) };\n  });\n  $scope.customActionList = self.ctx.actionsApi.getActionDescriptors('customAction');\n  $scope.yearList = [];\n  $scope.monthList = [];\n  for (let i = 2023; i <= moment(custom.now).year(); i++) {\n    $scope.yearList.push({ label: t('thingplus.time-format.year-value', { year: i }), value: i });\n  }\n  for (let i = 1; i <= 12; i++) {\n    $scope.monthList.push({ label: t('thingplus.time-format.month-value', { month: i }), value: i });\n  }\n\n  $scope.selectedYear = moment(custom.now).year();\n  $scope.selectedMonth = moment(custom.now).month() + 1;\n  $scope.targetStart = moment(custom.now).startOf('month').valueOf();\n  $scope.targetMonth = moment($scope.targetStart).format(custom.ymStr);\n  $scope.todayDate = moment(custom.now).format(custom.mdStr) + ' ' + custom.day;\n  $scope.todayEvent = null;\n  $scope.isCurrentMonth = true;\n  $scope.weekList = [];\n  $scope.dayList = [];\n  $scope.dateList = [];\n  $scope.label = '';\n  $scope.isLoading = true;\n\n  // Define Normal Variables\n  custom.relations = {};\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.rootEntity = custom.ownerDatasource.entity;\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.hiddenDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.ownerDatasource.entityAliasId);\n  custom.mainDatasources = self.ctx.datasources.filter(\n    x => x.entityAliasId !== custom.ownerDatasource.entityAliasId && x.entityType == 'DEVICE'\n  );\n  custom.originDataKeys = self.ctx.defaultSubscription.configuredDatasources[1].dataKeys;\n  custom.targetDatasources = [];\n  custom.t = t;\n  custom.dragPos = [0, 0];\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  custom.widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (custom.widgetFontSize < 6.25) {\n    custom.widgetFontSize = 6.25;\n  }\n  custom.computedStyle = getComputedStyle($container[0]);\n  $scope.deviceCount = custom.mainDatasources.length;\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(t(self.ctx.widget.config.title));\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope, $container } = self.ctx;\n  custom.$calendarBodyRight.on('mousedown', mouseDownHandler);\n  $scope.selectTab = function (e) {\n    let state = e || 'default';\n    let param = custom.dashboardParams || {};\n    self.ctx.stateController.updateState(state, param, null);\n  };\n  $scope.setCustomerL1 = function (e) {\n    $scope.selectedCustomerL1 = e;\n    $scope.selectedCustomerL2 = '';\n    $scope.selectedDevice = '';\n    changeCustomerL2List();\n    changeDeviceList();\n  };\n  $scope.setCustomerL2 = function (e) {\n    $scope.selectedCustomerL2 = e;\n    $scope.selectedDevice = '';\n    changeDeviceList();\n  };\n  $scope.setDevice = function (e) {\n    $scope.selectedDevice = e;\n  };\n  $scope.search = function (e) {\n    updateDashboardState();\n  };\n  $scope.setYear = function (e) {\n    $scope.selectedYear = e;\n  };\n  $scope.setMonth = function (e) {\n    $scope.selectedMonth = e;\n  };\n  $scope.prevMonth = async function () {\n    $scope.isLoading = true;\n    $scope.targetStart = moment($scope.targetStart).subtract(1, 'months').valueOf();\n    $scope.targetMonth = moment($scope.targetStart).format(custom.ymStr);\n    if (moment($scope.targetStart).startOf('month').valueOf() == moment(custom.now).startOf('month').valueOf()) {\n      $scope.isCurrentMonth = true;\n    } else {\n      $scope.isCurrentMonth = false;\n    }\n    custom.prevInfo = await loadData();\n\n    setData();\n    setCalendarInfo();\n  };\n  $scope.nextMonth = async function () {\n    $scope.isLoading = true;\n    $scope.targetStart = moment($scope.targetStart).add(1, 'months').valueOf();\n    $scope.targetMonth = moment($scope.targetStart).format(custom.ymStr);\n    if (moment($scope.targetStart).startOf('month').valueOf() == moment(custom.now).startOf('month').valueOf()) {\n      $scope.isCurrentMonth = true;\n    } else {\n      $scope.isCurrentMonth = false;\n    }\n    custom.prevInfo = await loadData();\n    setData();\n    setCalendarInfo();\n  };\n  $scope.foldGroup = function (e, schedule) {\n    if (!e.target.classList.contains('device-action')) {\n      schedule.isFold = !schedule.isFold;\n    }\n  };\n  $scope.newScheduleHandler = function (e, device, time) {\n    customActionHandler('Edit Schedule', 'time', time, device);\n  };\n  $scope.changeContent = function (e, type, target, details) {\n    $(e.target, $container).tooltipster('content', createTooltip(type, target, details));\n  };\n  $scope.changeBlockContent = function (e, type, target, details) {\n    $(e.target.parentNode, $container).tooltipster('content', createBlockTooltip(type, target, details));\n  };\n  $scope.openFilter = function (e) {\n    let descriptor = self.ctx.actionsApi.getActionDescriptors('filterAction')[0];\n    self.ctx.actionsApi.handleWidgetAction(\n      {},\n      descriptor,\n      custom.ownerDatasource.entity.id,\n      custom.ownerDatasource.entityName,\n      {},\n      custom.ownerDatasource.entityLabel\n    );\n  };\n}\n\n// 대시보드 상태 탭 생성\nfunction makeTab() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return;\n  $scope.tabList = [];\n  for (let i in self.ctx.stateController.statesValue) {\n    $scope.tabList.push({\n      label: 'thingplus.menu.' + i,\n      id: i,\n      isActive: i == self.ctx.stateController.stateValue,\n    });\n  }\n}\n\nfunction getDashboardParameter() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return {};\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n  if (custom.dashboardParams) {\n    if (custom.dashboardParams.customerL1) {\n      $scope.selectedCustomerL1 = custom.dashboardParams.customerL1.entityId.id;\n    }\n    if (custom.dashboardParams.customerL2) {\n      $scope.selectedCustomerL2 = custom.dashboardParams.customerL2.entityId.id;\n    }\n    if (custom.dashboardParams.entityId && custom.dashboardParams.entityId.entityType == 'DEVICE') {\n      $scope.selectedDevice = custom.dashboardParams.entityId.id;\n    }\n    if (custom.dashboardParams.selectedYear) {\n      custom.selectedYear = custom.dashboardParams.selectedYear;\n    }\n    if (custom.dashboardParams.selectedMonth) {\n      custom.selectedMonth = custom.dashboardParams.selectedMonth;\n    }\n    self.ctx.detectChanges();\n  }\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n    if (self.ctx.width < 600) {\n      originWidth = 600;\n    }\n  }\n\n  custom.widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (custom.widgetFontSize < 6.25) {\n    custom.widgetFontSize = 6.25;\n  }\n  custom.$widget.css('font-size', `${custom.widgetFontSize}px`);\n\n  // Header Height를 제외한 영역을 Main의 Height로 설정\n  let tabHeight = custom.$widgetTab.outerHeight(true);\n  let headerHeight = custom.$widgetHeader.outerHeight(true);\n  let subHeaderHeight = custom.$widgetSubHeader.outerHeight(true);\n  custom.$widgetContent.css(\n    'height',\n    `calc(100% - ${tabHeight + headerHeight + subHeaderHeight + custom.widgetFontSize * 2}px)`\n  );\n\n  self.ctx.detectChanges();\n}\n\nasync function getCurrentLevel() {\n  let { custom } = self.ctx;\n  if (custom.rootEntity.id.entityType == 'TENANT') {\n    return 0;\n  } else {\n    let result = await self.ctx.attributeService\n      .getEntityAttributes(custom.rootEntity.id, 'SERVER_SCOPE', ['customerType'])\n      .toPromise();\n    if (result && result[0]) {\n      if (result[0].value == ENTITY_TYPE[1]) {\n        return 1;\n      } else {\n        return 2;\n      }\n    }\n  }\n}\n\nfunction getCustomer(entities) {\n  let { custom } = self.ctx;\n  let promises = [];\n  if (entities.length > 0) {\n    for (let i = 0; i < entities.length; i++) {\n      promises.push(self.ctx.entityRelationService.findInfoByFrom(entities[i].id));\n    }\n    self.ctx.rxjs.forkJoin(promises).subscribe(childs => {\n      let newChild = [];\n      for (let j = 0; j < childs.length; j++) {\n        for (let k = 0; k < childs[j].length; k++) {\n          custom.relations[childs[j][k].to.id] = {\n            id: childs[j][k].to,\n            name: childs[j][k].toName,\n            parent: entities[j],\n            child: [],\n            type: 'CUSTOMER',\n          };\n          custom.relations[entities[j].id.id].child.push(custom.relations[childs[j][k].to.id]);\n          if (childs[j][k].to.entityType === 'USER') {\n            custom.relations[childs[j][k].to.id].type = 'USER';\n          }\n          if (childs[j][k].to.entityType === 'DEVICE') {\n            custom.relations[childs[j][k].to.id].type = 'DEVICE';\n          }\n          if (childs[j][k].to.entityType === 'ASSET') {\n            custom.relations[childs[j][k].to.id].type = 'ASSET';\n          }\n          if (childs[j][k].to.entityType === 'CUSTOMER') {\n            newChild.push(custom.relations[childs[j][k].to.id]);\n          }\n        }\n      }\n      getCustomer(newChild);\n    });\n  } else {\n    distributeLevel();\n  }\n}\n\n// hierarchy 레벨에 따라 배열에 따로 저장\nfunction distributeLevel() {\n  let { custom, $scope } = self.ctx;\n  let depth = $scope.ownerLevel;\n  let root = custom.relations[custom.rootEntity.id.id];\n  root.type = ENTITY_TYPE[depth];\n  for (let i in root.child) {\n    if (root.child[i].type == 'CUSTOMER') {\n      root.child[i].type = ENTITY_TYPE[depth + 1];\n    }\n    for (let j in root.child[i].child) {\n      if (root.child[i].child[j].type == 'CUSTOMER') {\n        root.child[i].child[j].type = ENTITY_TYPE[depth + 2];\n      }\n    }\n  }\n  custom.customerL1List = [];\n  custom.customerL2List = [];\n  custom.deviceList = [];\n\n  for (let i in custom.relations) {\n    if (custom.relations[i].type == ENTITY_TYPE[1]) {\n      custom.customerL1List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[2]) {\n      custom.customerL2List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == 'DEVICE') {\n      custom.deviceList.push(custom.relations[i]);\n    }\n  }\n\n  getDeviceInfo();\n}\n\nfunction getDeviceInfo() {\n  let { custom, $scope } = self.ctx;\n  let observables = [];\n  custom.deviceList = [];\n  for (let i in custom.customerL2List) {\n    let customerId = custom.customerL2List[i].id.id;\n    observables.push(self.ctx.http.get(`/api/customer/${customerId}/deviceInfos?pageSize=50000&page=0`));\n  }\n\n  self.ctx.rxjs.forkJoin(observables).subscribe(async devices => {\n    for (let i in devices) {\n      for (let j in devices[i].data) {\n        custom.relations[devices[i].data[j].id.id].label =\n          devices[i].data[j].label != '' ? devices[i].data[j].label : devices[i].data[j].name;\n        custom.deviceList.push(custom.relations[devices[i].data[j].id.id]);\n      }\n    }\n\n    $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n    $scope.customerL1List = $scope.customerL1List.concat(\n      custom.customerL1List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n\n    changeCustomerL2List();\n    changeDeviceList();\n    custom.targetDatasources = [];\n    custom.targetCustomer = [];\n    custom.targetCustomer = custom.customerL2List.filter(customer => {\n      if ($scope.selectedDevice != '') {\n        return customer.child.findIndex(device => device.id.id == $scope.selectedDevice) != -1;\n      } else if ($scope.selectedCustomerL2 != '') {\n        return customer.id.id == $scope.selectedCustomerL2;\n      } else if ($scope.selectedCustomerL1 != '') {\n        return custom.relations[$scope.selectedCustomerL1].child.findIndex(child => child.id.id == customer.id.id);\n      }\n      return true;\n    });\n    $scope.scheduleList = custom.targetCustomer.map((customer, idx) => {\n      return {\n        index: idx,\n        name: customer.name,\n        label: customer.name,\n        id: customer.id,\n        type: 'CUSTOMER',\n        timeList: [],\n        isFold: false,\n        child: customer.child\n          .filter(device => {\n            if ($scope.selectedDevice != '') {\n              return device.id.id == $scope.selectedDevice;\n            }\n            return true;\n          })\n          .map((device, idx) => {\n            custom.targetDatasources.push(device);\n            return { index: idx, name: device.name, label: device.label, id: device.id, type: 'DEVICE', timeList: [] };\n          }),\n      };\n    });\n    custom.commonInfo = await loadAttributes();\n    custom.holidayInfo = await loadHoliday();\n    custom.prevInfo = await loadData();\n    setData();\n    setCalendarInfo();\n    self.ctx.detectChanges();\n  });\n}\n\nfunction setData() {\n  let { custom, $scope } = self.ctx;\n  let lastDate = moment($scope.targetStart).endOf('month').date();\n  // 초기 셋팅 0으로 설정\n  custom.scheduleInfo = {};\n  for (let i in custom.targetCustomer) {\n    custom.scheduleInfo[custom.targetCustomer[i].id.id] = [];\n    for (let j = 1; j <= lastDate; j++) {\n      custom.scheduleInfo[custom.targetCustomer[i].id.id].push(0);\n    }\n  }\n  for (let i in custom.targetDatasources) {\n    custom.scheduleInfo[custom.targetDatasources[i].id.id] = [];\n    for (let j = 1; j <= lastDate; j++) {\n      custom.scheduleInfo[custom.targetDatasources[i].id.id].push(0);\n    }\n  }\n\n  let nowTs = moment(custom.now).startOf('day').valueOf();\n  // 과거 값 세팅\n  for (let i in custom.targetDatasources) {\n    for (let j in custom.prevInfo[i].TP_PlannedWorkTimeDay) {\n      let targetTs = moment(custom.prevInfo[i].TP_PlannedWorkTimeDay[j].ts).startOf('day').valueOf();\n      if (nowTs > targetTs) {\n        let index = _.floor((targetTs - $scope.targetStart) / DAY_MS);\n        custom.scheduleInfo[custom.targetDatasources[i].id.id][index] = _.round(\n          custom.prevInfo[i].TP_PlannedWorkTimeDay[j].value / HOUR_MS,\n          1\n        );\n      }\n    }\n  }\n\n  // 미래 값 정리\n  custom.futureInfo = {};\n  for (let i in custom.targetDatasources) {\n    custom.futureInfo[custom.targetDatasources[i].id.id] = {};\n    for (let j in custom.commonInfo[i]) {\n      if (custom.commonInfo[i][j].value) {\n        custom.futureInfo[custom.targetDatasources[i].id.id][custom.commonInfo[i][j].key] =\n          custom.commonInfo[i][j].value;\n      }\n    }\n  }\n\n  // 미래 값 세팅\n  for (let i in custom.targetDatasources) {\n    // 기본 값 세팅\n    let plannedOperationTime = custom.futureInfo[custom.targetDatasources[i].id.id].plannedOperationTime;\n    for (let j = 1; j <= lastDate; j++) {\n      let targetTs = moment($scope.targetStart).startOf('day').date(j).valueOf();\n      if (nowTs <= targetTs) {\n        if (!plannedOperationTime.isDivideByWeek) {\n          custom.scheduleInfo[custom.targetDatasources[i].id.id][j - 1] = _.round(\n            plannedOperationTime.everyday / HOUR_MS,\n            1\n          );\n        } else {\n          let day = moment($scope.targetStart).date(j).isoWeekday();\n          custom.scheduleInfo[custom.targetDatasources[i].id.id][j - 1] = _.round(\n            plannedOperationTime.week[day - 1] / HOUR_MS,\n            1\n          );\n        }\n      }\n    }\n\n    // 커스텀 값 세팅\n    let plannedCustom = custom.futureInfo[custom.targetDatasources[i].id.id].plannedCustom;\n    for (let j = 1; j <= lastDate; j++) {\n      let targetTs = moment($scope.targetStart).startOf('day').date(j).valueOf();\n      if (nowTs <= targetTs) {\n        for (let k in plannedCustom) {\n          if (moment(+k).startOf('day').valueOf() == targetTs) {\n            custom.scheduleInfo[custom.targetDatasources[i].id.id][j - 1] = _.round(plannedCustom[k] / HOUR_MS, 1);\n          }\n        }\n      }\n    }\n\n    // 휴일 값 세팅\n    for (let j = 1; j <= lastDate; j++) {\n      let targetTs = moment($scope.targetStart).startOf('day').date(j).valueOf();\n      if (nowTs <= targetTs && checkHoliday(targetTs, custom.holidayInfo)) {\n        custom.scheduleInfo[custom.targetDatasources[i].id.id][j - 1] = 0;\n      }\n    }\n  }\n}\n\nfunction setCalendarInfo() {\n  console.time('1');\n  let { custom, $scope, $container } = self.ctx;\n  let firstDay = moment($scope.targetStart).startOf('month').isoWeekday();\n  let lastDate = moment($scope.targetStart).endOf('month').date();\n  let lastDay = moment($scope.targetStart).endOf('month').isoWeekday();\n  $scope.weekList = [];\n  let count = 0;\n  $scope.weekList.push({\n    label: firstDay <= 4 ? t('thingplus.time-format.week-value', { week: ++count }) : '',\n    length: 8 - firstDay,\n  });\n  for (let i = 8 - firstDay + 1; i < lastDate - lastDay + 1; i += 7) {\n    $scope.weekList.push({\n      label: t('thingplus.time-format.week-value', { week: ++count }),\n      length: 7,\n    });\n  }\n  $scope.weekList.push({\n    label: lastDay >= 4 ? t('thingplus.time-format.week-value', { week: ++count }) : '',\n    length: lastDay,\n  });\n\n  $scope.dayList = [];\n  $scope.dateList = [];\n  for (let i in $scope.scheduleList) {\n    $scope.scheduleList[i].timeList = [];\n    $scope.scheduleList[i].count = $scope.scheduleList[i].child.length;\n    for (let j in $scope.scheduleList[i].child) {\n      $scope.scheduleList[i].child[j].timeList = [];\n    }\n  }\n\n  for (let i = 1; i <= lastDate; i++) {\n    let nowTs = moment(custom.now).startOf('day').valueOf();\n    let targetTs = $scope.targetStart + (i - 1) * DAY_MS;\n\n    let isHoliday = checkHoliday(targetTs, custom.holidayInfo);\n    let isWeekend = moment($scope.targetStart).date(i).isoWeekday() > 5;\n    $scope.dayList.push({\n      label: t('thingplus.time-format.weekday-short.' + moment($scope.targetStart).date(i).format('ddd').toLowerCase()),\n      isHoliday: isHoliday,\n      isWeekend: isWeekend,\n    });\n    $scope.dateList.push({\n      label: i,\n      isHoliday: isHoliday,\n      isWeekend: isWeekend,\n    });\n    for (let j in $scope.scheduleList) {\n      let valueAcc = 0;\n      for (let k in $scope.scheduleList[j].child) {\n        let color = '';\n        let value = custom.scheduleInfo[$scope.scheduleList[j].child[k].id.id][i - 1];\n        if (value > 8) {\n          color =\n            nowTs > targetTs ? getStyle('--tb-service-prev-schedule-1') : getStyle('--tb-service-next-schedule-1');\n        } else if (value > 4) {\n          color =\n            nowTs > targetTs ? getStyle('--tb-service-prev-schedule-2') : getStyle('--tb-service-next-schedule-2');\n        } else {\n          color =\n            nowTs > targetTs ? getStyle('--tb-service-prev-schedule-3') : getStyle('--tb-service-next-schedule-3');\n        }\n        valueAcc += value;\n        $scope.scheduleList[j].child[k].timeList.push({\n          index: i,\n          value: value,\n          color: color,\n          todayDif: nowTs - targetTs,\n          isHoliday: isHoliday,\n          isWeekend: isWeekend,\n        });\n      }\n      $scope.scheduleList[j].timeList.push({\n        index: i,\n        value: valueAcc,\n        todayDif: nowTs - targetTs,\n        isHoliday: isHoliday,\n        isWeekend: isWeekend,\n      });\n    }\n  }\n\n  $scope.isLoading = false;\n  self.ctx.detectChanges();\n}\n\n// Customer L2 리스트 갱신\nfunction changeCustomerL2List() {\n  let { custom, $scope } = self.ctx;\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n\n  if ($scope.selectedCustomerL1 === '') {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n  } else {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL1)\n        .map(x => {\n          return { name: x.name, value: x.id.id };\n        })\n    );\n  }\n}\n\n// 디바이스 리스트 갱신\nfunction changeDeviceList() {\n  let { custom, $scope } = self.ctx;\n  $scope.deviceList = [];\n\n  if ($scope.selectedCustomerL2 === '') {\n    if ($scope.selectedCustomerL1 === '') {\n      $scope.deviceList = $scope.deviceList.concat(\n        custom.deviceList.map(x => {\n          return { name: x.name, label: x.label, value: x.id.id };\n        })\n      );\n    } else {\n      $scope.deviceList = $scope.deviceList.concat(\n        custom.deviceList\n          .filter(x => x.parent.parent.id.id === $scope.selectedCustomerL1)\n          .map(x => {\n            return { name: x.name, label: x.label, value: x.id.id };\n          })\n      );\n    }\n  } else {\n    $scope.deviceList = $scope.deviceList.concat(\n      custom.deviceList\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL2)\n        .map(x => {\n          return { name: x.name, label: x.label, value: x.id.id };\n        })\n    );\n  }\n  $scope.deviceList.sort((a, b) => {\n    if (a.label > b.label) return 1;\n    if (a.label < b.label) return -1;\n    return 0;\n  });\n  $scope.deviceList = [\n    { name: t('thingplus.selector.entire-device'), label: t('thingplus.selector.entire-device'), value: '' },\n  ].concat($scope.deviceList);\n}\n\nfunction loadAttributes() {\n  let { custom, $scope } = self.ctx;\n  return new Promise(resolve => {\n    let observables = [];\n    for (let i in custom.targetDatasources) {\n      let entityId = custom.targetDatasources[i].id;\n      observables.push(\n        self.ctx.attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE', [\n          'plannedOperationTime',\n          'plannedCustom',\n        ])\n      );\n    }\n    self.ctx.rxjs.forkJoin(observables).subscribe(datas => {\n      resolve(datas);\n    });\n  });\n}\n\nfunction loadHoliday() {\n  let { custom, $scope } = self.ctx;\n  return new Promise(resolve => {\n    let entityId = custom.ownerDatasource.entity.id;\n    self.ctx.attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE', ['plannedHoliday']).subscribe(datas => {\n      let result = [];\n      if (datas && datas[0]) {\n        result = datas[0].value;\n      }\n\n      resolve(result);\n    });\n  });\n}\n\nfunction loadData() {\n  let { custom, $scope } = self.ctx;\n  return new Promise(resolve => {\n    let observables = [];\n    let start = $scope.targetStart;\n    let end = moment($scope.targetStart).endOf('month').valueOf();\n    let key = 'TP_PlannedWorkTimeDay';\n    for (let i in custom.targetDatasources) {\n      let entityId = custom.targetDatasources[i].id;\n      observables.push(\n        self.ctx.http.get(\n          `/api/plugins/telemetry/${entityId.entityType}/${entityId.id}/values/timeseries?limit=50000&agg=NONE&keys=${key}&startTs=${start}&endTs=${end}&useStrictDataTypes=true`\n        )\n      );\n    }\n    self.ctx.rxjs.forkJoin(observables).subscribe(datas => {\n      resolve(datas);\n    });\n  });\n}\n\nfunction updateDashboardState() {\n  let { custom, $scope } = self.ctx;\n  let target,\n    param = {};\n  if ($scope.selectedDevice != '') {\n    target = custom.relations[$scope.selectedDevice];\n  } else if ($scope.selectedCustomerL2 != '') {\n    target = custom.relations[$scope.selectedCustomerL2];\n  } else if ($scope.selectedCustomerL1 != '') {\n    target = custom.relations[$scope.selectedCustomerL1];\n  }\n  if (target) {\n    param = {\n      entityId: target.id,\n      entityName: target.name,\n      entityLabel: target.label,\n    };\n  }\n  if ($scope.selectedCustomerL1 != '') {\n    let customerL1 = custom.relations[$scope.selectedCustomerL1];\n    param.customerL1 = {\n      entityId: customerL1.id,\n      entityName: customerL1.name,\n      entityLabel: customerL1.label,\n    };\n  }\n  if ($scope.selectedCustomerL2 != '') {\n    let customerL2 = custom.relations[$scope.selectedCustomerL2];\n    param.customerL2 = {\n      entityId: customerL2.id,\n      entityName: customerL2.name,\n      entityLabel: customerL2.label,\n    };\n  }\n  if ($scope.selectedDevice != '') {\n    let device = custom.relations[$scope.selectedDevice];\n    param.device = {\n      entityId: device.id,\n      entityName: device.name,\n      entityLabel: device.label,\n    };\n  }\n  param.selectedYear = $scope.selectedYear;\n  param.selectedMonth = $scope.selectedMonth;\n\n  self.ctx.stateController.updateState('schedule-custom', param, null);\n  self.ctx.updateAliases();\n}\n\nfunction handleHeaderAction(descriptor) {\n  let { custom } = self.ctx;\n  self.ctx.actionsApi.handleWidgetAction(\n    {},\n    descriptor,\n    custom.ownerDatasource.entity.id,\n    custom.ownerDatasource.entityName,\n    {},\n    custom.ownerDatasource.entityLabel\n  );\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n\nfunction mouseDownHandler(e) {\n  let { custom } = self.ctx;\n  custom.dragPos = [e.clientX, e.clientY, custom.$calendarBody[0].scrollTop, custom.$calendarBodyRight[0].scrollLeft];\n  custom.$calendarBodyRight.css({ cursor: 'grabbing' });\n\n  custom.$calendarBodyRight.on('mousemove', mouseMoveHandler);\n  custom.$calendarBodyRight.on('mouseup', mouseUpHandler);\n  custom.$calendarBodyRight.on('mouseleave', mouseUpHandler);\n}\n\nfunction mouseUpHandler(e) {\n  let { custom } = self.ctx;\n  custom.$calendarBodyRight.off('mousemove');\n  custom.$calendarBodyRight.off('mouseup');\n\n  custom.$calendarBodyRight.css({ cursor: 'grab' });\n}\n\nfunction mouseMoveHandler(e) {\n  let { custom } = self.ctx;\n  // How far the mouse has been moved\n  let sensitivity = 1;\n  const dx = (custom.dragPos[0] - e.clientX) / sensitivity;\n  const dy = (custom.dragPos[1] - e.clientY) / sensitivity;\n\n  // Scroll the element\n  custom.$calendarBody[0].scrollTop = custom.dragPos[2] + dy;\n  custom.$calendarBodyRight[0].scrollLeft = custom.dragPos[3] + dx;\n  custom.$calendarHeaderRight[0].scrollLeft = custom.dragPos[3] + dx;\n}\n\nfunction checkHoliday(targetTs, holidayInfo) {\n  for (let i in holidayInfo) {\n    let month = Number(holidayInfo[i].date.split('-')[0]);\n    let date = Number(holidayInfo[i].date.split('-')[1]);\n    let targetDate = moment()\n      .month(month - 1)\n      .date(date)\n      .startOf('day')\n      .valueOf();\n    if (targetDate == targetTs) {\n      if (holidayInfo[i].isAlways) {\n        return true;\n      } else {\n        if (holidayInfo[i].startYear <= moment(targetTs).year() && holidayInfo[i].endYear >= moment(targetTs).year()) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nfunction getStyle(target) {\n  let { custom } = self.ctx;\n  return custom.computedStyle.getPropertyValue(target);\n}\n\nfunction createTooltip(type, target, details) {\n  let { custom } = self.ctx;\n  const actionList = {\n    customerL2: [\n      {\n        label: t('thingplus.action.set-schedule'),\n        handler: 'Set Default Schedule',\n      },\n      { label: t('thingplus.action.reset'), handler: 'Reset Default Schedule' },\n    ],\n    device: [\n      { label: t('thingplus.action.set-schedule'), handler: 'Set Default Schedule' },\n      { label: t('thingplus.action.reset'), handler: 'Reset Default Schedule' },\n    ],\n    time: [\n      { label: t('thingplus.action.edit'), handler: 'Edit Schedule' },\n      { label: t('thingplus.action.reset'), handler: 'Reset Schedule' },\n      { label: t('thingplus.action.delete'), handler: 'Delete Schedule', style: { color: 'red' } },\n    ],\n  };\n  let targetActionList = actionList[type];\n  let contentStyle = {\n    'background-color': getStyle('--tb-service-background-0'),\n    border: `1px solid ${getStyle('--tb-service-border-1')}`,\n    'box-shadow': `0 0 0.5em ${getStyle('--tb-service-font-4')}`,\n    'min-width': `${100 / STANDARD_WINDOW_SIZE}vw`,\n  };\n  let rowStyle = {\n    width: '100%',\n    padding: `${10 / STANDARD_WINDOW_SIZE}vw`,\n    fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n    cursor: 'pointer',\n    color: getStyle('--tb-service-font-4'),\n    'border-top': `1px solid ${getStyle('--tb-service-border-1')}`,\n  };\n\n  let $content = $('<div></div>').css(contentStyle);\n  for (let i in targetActionList) {\n    let $action = $('<div></div>').css(rowStyle);\n    if (i == 0) {\n      $action.css('border-top', 'none');\n    }\n    $action.addClass('action');\n    $action.text(targetActionList[i].label);\n    $action.on('mouseenter', function () {\n      $action.css('background-color', getStyle('--tb-service-background-2'));\n    });\n    $action.on('mouseleave', function () {\n      $action.css('background-color', 'transparent');\n    });\n    $action.on('click', function (e) {\n      $('.tooltip').tooltipster('hide');\n      customActionHandler(targetActionList[i].handler, type, target, details);\n    });\n    if (targetActionList[i].style) {\n      $action.css(targetActionList[i].style);\n    }\n    $content.append($action);\n  }\n  return $content;\n}\n\nfunction createBlockTooltip(type, target, details) {\n  let contentStyle = {\n    'background-color': 'rgba(0,0,0,0.8)',\n    'min-width': `${100 / STANDARD_WINDOW_SIZE}vw`,\n    'border-radius': `${8 / STANDARD_WINDOW_SIZE}vw`,\n  };\n  let rowStyle = {\n    width: '100%',\n    padding: `${10 / STANDARD_WINDOW_SIZE}vw`,\n    display: 'flex',\n    'justify-content': 'space-between',\n    'align-items': 'center',\n    fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n  };\n  let labelStyle = {\n    color: getStyle('--tb-service-font-1'),\n  };\n  let valueStyle = {\n    color: getStyle('--tb-service-font-0'),\n  };\n  let $content = $('<div></div>').css(contentStyle);\n  let $row = $('<div></div>').css(rowStyle);\n  let $label = $('<div></div>').css(labelStyle).text(t('thingplus.energy.planned-time'));\n  let $value = $('<div></div>')\n    .css(valueStyle)\n    .text(t('thingplus.time-format.hours-value', { hour: target.value }));\n  $row.append($label);\n  $row.append($value);\n  $content.append($row);\n\n  return $content;\n}\n\nfunction customActionHandler(action, type, target, details) {\n  let { custom, $scope } = self.ctx;\n  let targetIndex = $scope.customActionList.findIndex(x => x.name == action);\n  if (targetIndex == -1) return;\n  let descriptor = $scope.customActionList[targetIndex];\n  let entityId = target.id;\n  let entityName = target.name;\n  let entityLabel = target.label;\n  if (descriptor) {\n    if (type == 'time') {\n      entityId = details.id;\n      entityName = details.name;\n      entityLabel = details.label;\n    }\n    self.ctx.actionsApi.handleWidgetAction({}, descriptor, entityId, entityName, target, entityLabel);\n  }\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.12110445865226849,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"Maintain Schedule\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"1.6em\",\"font-weight\":600,\"letter-spacing\":\"-0.05em\",\"color\":\"var(--tb-service-font-5)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    },
    {
      "alias": "maintain_holiday",
      "name": "Maintain Holiday",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <div class=\"widget-tab\" fxLayoutAlign=\"start center\" *ngIf=\"tabList && tabList.length > 1\">\n    <div\n      class=\"tab\"\n      *ngFor=\"let tab of tabList\"\n      fxLayoutAlign=\"center center\"\n      [ngClass]=\"{'active': tab.isActive}\"\n      (click)=\"selectTab(tab.id)\"\n    >\n      {{tab.label | translate}}\n    </div>\n  </div>\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\">\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\" translate>title</div>\n    </section>\n  </header>\n  <header class=\"widget-sub-header\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n    <section class=\"widget-header-right-section\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-action\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n        <div\n          class=\"widget-header-action\"\n          *ngFor=\"let headerAction of headerActionList\"\n          fxLayoutAlign=\"start center\"\n          fxLayoutGap=\"0.5em\"\n          (click)=\"headerAction.action($event)\"\n        >\n          <i class=\"material-icons\">{{headerAction.icon}}</i>\n          <span translate>{{headerAction.name}}</span>\n        </div>\n      </div>\n    </section>\n  </header>\n  <main class=\"widget-content\">\n    <section class=\"table-section\">\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th *ngFor=\"let th of thList\" (click)=\"changeSort($event, th)\" [ngClass]=\"th.order\">\n              <div class=\"th-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <span class=\"th-label\">{{th.label}}</span>\n                <i class=\"th-sort material-icons\">arrow_upward</i>\n              </div>\n            </th>\n            <th *ngIf=\"hasCellAction\" [ngStyle]=\"{'width': actionSize}\"></th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tr of trList\">\n            <td\n              *ngFor=\"let td of tr.tdList\"\n              [ngStyle]=\"td.style\"\n              [innerHTML]=\"td.value\"\n              (click)=\"td.action && td.action($event)\"\n            ></td>\n            <td *ngIf=\"hasCellAction\" class=\"action\">\n              <div class=\"cell-action-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <i\n                  *ngFor=\"let cellAction of cellActionList\"\n                  class=\"material-icons cell-action\"\n                  (click)=\"cellAction.action($event, tr.index)\"\n                >\n                  {{cellAction.icon}}\n                </i>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </section>\n  </main>\n  <footer class=\"widget-footer\" fxLayoutAlign=\"end center\">\n    <section class=\"page-section\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.5em\">\n      <div class=\"material-icons page-button first-button\" (click)=\"getFirstPage()\">first_page</div>\n      <div class=\"material-icons page-button prev-button\" (click)=\"getPrevPage()\">keyboard_arrow_left</div>\n      <div\n        class=\"page-button page-number-button\"\n        [class.big]=\"page.isBig\"\n        [class.active]=\"page.isActive\"\n        *ngFor=\"let page of pageList\"\n        (click)=\"changePage($event, page)\"\n      >\n        {{page.number}}\n      </div>\n      <div class=\"material-icons page-button next-button\" (click)=\"getNextPage()\">keyboard_arrow_right</div>\n      <div class=\"material-icons page-button last-button\" (click)=\"getLastPage()\">last_page</div>\n    </section>\n  </footer>\n</div>\n",
        "templateCss": "@import 'https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0';\n\n#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n  white-space: nowrap;\n}\n\n.widget-tab {\n  width: 100%;\n  height: 5em;\n  min-height: 30px;\n  background-color: var(--tb-service-background-2);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.tab {\n  min-width: 8em;\n  height: 100%;\n  font-size: 1.4em;\n  font-weight: 500;\n  border-right: 1px solid var(--tb-service-border-1);\n  color: var(--tb-service-font-4);\n  cursor: pointer;\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.tab.active {\n  background-color: var(--tb-service-background-0);\n  color: var(--tb-service-font-5);\n  border-top: 0.2em solid var(--tb-service-accent);\n  border-bottom: 1px solid var(--tb-service-background-0);\n  box-sizing: content-box !important;\n}\n.tab:not(.active):hover {\n  color: var(--tb-service-font-4);\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n\n/*\n  Widget Sub Header Area\n*/\nheader.widget-sub-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n\n.widget-sub-header .widget-header-right-section .widget-header-action {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0.6em 1.2em;\n  cursor: pointer;\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-sub-header .widget-header-right-section .widget-header-action i {\n  font-size: 1.4em;\n  font-weight: bold;\n  color: var(--tb-service-accent);\n}\n.widget-sub-header .widget-header-right-section .widget-header-action span {\n  font-size: 1.4em;\n  color: var(--tb-service-font-5);\n  white-space: nowrap;\n}\n.widget-sub-header .widget-header-right-section .widget-header-action:hover {\n  border-color: var(--tb-service-accent-hover);\n}\n.widget-sub-header .widget-header-right-section .widget-header-action:active {\n  border-color: var(--tb-service-accent-pressed);\n}\n\n/*\n  Widget Content Area\n*/\nmain.widget-content {\n  width: 100%;\n}\n\n/* table-section */\n.table-section {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n.table-section::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n.table-section::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n.table-section::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n.table-section .table {\n  min-width: 100%;\n  border-spacing: 0px;\n  box-sizing: border-box;\n  table-layout: fixed;\n  border-collapse: collapse;\n  white-space: nowrap;\n}\n.table-section thead tr {\n  background-color: var(--tb-service-background-1);\n  border-top: 1px solid var(--tb-service-border-1);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.table-section th {\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  padding: 1.68em;\n  text-align: left;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 1em;\n  line-height: 1;\n}\n.table-section th .th-label {\n  font-size: 1.2em;\n  margin-right: 0.5em;\n}\n.table-section th .th-sort {\n  font-size: 1.4em;\n  opacity: 0;\n  vertical-align: top;\n  transition-property: transform, opacity;\n  transition-duration: var(--tb-config-color-duration);\n  color: var(--tb-service-accent);\n}\n.table-section th:not(.DESC):not(.ASC):hover .th-sort {\n  opacity: 0.4;\n}\n.table-section th.ASC .th-sort {\n  opacity: 1;\n  transform: rotate(0deg);\n}\n.table-section th.DESC .th-sort {\n  opacity: 1;\n  transform: rotate(180deg);\n}\n.table-section tbody tr {\n  border-bottom: 1px solid var(--tb-service-border-1);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section tbody tr:nth-child(odd) {\n  background-color: var(--tb-service-background-0);\n}\n.table-section tbody tr:nth-child(even) {\n  background-color: var(--tb-service-background-1);\n}\n.table-section td {\n  line-height: 1;\n}\n.table-section td:not(.action) {\n  color: var(--tb-service-font-4);\n  padding: 1.2em;\n  font-size: 1.4em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  user-select: text;\n}\n.table-section tbody tr:hover {\n  background-color: var(--tb-service-background-2);\n}\n.table-section td.action {\n  font-size: 1em;\n  padding: 0em 1.68em;\n  text-overflow: initial;\n}\n.table-section .cell-action {\n  font-size: 2em;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section .cell-action:hover {\n  color: var(--tb-service-font-5);\n}\n.table-section .cell-action.active {\n  color: var(--tb-service-accent);\n}\n.table-section .activate-switch {\n  position: relative;\n  width: 3.6em;\n  height: 1.6em;\n  border-radius: 0.8em;\n  background-color: var(--tb-service-font-3);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n  margin: auto;\n  cursor: pointer;\n}\n.table-section .activate-switch.active {\n  background-color: var(--tb-service-accent);\n}\n.table-section .activate-switch .ball {\n  position: absolute;\n  top: 50%;\n  left: 0.8em;\n  transform: translate(-50%, -50%);\n  width: 1.2em;\n  height: 1.2em;\n  border-radius: 0.6em;\n  background-color: var(--tb-service-background-0);\n  transition-property: left;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section .activate-switch.active .ball {\n  left: calc(100% - 0.8em);\n}\n\n/*\n  Widget Footer Area\n*/\nfooter.widget-footer {\n  width: 100%;\n  padding: var(--tb-config-padding);\n}\n\n/* page-section */\n.page-section .page-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 2em;\n  min-width: 20px;\n  height: 2em;\n  min-height: 20px;\n  font-size: 1.2em;\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  cursor: pointer;\n  color: var(--tb-service-font-4);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.page-section .first-button,\n.page-section .last-button,\n.page-section .prev-button,\n.page-section .next-button {\n  font-size: 1.6em;\n  width: 1.5em;\n  height: 1.5em;\n}\n.page-section .page-button:not(.active):hover {\n  border: 1px solid var(--tb-service-accent-hover);\n}\n.page-section .page-button:not(.active):active {\n  border: 1px solid var(--tb-service-accent-pressed);\n}\n.page-section .page-button.big-page {\n  width: 3.5em;\n  min-width: 35px;\n}\n.page-section .page-number-button.active {\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-accent);\n}\n",
        "controllerScript": "const ENTITY_TYPE = ['TENANT', 'CUSTOMER_L1', 'CUSTOMER_L2'];\nconst STANDARD_WINDOW_SIZE = 1920 / 100;\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  makeTab();\n  getDashboardParameter();\n  makeHead();\n  self.onResize();\n\n  if (!custom.isSample) {\n    custom.mainData = await loadAttributes();\n  } else {\n    custom.mainData = [];\n  }\n\n  initPage();\n  makeBody();\n  self.onResize();\n  sortData();\n  insertData();\n\n  if (!custom.isSample) {\n    // 현재 사용자의 Root 엔터티로부터 관계 트리 형성\n    custom.relations[custom.rootEntity.id.id] = {\n      id: custom.rootEntity.id,\n      name: custom.rootEntity.name,\n      parent: '',\n      child: [],\n    };\n    $scope.ownerLevel = await getCurrentLevel();\n    getCustomer([custom.relations[custom.rootEntity.id.id]]);\n  }\n  self.ctx.detectChanges();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.onDataUpdated = function () {};\n\nself.actionSources = function () {\n  return {\n    widgetHeaderButton: {\n      name: 'Custom Header Button',\n      multiple: true,\n    },\n    actionCellButton: {\n      name: 'widget-action.action-cell-button',\n      multiple: true,\n    },\n  };\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  custom.now = moment().valueOf();\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n  custom.$widgetContent = $('.widget-content', $container);\n\n  custom.yStr = t('thingplus.time-format.y-str');\n  $scope.tabList = [];\n  $scope.thList = [];\n  $scope.trList = [];\n  $scope.pageList = [];\n  $scope.ownerLevel = 2;\n  $scope.cellActionList = self.ctx.actionsApi.getActionDescriptors('actionCellButton').map(x => {\n    return { name: x.name, icon: x.icon, action: (e, i) => handleCellAction(x, i) };\n  });\n  $scope.hasCellAction = $scope.cellActionList.length > 0;\n  $scope.actionSize = `${$scope.cellActionList.length * 2 + 3.36 + ($scope.cellActionList.length - 1) * 0.5}em`;\n  $scope.headerActionList = self.ctx.actionsApi.getActionDescriptors('widgetHeaderButton').map(x => {\n    return { name: x.name, icon: x.icon, action: e => handleHeaderAction(x) };\n  });\n\n  // Define Normal Variables\n  custom.relations = {};\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.rootEntity = custom.ownerDatasource.entity;\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.hiddenDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.ownerDatasource.entityAliasId);\n  custom.mainDatasources = self.ctx.datasources.filter(x => x.entityAliasId !== custom.ownerDatasource.entityAliasId);\n  custom.originDataKeys = self.ctx.defaultSubscription.configuredDatasources[1].dataKeys;\n  custom.t = t;\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  custom.widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (custom.widgetFontSize < 6.25) {\n    custom.widgetFontSize = 6.25;\n  }\n  custom.selectedIndex = 0;\n  custom.currentPage = 1;\n  custom.countPerPage = 10;\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(t(self.ctx.widget.config.title));\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope } = self.ctx;\n  $scope.selectTab = function (e) {\n    let state = e || 'default';\n    let param = custom.dashboardParams || {};\n    self.ctx.stateController.updateState(state, param, null);\n  };\n  $scope.getPrevPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage--;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getNextPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage++;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getFirstPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage = 1;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getLastPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage = custom.totalPage;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.changePage = function (e, page) {\n    if (!page.isActive) {\n      custom.currentPage = page.number;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.changeSort = function (e, th) {\n    if (th.isAction) return;\n    if (th.index == custom.selectedIndex) {\n      if (th.order != 'DESC') {\n        $scope.thList[th.index].order = 'DESC';\n      } else {\n        $scope.thList[th.index].order = 'ASC';\n      }\n    } else {\n      $scope.thList.forEach(x => (x.order = ''));\n      custom.selectedIndex = th.index;\n      $scope.thList[th.index].order = 'DESC';\n    }\n    initPage();\n    makeBody();\n    sortData();\n    insertData();\n  };\n}\n\n// 대시보드 상태 탭 생성\nfunction makeTab() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return;\n  $scope.tabList = [];\n  for (let i in self.ctx.stateController.statesValue) {\n    $scope.tabList.push({\n      label: 'thingplus.menu.' + i,\n      id: i,\n      isActive: i == self.ctx.stateController.stateValue,\n    });\n  }\n}\n\nfunction getDashboardParameter() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return {};\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n  if (custom.dashboardParams) {\n    if (custom.dashboardParams.customerL1) {\n      $scope.selectedCustomerL1 = custom.dashboardParams.customerL1.entityId.id;\n    }\n    self.ctx.detectChanges();\n  }\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n    if (self.ctx.width < 600) {\n      originWidth = 600;\n    }\n  }\n\n  custom.widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (custom.widgetFontSize < 6.25) {\n    custom.widgetFontSize = 6.25;\n  }\n  custom.$widget.css('font-size', `${custom.widgetFontSize}px`);\n\n  // Header Height를 제외한 영역을 Main의 Height로 설정\n  let headerHeight = custom.$widgetHeader.outerHeight(true);\n  custom.$widgetContent.css('height', `calc(100% - ${headerHeight}px)`);\n\n  self.ctx.detectChanges();\n}\n\n// 헤더 부분 생성\nfunction makeHead() {\n  let { custom, $scope } = self.ctx;\n  $scope.thList = [];\n  for (let i in custom.originDataKeys) {\n    $scope.thList.push({\n      index: i,\n      key: custom.originDataKeys[i].name,\n      label: t(custom.originDataKeys[i].label),\n      order: custom.selectedIndex == i ? 'DESC' : '',\n    });\n  }\n}\n\nfunction loadAttributes() {\n  let { custom, $scope } = self.ctx;\n  return new Promise(resolve => {\n    let entityId = custom.ownerDatasource.entity.id;\n    self.ctx.attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE', ['plannedHoliday']).subscribe(datas => {\n      let result = [];\n      if (datas && datas[0]) {\n        result = datas[0].value;\n      }\n      resolve(result);\n    });\n  });\n}\n\nasync function getCurrentLevel() {\n  let { custom } = self.ctx;\n  if (custom.rootEntity.id.entityType == 'TENANT') {\n    return 0;\n  } else {\n    let result = await self.ctx.attributeService\n      .getEntityAttributes(custom.rootEntity.id, 'SERVER_SCOPE', ['customerType'])\n      .toPromise();\n    if (result && result[0]) {\n      if (result[0].value == ENTITY_TYPE[1]) {\n        return 1;\n      } else {\n        return 2;\n      }\n    }\n  }\n}\n\nfunction getCustomer(entities) {\n  let { custom } = self.ctx;\n  let promises = [];\n  if (entities.length > 0) {\n    for (let i = 0; i < entities.length; i++) {\n      promises.push(self.ctx.entityRelationService.findInfoByFrom(entities[i].id));\n    }\n    self.ctx.rxjs.forkJoin(promises).subscribe(childs => {\n      let newChild = [];\n      for (let j = 0; j < childs.length; j++) {\n        for (let k = 0; k < childs[j].length; k++) {\n          custom.relations[childs[j][k].to.id] = {\n            id: childs[j][k].to,\n            name: childs[j][k].toName,\n            parent: entities[j],\n            child: [],\n            type: 'CUSTOMER',\n          };\n          custom.relations[entities[j].id.id].child.push(custom.relations[childs[j][k].to.id]);\n          if (childs[j][k].to.entityType === 'USER') {\n            custom.relations[childs[j][k].to.id].type = 'USER';\n          }\n          if (childs[j][k].to.entityType === 'DEVICE') {\n            custom.relations[childs[j][k].to.id].type = 'DEVICE';\n          }\n          if (childs[j][k].to.entityType === 'ASSET') {\n            custom.relations[childs[j][k].to.id].type = 'ASSET';\n          }\n          if (childs[j][k].to.entityType === 'CUSTOMER') {\n            newChild.push(custom.relations[childs[j][k].to.id]);\n          }\n        }\n      }\n      getCustomer(newChild);\n    });\n  } else {\n    distributeLevel();\n  }\n}\n\n// hierarchy 레벨에 따라 배열에 따로 저장\nfunction distributeLevel() {\n  let { custom, $scope } = self.ctx;\n  let depth = $scope.ownerLevel;\n  let root = custom.relations[custom.rootEntity.id.id];\n  root.type = ENTITY_TYPE[depth];\n  for (let i in root.child) {\n    if (root.child[i].type == 'CUSTOMER') {\n      root.child[i].type = ENTITY_TYPE[depth + 1];\n    }\n    for (let j in root.child[i].child) {\n      if (root.child[i].child[j].type == 'CUSTOMER') {\n        root.child[i].child[j].type = ENTITY_TYPE[depth + 2];\n      }\n    }\n  }\n  custom.customerL1List = [];\n  custom.customerL2List = [];\n  custom.deviceList = [];\n\n  for (let i in custom.relations) {\n    if (custom.relations[i].type == ENTITY_TYPE[1]) {\n      custom.customerL1List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[2]) {\n      custom.customerL2List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == 'DEVICE') {\n      custom.deviceList.push(custom.relations[i]);\n    }\n  }\n\n  self.ctx.detectChanges();\n}\n\n// 페이지에 맞는 데이터 출력 및 페이지 표시\nfunction initPage() {\n  let { custom, $scope } = self.ctx;\n  custom.totalPage = Math.ceil(custom.mainData.length / custom.countPerPage);\n  // 현재 페이지 기준 왼쪽이 5개 오른쪽이 4개가 되도록\n  custom.startPage = custom.currentPage - 5;\n  // 6번까지는 왼쪽이 5개 이하이므로 시작을 1로 고정\n  if (custom.currentPage <= 6) {\n    custom.startPage = 1;\n  }\n  // 마지막에서 5칸 아래페이지 부터는 오른쪽이 4개 이하이므로 시작을 마지막에서 9을 뺀것으로 고정\n  if (custom.totalPage >= 10 && custom.currentPage > custom.totalPage - 5) {\n    custom.startPage = custom.totalPage - 9;\n  }\n  custom.endPage = custom.startPage + 9;\n  // 끝 페이지가 총 페이지보다 크면 총페이지를 끝 페이지로\n  if (custom.endPage > custom.totalPage) {\n    custom.endPage = custom.totalPage;\n  }\n\n  // 페이지 리스트 구성\n  $scope.pageList = [];\n  for (let i = custom.startPage; i <= custom.endPage; i++) {\n    $scope.pageList.push({\n      number: i,\n      isBig: i > 99,\n      isActive: custom.currentPage == i,\n    });\n  }\n\n  custom.startIndex = (custom.currentPage - 1) * custom.countPerPage;\n  custom.endIndex = custom.currentPage * custom.countPerPage - 1;\n  // 끝 페이지가 데이터 소스의 길이보다 많으면 데이터 소스의 길이로 변경\n  if (custom.endIndex > custom.mainData.length - 1) {\n    custom.endIndex = custom.mainData.length - 1;\n  }\n  custom.targetDatasources = custom.mainData.slice(custom.startIndex, custom.endIndex + 1);\n}\n\n// 테이블 바디 생성\nfunction makeBody() {\n  let { custom, $scope } = self.ctx;\n  $scope.trList = [];\n  // 현재 페이지의 데이터 수 만큼 행 출력\n  for (let i = custom.startIndex; i <= custom.endIndex; i++) {\n    let tdList = [];\n    for (let j in custom.originDataKeys) {\n      tdList.push({ index: j, name: custom.originDataKeys[j].name, style: '', value: '' });\n    }\n    $scope.trList.push({\n      index: i,\n      tdList: tdList,\n    });\n  }\n}\n\n// 데이터 재 정렬\nfunction sortData() {\n  let { custom, $scope } = self.ctx;\n  // subscribe하는 데이터 키의 레이블 중 정렬기준으로 선택된 레이블의 인덱스 추출\n  // 정렬에 사용할 객체를 깊은 복사\n  let selectedKey = $scope.thList[custom.selectedIndex].key;\n  let selectedOrder = $scope.thList[custom.selectedIndex].order;\n  if (selectedOrder == 'ASC') {\n    custom.mainData.sort((a, b) => {\n      if (a[selectedKey] > b[selectedKey]) return 1;\n      if (a[selectedKey] < b[selectedKey]) return -1;\n      return 0;\n    });\n  } else {\n    custom.mainData.sort((a, b) => {\n      if (a[selectedKey] > b[selectedKey]) return -1;\n      if (a[selectedKey] < b[selectedKey]) return 1;\n      return 0;\n    });\n  }\n}\n\n// 데이터 삽입\nfunction insertData() {\n  let { custom, $scope } = self.ctx;\n  for (let i = custom.startIndex; i <= custom.endIndex; i++) {\n    for (let j in custom.originDataKeys) {\n      let key = custom.originDataKeys[j].name;\n      let data = custom.mainData[i][key];\n      // Apply cell style function\n      if (custom.originDataKeys[j].settings.useCellStyleFunction) {\n        try {\n          let styleFunction = new Function('value', 'row', 'ctx', custom.originDataKeys[j].settings.cellStyleFunction);\n          let style = styleFunction(data, custom.mainData[i], self.ctx);\n          $scope.trList[i - custom.startIndex].tdList[j].style = style;\n        } catch (err) {\n          console.error(err);\n        }\n      }\n      // Apply cell action function\n      if (custom.originDataKeys[j].settings.useCellActionFunction) {\n        try {\n          let actionFunction = new Function(\n            'value',\n            'tr',\n            'td',\n            'row',\n            'ctx',\n            custom.originDataKeys[j].settings.cellActionFunction\n          );\n          $scope.trList[i - custom.startIndex].tdList[j].action = function (e) {\n            actionFunction(\n              data,\n              $scope.trList[i - custom.startIndex],\n              $scope.trList[i - custom.startIndex].tdList[j],\n              custom.mainData[i],\n              self.ctx\n            );\n          };\n        } catch (err) {\n          console.error(err);\n        }\n      }\n      // Apply cell content function\n      if (custom.originDataKeys[j].settings.useCellContentFunction) {\n        try {\n          let contentFunction = new Function(\n            'value',\n            'row',\n            'ctx',\n            custom.originDataKeys[j].settings.cellContentFunction\n          );\n          data = contentFunction(data, custom.mainData[i], self.ctx);\n        } catch (err) {\n          console.error(err);\n        }\n      }\n\n      $scope.trList[i - custom.startIndex].tdList[j].value = data;\n    }\n  }\n}\n\nfunction handleCellAction(descriptor, index) {\n  let { custom, $scope } = self.ctx;\n  let realIndex = $scope.trList[index - custom.startIndex].index;\n  self.ctx.actionsApi.handleWidgetAction(\n    {},\n    descriptor,\n    custom.mainData[realIndex].id,\n    '',\n    custom.mainData[realIndex],\n    ''\n  );\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n\nfunction handleHeaderAction(descriptor) {\n  let { custom } = self.ctx;\n  self.ctx.actionsApi.handleWidgetAction(\n    {},\n    descriptor,\n    custom.ownerDatasource.entity.id,\n    custom.ownerDatasource.entityName,\n    {},\n    custom.ownerDatasource.entityLabel\n  );\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"title\": \"DataKeySettings\",\n    \"properties\": {\n      \"hidden\": {\n        \"title\": \"Hide from table\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"useCellStyleFunction\": {\n        \"title\": \"Use cell style function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellStyleFunction\": {\n        \"title\": \"Cell style function: f(value, row, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      },\n      \"useCellContentFunction\": {\n        \"title\": \"Use cell content function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellContentFunction\": {\n        \"title\": \"Cell content function: f(value, row, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      },\n      \"useCellActionFunction\": {\n        \"title\": \"Use cell action function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellActionFunction\": {\n        \"title\": \"Cell action function: f(value, tr, td, row, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      }\n    },\n    \"required\": []\n  },\n  \"form\": [\n    \"hidden\",\n    \"useCellStyleFunction\",\n    {\n      \"key\": \"cellStyleFunction\",\n      \"type\": \"javascript\"\n    },\n    \"useCellContentFunction\",\n    {\n      \"key\": \"cellContentFunction\",\n      \"type\": \"javascript\"\n    },\n    \"useCellActionFunction\",\n    {\n      \"key\": \"cellActionFunction\",\n      \"type\": \"javascript\"\n    }\n  ]\n}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.352180701332524,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"Maintain Holiday\",\"showTitleIcon\":false,\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false,\"titleTooltip\":\"\",\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"1.6em\",\"font-weight\":600,\"letter-spacing\":\"-0.05em\",\"color\":\"var(--tb-service-font-5)\"}}"
      }
    },
    {
      "alias": "maintain_alarm",
      "name": "Maintain System Alarm",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <div class=\"widget-tab\" fxLayoutAlign=\"start center\" *ngIf=\"tabList && tabList.length > 1\">\n    <div\n      class=\"tab\"\n      *ngFor=\"let tab of tabList\"\n      fxLayoutAlign=\"center center\"\n      [ngClass]=\"{'active': tab.isActive}\"\n      (click)=\"selectTab(tab.id)\"\n    >\n      {{tab.label | translate}}\n    </div>\n  </div>\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\">\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\" translate>title</div>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <div\n        class=\"entity-controller\"\n        *ngIf=\"ownerLevel == 0 && filterLevel <= 1\"\n        fxLayoutAlign=\"end center\"\n        fxLayoutGap=\"1em\"\n      >\n        <span class=\"normal-label\" translate> thingplus.selector.workspace-selection </span>\n        <mat-select class=\"entity-selector\" (ngModelChange)=\"setCustomerL1($event)\" [ngModel]=\"selectedCustomerL1\">\n          <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n            {{customerL1.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select\n          class=\"entity-selector\"\n          *ngIf=\"filterLevel == 0\"\n          (ngModelChange)=\"setCustomerL2($event)\"\n          [ngModel]=\"selectedCustomerL2\"\n        >\n          <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n            {{customerL2.name}}\n          </mat-option>\n        </mat-select>\n      </div>\n      <div class=\"widget-action\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n        <div\n          class=\"widget-header-action\"\n          *ngFor=\"let headerAction of headerActionList\"\n          fxLayoutAlign=\"start center\"\n          fxLayoutGap=\"0.5em\"\n          (click)=\"headerAction.action($event)\"\n        >\n          <span translate>{{headerAction.name}}</span>\n          <i class=\"material-icons\">{{headerAction.icon}}</i>\n        </div>\n      </div>\n    </section>\n  </header>\n  <main class=\"widget-content\">\n    <section class=\"table-section\">\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th\n              *ngFor=\"let th of mainThList\"\n              (click)=\"changeSort($event, th)\"\n              [attr.rowspan]=\"th.rowspan\"\n              [attr.colspan]=\"th.colspan\"\n              #tooltip=\"matTooltip\"\n              [matTooltip]=\"th.help\"\n              matTooltipClass=\"tp-service-tooltip\"\n              [ngClass]=\"{'DESC': th.order == 'DESC','ASC': th.order == 'ASC','main': !th.index}\"\n            >\n              <div class=\"th-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <span class=\"th-label\">{{th.label}}</span>\n                <i class=\"th-help material-icons\" *ngIf=\"th.help\">help</i>\n                <i class=\"th-sort material-icons\">arrow_upward</i>\n              </div>\n            </th>\n            <th *ngIf=\"hasCellAction\" rowspan=\"2\" [ngStyle]=\"{'width': actionSize}\"></th>\n          </tr>\n          <tr>\n            <th class=\"sub\" *ngFor=\"let th of subThList\" (click)=\"changeSort($event, th)\" [ngClass]=\"th.order\">\n              <div class=\"th-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <span class=\"th-label\">{{th.label}}</span>\n                <i class=\"th-sort material-icons\">arrow_upward</i>\n              </div>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tr of trList\">\n            <td\n              *ngFor=\"let td of tr.tdList\"\n              [ngStyle]=\"td.style\"\n              [innerHTML]=\"td.value\"\n              (click)=\"td.action && td.action($event)\"\n            ></td>\n            <td *ngIf=\"hasCellAction\" class=\"action\">\n              <div class=\"cell-action-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <i\n                  *ngFor=\"let cellAction of cellActionList\"\n                  class=\"material-icons cell-action\"\n                  (click)=\"cellAction.action($event, tr.index)\"\n                >\n                  {{cellAction.icon}}\n                </i>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </section>\n  </main>\n  <footer class=\"widget-footer\" fxLayoutAlign=\"end center\">\n    <section class=\"page-section\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.5em\">\n      <div class=\"material-icons page-button first-button\" (click)=\"getFirstPage()\">first_page</div>\n      <div class=\"material-icons page-button prev-button\" (click)=\"getPrevPage()\">keyboard_arrow_left</div>\n      <div\n        class=\"page-button page-number-button\"\n        [class.big]=\"page.isBig\"\n        [class.active]=\"page.isActive\"\n        *ngFor=\"let page of pageList\"\n        (click)=\"changePage($event, page)\"\n      >\n        {{page.number}}\n      </div>\n      <div class=\"material-icons page-button next-button\" (click)=\"getNextPage()\">keyboard_arrow_right</div>\n      <div class=\"material-icons page-button last-button\" (click)=\"getLastPage()\">last_page</div>\n    </section>\n  </footer>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n}\n\n.widget-tab {\n  width: 100%;\n  height: 5em;\n  min-height: 30px;\n  background-color: var(--tb-service-background-2);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.tab {\n  min-width: 8em;\n  height: 100%;\n  font-size: 1.4em;\n  font-weight: 500;\n  border-right: 1px solid var(--tb-service-border-1);\n  color: var(--tb-service-font-3);\n  cursor: pointer;\n}\n.tab.active {\n  background-color: var(--tb-service-background-0);\n  color: var(--tb-service-font-5);\n  border-top: 0.2em solid var(--tb-service-accent);\n  border-bottom: 1px solid var(--tb-service-background-0);\n  box-sizing: content-box !important;\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n}\n\n/* widget-header-right-section */\n.normal-label {\n  font-size: 1.2em;\n  font-weight: 500;\n  line-height: 1.17;\n  letter-spacing: -0.03em;\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n}\n.widget-header-right-section .mat-select {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .mat-select:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .mat-select-trigger {\n  width: 13em;\n  min-width: 130px;\n  padding: calc(9em / 14);\n  font-size: 1.4em;\n  line-height: 1;\n}\n.widget-header-right-section .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n.widget-header-right-section .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n.widget-header-right-section .widget-header-action {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0.6em 1.2em;\n  cursor: pointer;\n  border: 1px solid var(--tb-service-accent);\n  background-color: var(--tb-service-accent);\n  color: var(--tb-service-font-0);\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .widget-header-action span {\n  font-size: 1.4em;\n  font-weight: bold;\n  white-space: nowrap;\n}\n.widget-header-right-section .widget-header-action i {\n  font-size: 1.4em;\n  font-weight: bold;\n}\n.widget-header-right-section .widget-header-action:hover {\n  border-color: var(--tb-service-accent-hover);\n  background-color: var(--tb-service-accent-hover);\n}\n.widget-header-right-section .widget-header-action:active {\n  border-color: var(--tb-service-accent-pressed);\n  background-color: var(--tb-service-accent-pressed);\n}\n\n/*\n  Widget Content Area\n*/\nmain.widget-content {\n  width: 100%;\n}\n\n/* table-section */\n.table-section {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n.table-section::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n.table-section::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n.table-section::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n.table-section .table {\n  min-width: 100%;\n  border-spacing: 0px;\n  box-sizing: border-box;\n  table-layout: fixed;\n  border-collapse: collapse;\n  white-space: nowrap;\n}\n.table-section thead tr {\n  background-color: var(--tb-service-background-1);\n  border-top: 1px solid var(--tb-service-border-1);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.table-section th {\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  padding: 1.68em;\n  text-align: left;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 1em;\n  line-height: 1;\n  border: 1px solid var(--tb-service-border-1);\n}\n.table-section th:first-child {\n  border-left: none;\n}\n.table-section th:last-child {\n  border-right: none;\n}\n.table-section th.main .th-box {\n  justify-content: center !important;\n}\n.table-section th.sub {\n  background-color: var(--tb-service-background-3);\n  padding: 1em;\n}\n.table-section th .th-label {\n  font-size: 1.2em;\n  margin-right: 0.5em;\n}\n.table-section th.main .th-label {\n  margin-right: 0em;\n}\n.table-section th .th-help {\n  font-size: 1.4em;\n  color: var(--tb-service-font-3);\n}\n.table-section th .th-sort {\n  font-size: 1.4em;\n  opacity: 0;\n  vertical-align: top;\n  transition-property: transform, opacity;\n  transition-duration: var(--tb-config-color-duration);\n  color: var(--tb-service-accent);\n}\n.table-section th:not(.DESC):not(.ASC):hover .th-sort {\n  opacity: 0.4;\n}\n.table-section th.ASC .th-sort {\n  opacity: 1;\n  transform: rotate(0deg);\n}\n.table-section th.DESC .th-sort {\n  opacity: 1;\n  transform: rotate(180deg);\n}\n.table-section th.main .th-sort {\n  display: none;\n}\n.table-section tbody tr {\n  border-bottom: 1px solid var(--tb-service-border-1);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section tbody tr:nth-child(odd) {\n  background-color: var(--tb-service-background-0);\n}\n.table-section tbody tr:nth-child(even) {\n  background-color: var(--tb-service-background-1);\n}\n.table-section td {\n  line-height: 1;\n  border: 1px solid var(--tb-service-border-1);\n}\n.table-section td:first-child {\n  border-left: none;\n}\n.table-section td:last-child {\n  border-right: none;\n}\n.table-section td:not(.action) {\n  color: var(--tb-service-font-4);\n  padding: 1.2em;\n  font-size: 1.4em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  user-select: text;\n}\n.table-section tbody tr:hover {\n  background-color: var(--tb-service-background-2);\n}\n.table-section td.action {\n  font-size: 1em;\n  padding: 0em 1.68em;\n  text-overflow: initial;\n}\n.table-section .cell-action {\n  font-size: 2em;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section .cell-action:hover {\n  color: var(--tb-service-font-5);\n}\n.table-section .cell-action.active {\n  color: var(--tb-service-accent);\n}\n.table-section .activate-switch {\n  position: relative;\n  width: 3.6em;\n  height: 1.6em;\n  border-radius: 0.8em;\n  background-color: var(--tb-service-font-3);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n  margin: auto;\n  cursor: pointer;\n}\n.table-section .activate-switch.active {\n  background-color: var(--tb-service-accent);\n}\n.table-section .activate-switch .ball {\n  position: absolute;\n  top: 50%;\n  left: 0.8em;\n  transform: translate(-50%, -50%);\n  width: 1.2em;\n  height: 1.2em;\n  border-radius: 0.6em;\n  background-color: var(--tb-service-background-0);\n  transition-property: left;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section .activate-switch.active .ball {\n  left: calc(100% - 0.8em);\n}\n\n/*\n  Widget Footer Area\n*/\nfooter.widget-footer {\n  width: 100%;\n  padding: var(--tb-config-padding);\n}\n\n/* page-section */\n.page-section .page-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 2em;\n  min-width: 20px;\n  height: 2em;\n  min-height: 20px;\n  font-size: 1.2em;\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  cursor: pointer;\n  color: var(--tb-service-font-4);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.page-section .first-button,\n.page-section .last-button,\n.page-section .prev-button,\n.page-section .next-button {\n  font-size: 1.6em;\n  width: 1.5em;\n  height: 1.5em;\n}\n.page-section .page-button:not(.active):hover {\n  border: 1px solid var(--tb-service-accent-hover);\n}\n.page-section .page-button:not(.active):active {\n  border: 1px solid var(--tb-service-accent-pressed);\n}\n.page-section .page-button.big-page {\n  width: 3.5em;\n  min-width: 35px;\n}\n.page-section .page-number-button.active {\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-accent);\n}\n",
        "controllerScript": "const ENTITY_TYPE = ['TENANT', 'CUSTOMER_L1', 'CUSTOMER_L2'];\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  makeTab();\n  makeHead();\n  initPage();\n  makeBody();\n  self.onResize();\n\n  // Action 파트에서 사용하기 위한 설정\n  if (!custom.isSample) {\n    // 현재 사용자의 Root 엔터티로부터 관계 트리 형성\n    custom.relations[custom.rootEntity.id.id] = {\n      id: custom.rootEntity.id,\n      name: custom.rootEntity.name,\n      parent: '',\n      child: [],\n    };\n    $scope.ownerLevel = await getCurrentLevel();\n    await getCustomer([custom.relations[custom.rootEntity.id.id]]);\n  }\n  custom.isInitialized = true;\n  self.onDataUpdated();\n  self.onResize();\n};\n\nself.onDataUpdated = function () {\n  let { custom } = self.ctx;\n  if (custom.isInitialized && custom.originDataKeys.length > 0) {\n    custom.mainData = preprocessData();\n    sortData();\n    insertData();\n  }\n  self.ctx.detectChanges();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.actionSources = function () {\n  return {\n    widgetHeaderButton: {\n      name: 'Custom Header Button',\n      multiple: true,\n    },\n    actionCellButton: {\n      name: 'widget-action.action-cell-button',\n      multiple: true,\n    },\n    customAction: {\n      name: 'Custom Action',\n      multiple: true,\n    },\n  };\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n  custom.$widgetAction = $('.widget-action', $container);\n  custom.$widgetContent = $('.widget-content', $container);\n  custom.$table = $('.table', $container);\n  custom.$theadTr = $('.table thead tr', $container);\n  custom.$tbody = $('.table tbody', $container);\n  custom.$widgetFooter = $('.widget-footer', $container);\n\n  // Define Scope Variables\n  $scope.tabList = [];\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n  $scope.selectedCustomerL1 = '';\n  $scope.selectedCustomerL2 = '';\n  $scope.ownerLevel = 2;\n  $scope.filterLevel = self.ctx.settings.widget.filterLevel;\n  $scope.thList = [];\n  $scope.mainThList = [];\n  $scope.subThList = [];\n  $scope.trList = [];\n  $scope.pageList = [];\n  custom.relations = [];\n  $scope.headerActionList = self.ctx.actionsApi.getActionDescriptors('widgetHeaderButton').map(x => {\n    return { name: x.name, icon: x.icon, action: e => handleHeaderAction(x) };\n  });\n  $scope.cellActionList = self.ctx.actionsApi.getActionDescriptors('actionCellButton').map(x => {\n    return { name: x.name, icon: x.icon, action: (e, i) => handleCellAction(x, i) };\n  });\n  $scope.hasCellAction = $scope.cellActionList.length > 0;\n  $scope.actionSize = `${$scope.cellActionList.length * 2 + 3.36 + ($scope.cellActionList.length - 1) * 0.5}em`;\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.mainDatasource = self.ctx.defaultSubscription.configuredDatasources[1];\n  custom.rootEntity = custom.ownerDatasource.entity;\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.hiddenDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.ownerDatasource.entityAliasId);\n  custom.mainDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.mainDatasource.entityAliasId);\n  custom.originDataKeys = self.ctx.defaultSubscription.configuredDatasources[1].dataKeys.filter(\n    x => x.settings.hidden !== true\n  );\n  custom.targetDatasources = [];\n  custom.isInitialized = false;\n  custom.selectedIndex = 0;\n  custom.currentPage = 1;\n  custom.countPerPage = 10;\n  custom.t = t;\n  custom.toTime = toTime;\n  custom.addZero = addZero;\n  custom.headerConfig = {\n    main: self.ctx.settings.widget.mainHeader.split(','),\n    sub: self.ctx.settings.widget.subHeader.split(','),\n  };\n}\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(self.ctx.widget.config.title);\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope } = self.ctx;\n  $scope.selectTab = function (e) {\n    let state = e || 'default';\n    let param = custom.dashboardParams || {};\n    self.ctx.stateController.updateState(state, param, null);\n  };\n  $scope.setCustomerL1 = function (e) {\n    $scope.selectedCustomerL1 = e;\n    $scope.selectedCustomerL2 = '';\n    changeCustomerL2List();\n    filterDatasources();\n  };\n  $scope.setCustomerL2 = function (e) {\n    $scope.selectedCustomerL2 = e;\n    filterDatasources();\n  };\n  $scope.getPrevPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage--;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getNextPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage++;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getFirstPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage = 1;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getLastPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage = custom.totalPage;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.changePage = function (e, page) {\n    if (!page.isActive) {\n      custom.currentPage = page.number;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.changeSort = function (e, th) {\n    if (!th.index) return;\n    if (th.isAction) return;\n    if (th.index == custom.selectedIndex) {\n      if (th.order != 'ASC') {\n        $scope.thList[th.index].order = 'ASC';\n      } else {\n        $scope.thList[th.index].order = 'DESC';\n      }\n    } else {\n      $scope.thList.forEach(x => (x.order = ''));\n      custom.selectedIndex = th.index;\n      $scope.thList[th.index].order = 'ASC';\n    }\n    initPage();\n    makeBody();\n    sortData();\n    insertData();\n  };\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  let widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (widgetFontSize < 6.25) {\n    widgetFontSize = 6.25;\n  }\n  custom.$widget.css('font-size', `${widgetFontSize}px`);\n\n  // Header와 Footer Height를 제외한 영역을 Main의 Height로 설정\n  let headerHeight = custom.$widgetHeader.outerHeight(true);\n  let footerHeight = custom.$widgetFooter.outerHeight(true);\n  custom.$widgetContent.css('height', `calc(100% - ${headerHeight + footerHeight}px)`);\n}\n\nasync function getCurrentLevel() {\n  let { custom } = self.ctx;\n  if (custom.rootEntity.id.entityType == 'TENANT') {\n    return 0;\n  } else {\n    let result = await self.ctx.attributeService\n      .getEntityAttributes(custom.rootEntity.id, 'SERVER_SCOPE', ['customerType'])\n      .toPromise();\n    if (result && result[0]) {\n      if (result[0].value == 'CUSTOMER_L1') {\n        return 1;\n      } else {\n        return 2;\n      }\n    }\n  }\n}\n\nfunction getCustomer(entities) {\n  return new Promise(resolve => {\n    let { custom } = self.ctx;\n    let promises = [];\n    if (entities.length > 0) {\n      for (let i = 0; i < entities.length; i++) {\n        promises.push(self.ctx.entityRelationService.findInfoByFrom(entities[i].id));\n      }\n      self.ctx.rxjs.forkJoin(promises).subscribe(async childs => {\n        let newChild = [];\n        for (let j = 0; j < childs.length; j++) {\n          for (let k = 0; k < childs[j].length; k++) {\n            custom.relations[childs[j][k].to.id] = {\n              id: childs[j][k].to,\n              name: childs[j][k].toName,\n              parent: entities[j],\n              child: [],\n              type: 'CUSTOMER',\n            };\n            custom.relations[entities[j].id.id].child.push(custom.relations[childs[j][k].to.id]);\n            if (childs[j][k].to.entityType === 'USER') {\n              custom.relations[childs[j][k].to.id].type = 'USER';\n            }\n            if (childs[j][k].to.entityType === 'DEVICE') {\n              custom.relations[childs[j][k].to.id].type = 'DEVICE';\n            }\n            if (childs[j][k].to.entityType === 'ASSET') {\n              custom.relations[childs[j][k].to.id].type = 'ASSET';\n            }\n            if (childs[j][k].to.entityType === 'CUSTOMER') {\n              newChild.push(custom.relations[childs[j][k].to.id]);\n            }\n          }\n        }\n        await getCustomer(newChild);\n        resolve();\n      });\n    } else {\n      distributeLevel();\n      resolve();\n    }\n  });\n}\n\n// hierarchy 레벨에 따라 배열에 따로 저장\nfunction distributeLevel() {\n  let { custom, $scope } = self.ctx;\n  let depth = $scope.ownerLevel;\n  let root = custom.relations[custom.rootEntity.id.id];\n  root.type = ENTITY_TYPE[depth];\n  for (let i in root.child) {\n    if (root.child[i].type == 'CUSTOMER') {\n      root.child[i].type = ENTITY_TYPE[depth + 1];\n    }\n    for (let j in root.child[i].child) {\n      if (root.child[i].child[j].type == 'CUSTOMER') {\n        root.child[i].child[j].type = ENTITY_TYPE[depth + 2];\n      }\n    }\n  }\n  custom.customerL1List = [];\n  custom.customerL2List = [];\n  custom.userList = [];\n\n  for (let i in custom.relations) {\n    if (custom.relations[i].type == ENTITY_TYPE[1]) {\n      custom.customerL1List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[2]) {\n      custom.customerL2List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == 'USER') {\n      custom.userList.push(custom.relations[i]);\n    }\n  }\n\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL1List = $scope.customerL1List.concat(\n    custom.customerL1List.map(x => {\n      return { name: x.name, value: x.id.id };\n    })\n  );\n  getUserInfo();\n  changeCustomerL2List();\n  self.ctx.detectChanges();\n}\n\nfunction getUserInfo() {\n  let { custom, $scope } = self.ctx;\n  let observables = [];\n  for (let i in custom.userList) {\n    let userId = custom.userList[i].id.id;\n    observables.push(self.ctx.http.get(`/api/user/${userId}`));\n  }\n\n  self.ctx.rxjs.forkJoin(observables).subscribe(users => {\n    for (let i in users) {\n      custom.relations[users[i].id.id].details = users[i];\n    }\n  });\n}\n\n// Customer L2 리스트 갱신\nfunction changeCustomerL2List() {\n  let { custom, $scope } = self.ctx;\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n\n  if ($scope.selectedCustomerL1 === '') {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n  } else {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL1)\n        .map(x => {\n          return { name: x.name, value: x.id.id };\n        })\n    );\n  }\n}\n\nfunction filterDatasources() {\n  let { custom, $scope } = self.ctx;\n  custom.mainDatasources = self.ctx.datasources.filter(x => x.entityAliasId !== custom.ownerDatasource.entityAliasId);\n  if ($scope.ownerLevel == 0) {\n    // 상위 검사\n    custom.mainDatasources = custom.mainDatasources.filter(\n      x =>\n        $scope.selectedCustomerL1 == '' ||\n        (custom.relations[x.entityId].parent &&\n          (custom.relations[x.entityId].parent.id.id == $scope.selectedCustomerL1 ||\n            (custom.relations[x.entityId].parent.parent &&\n              custom.relations[x.entityId].parent.parent.id.id == $scope.selectedCustomerL1)))\n    );\n  }\n  if ($scope.filterLevel == 0) {\n    // 하위 검사\n    custom.mainDatasources = custom.mainDatasources.filter(\n      x =>\n        $scope.selectedCustomerL2 == '' ||\n        (custom.relations[x.entityId].parent && custom.relations[x.entityId].parent.id.id == $scope.selectedCustomerL2)\n    );\n  }\n\n  initPage();\n  makeBody();\n  custom.mainData = preprocessData();\n  sortData();\n  insertData();\n  self.ctx.detectChanges();\n}\n\n// 대시보드 상태 탭 생성\nfunction makeTab() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return;\n  $scope.tabList = [];\n  for (let i in self.ctx.stateController.statesValue) {\n    $scope.tabList.push({\n      label: 'thingplus.menu.' + i,\n      id: i,\n      isActive: i == self.ctx.stateController.stateValue,\n    });\n  }\n}\n\n// 헤더 부분 생성\nfunction makeHead() {\n  let { custom, $scope, $container } = self.ctx;\n  $scope.thList = [];\n  $scope.mainThList = [];\n  $scope.subThList = [];\n  for (let i in custom.originDataKeys) {\n    let newTh = {\n      index: i,\n      key: custom.originDataKeys[i].name,\n      label: t(custom.originDataKeys[i].label),\n      order: custom.selectedIndex == i ? 'ASC' : '',\n    };\n    if (custom.originDataKeys[i].label == 'thingplus.label.snooze') {\n      newTh.help = t('thingplus.help.help-snooze');\n    }\n    $scope.thList.push(newTh);\n  }\n  for (let i in $scope.thList) {\n    if (custom.headerConfig.main[i] != 1) {\n      if (custom.headerConfig.main[i]) {\n        let target = custom.headerConfig.main[i].split(':');\n        $scope.mainThList.push({\n          label: t(target[1]),\n          order: '',\n          colspan: target[0],\n          rowspan: 1,\n        });\n      }\n    }\n    if (custom.headerConfig.sub[i] == 0) {\n      $scope.thList[i].colspan = 1;\n      $scope.thList[i].rowspan = 2;\n      $scope.mainThList.push($scope.thList[i]);\n    } else {\n      $scope.thList[i].colspan = 1;\n      $scope.thList[i].rowspan = 1;\n      $scope.subThList.push($scope.thList[i]);\n    }\n  }\n}\n\n// 페이지에 맞는 데이터 출력 및 페이지 표시\nfunction initPage() {\n  let { custom, $scope } = self.ctx;\n  custom.totalPage = Math.ceil(custom.mainDatasources.length / custom.countPerPage);\n  // 현재 페이지 기준 왼쪽이 5개 오른쪽이 4개가 되도록\n  custom.startPage = custom.currentPage - 5;\n  // 6번까지는 왼쪽이 5개 이하이므로 시작을 1로 고정\n  if (custom.currentPage <= 6) {\n    custom.startPage = 1;\n  }\n  // 마지막에서 5칸 아래페이지 부터는 오른쪽이 4개 이하이므로 시작을 마지막에서 9을 뺀것으로 고정\n  if (custom.totalPage >= 10 && custom.currentPage > custom.totalPage - 5) {\n    custom.startPage = custom.totalPage - 9;\n  }\n  custom.endPage = custom.startPage + 9;\n  // 끝 페이지가 총 페이지보다 크면 총페이지를 끝 페이지로\n  if (custom.endPage > custom.totalPage) {\n    custom.endPage = custom.totalPage;\n  }\n\n  // 페이지 리스트 구성\n  $scope.pageList = [];\n  for (let i = custom.startPage; i <= custom.endPage; i++) {\n    $scope.pageList.push({\n      number: i,\n      isBig: i > 99,\n      isActive: custom.currentPage == i,\n    });\n  }\n\n  custom.startIndex = (custom.currentPage - 1) * custom.countPerPage;\n  custom.endIndex = custom.currentPage * custom.countPerPage - 1;\n  // 끝 페이지가 데이터 소스의 길이보다 많으면 데이터 소스의 길이로 변경\n  if (custom.endIndex > custom.mainDatasources.length - 1) {\n    custom.endIndex = custom.mainDatasources.length - 1;\n  }\n  custom.targetDatasources = custom.mainDatasources.slice(custom.startIndex, custom.endIndex + 1);\n}\n\nfunction preprocessData() {\n  let { custom } = self.ctx;\n  let result = [];\n  for (let i in custom.mainDatasources) {\n    result.push({\n      id: custom.mainDatasources[i].entity.id,\n      name: custom.mainDatasources[i].entityName,\n      label: custom.mainDatasources[i].entityLabel,\n    });\n  }\n  for (let i in self.ctx.data) {\n    let target = self.ctx.data[i];\n    if (!_.isNil(target.data[0])) {\n      let entityId = target.datasource.entityId;\n      let name = target.dataKey.name;\n      let data = target.data[0][1];\n      let datasourceIndex = result.findIndex(x => x.id.id == entityId);\n      if (datasourceIndex !== -1) {\n        result[datasourceIndex][name] = data;\n      }\n    }\n  }\n  return result;\n}\n\n// 테이블 바디 생성\nfunction makeBody() {\n  let { custom, $scope } = self.ctx;\n  $scope.trList = [];\n  // 현재 페이지의 데이터 수 만큼 행 출력\n  for (let i = custom.startIndex; i <= custom.endIndex; i++) {\n    let tdList = [];\n    for (let j in custom.originDataKeys) {\n      tdList.push({ index: j, name: custom.originDataKeys[j].name, style: '', value: '' });\n    }\n    $scope.trList.push({\n      index: i,\n      tdList: tdList,\n    });\n  }\n}\n\n// 데이터 재 정렬\nfunction sortData() {\n  let { custom, $scope } = self.ctx;\n  // subscribe하는 데이터 키의 레이블 중 정렬기준으로 선택된 레이블의 인덱스 추출\n  // 정렬에 사용할 객체를 깊은 복사\n  let selectedKey = $scope.thList[custom.selectedIndex].key;\n  let selectedOrder = $scope.thList[custom.selectedIndex].order;\n  if (selectedOrder == 'ASC') {\n    custom.mainData.sort((a, b) => {\n      if (a[selectedKey] > b[selectedKey]) return 1;\n      if (a[selectedKey] < b[selectedKey]) return -1;\n      return 0;\n    });\n  } else {\n    custom.mainData.sort((a, b) => {\n      if (a[selectedKey] > b[selectedKey]) return -1;\n      if (a[selectedKey] < b[selectedKey]) return 1;\n      return 0;\n    });\n  }\n}\n\n// 데이터 삽입\nfunction insertData() {\n  let { custom, $scope } = self.ctx;\n  for (let i = custom.startIndex; i <= custom.endIndex; i++) {\n    for (let j in custom.originDataKeys) {\n      let key = custom.originDataKeys[j].name;\n      let data = custom.mainData[i][key];\n\n      // Apply cell style function\n      if (custom.originDataKeys[j].settings.useCellStyleFunction) {\n        try {\n          let styleFunction = new Function('value', 'ctx', custom.originDataKeys[j].settings.cellStyleFunction);\n          let style = styleFunction(data, self.ctx);\n          $scope.trList[i - custom.startIndex].tdList[j].style = style;\n        } catch (err) {\n          console.error(err);\n        }\n      }\n      // Apply cell action function\n      if (custom.originDataKeys[j].settings.useCellActionFunction) {\n        try {\n          let actionFunction = new Function(\n            'value',\n            'tr',\n            'td',\n            'ctx',\n            custom.originDataKeys[j].settings.cellActionFunction\n          );\n          $scope.trList[i - custom.startIndex].tdList[j].action = function (e) {\n            actionFunction(\n              data,\n              $scope.trList[i - custom.startIndex],\n              $scope.trList[i - custom.startIndex].tdList[j],\n              self.ctx\n            );\n          };\n        } catch (err) {\n          console.error(err);\n        }\n      }\n      // Apply cell content function\n      if (custom.originDataKeys[j].settings.useCellContentFunction) {\n        try {\n          let contentFunction = new Function('value', 'ctx', custom.originDataKeys[j].settings.cellContentFunction);\n          data = contentFunction(data, self.ctx);\n        } catch (err) {\n          console.error(err);\n        }\n      }\n\n      $scope.trList[i - custom.startIndex].tdList[j].value = data;\n    }\n  }\n}\n\nfunction handleHeaderAction(descriptor) {\n  let { custom } = self.ctx;\n  self.ctx.actionsApi.handleWidgetAction(\n    {},\n    descriptor,\n    custom.ownerDatasource.entity.id,\n    custom.ownerDatasource.entityName,\n    {},\n    custom.ownerDatasource.entityLabel\n  );\n}\n\nfunction handleCellAction(descriptor, index) {\n  let { custom, $scope } = self.ctx;\n  let realIndex = $scope.trList[index - custom.startIndex].index;\n  self.ctx.actionsApi.handleWidgetAction(\n    {},\n    descriptor,\n    custom.mainData[realIndex].id,\n    custom.mainData[realIndex].name,\n    custom.mainData[realIndex],\n    custom.mainData[realIndex].label\n  );\n}\n\nfunction toTime(value) {\n  if (isNaN(Number(value))) return '-';\n  if (value > 86400000) {\n    value = 86400000;\n  }\n  let hour = Math.floor(value / 3600000);\n  let temp = value % 3600000;\n  let min = Math.floor(temp / 60000);\n  return addZero(hour, 2) + ':' + addZero(min, 2);\n}\n\nfunction addZero(value, pos) {\n  let result = value.toString();\n  for (let i = result.length; i < pos; i++) {\n    result = '0' + result;\n  }\n  return result;\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          },\n          \"filterLevel\": {\n            \"title\": \"Filter Level\",\n            \"type\": \"number\",\n            \"default\": 2\n          },\n          \"mainHeader\": {\n            \"title\": \"Main Header Config\",\n            \"type\": \"string\",\n            \"default\": \"1,1,1,1,1,7:label,1\"\n          },\n          \"subHeader\": {\n            \"title\": \"Sub Header Config\",\n            \"type\": \"string\",\n            \"default\": \"0,0,0,0,0,1,1,1,1,1,1,1,0\"\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\", \"widget.filterLevel\", \"widget.mainHeader\", \"widget.subHeader\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"title\": \"DataKeySettings\",\n    \"properties\": {\n      \"hidden\": {\n        \"title\": \"Hide from table\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"useCellStyleFunction\": {\n        \"title\": \"Use cell style function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellStyleFunction\": {\n        \"title\": \"Cell style function: f(value, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      },\n      \"useCellContentFunction\": {\n        \"title\": \"Use cell content function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellContentFunction\": {\n        \"title\": \"Cell content function: f(value, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      },\n      \"useCellActionFunction\": {\n        \"title\": \"Use cell action function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellActionFunction\": {\n        \"title\": \"Cell action function: f(value, tr, td, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      }\n    },\n    \"required\": []\n  },\n  \"form\": [\n    \"hidden\",\n    \"useCellStyleFunction\",\n    {\n      \"key\": \"cellStyleFunction\",\n      \"type\": \"javascript\"\n    },\n    \"useCellContentFunction\",\n    {\n      \"key\": \"cellContentFunction\",\n      \"type\": \"javascript\"\n    },\n    \"useCellActionFunction\",\n    {\n      \"key\": \"cellActionFunction\",\n      \"type\": \"javascript\"\n    }\n  ]\n}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#4caf50\",\"settings\":{\"hidden\":false,\"useCellStyleFunction\":false,\"cellStyleFunction\":\"\",\"useCellContentFunction\":false,\"cellContentFunction\":\"\",\"useCellActionFunction\":false,\"cellActionFunction\":\"\"},\"_hash\":0.01387309784328794,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin 2\",\"color\":\"#f44336\",\"settings\":{\"hidden\":false,\"useCellStyleFunction\":false,\"cellStyleFunction\":\"\",\"useCellContentFunction\":false,\"cellContentFunction\":\"\",\"useCellActionFunction\":false,\"cellActionFunction\":\"\"},\"_hash\":0.026603735146824237,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630,\"filterLevel\":2,\"mainHeader\":\"1,1,1,1,1,7:label,1\",\"subHeader\":\"0,0,0,0,0,1,1,1,1,1,1,1,0\"}},\"title\":\"Maintain System Alarm\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"1.6em\",\"font-weight\":600,\"letter-spacing\":\"-0.05em\",\"color\":\"var(--tb-service-font-5)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    },
    {
      "alias": "maintain_sms_alarm",
      "name": "Maintain SMS Alarm",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <div class=\"widget-tab\" fxLayoutAlign=\"start center\" *ngIf=\"tabList && tabList.length > 1\">\n    <div\n      class=\"tab\"\n      *ngFor=\"let tab of tabList\"\n      fxLayoutAlign=\"center center\"\n      [ngClass]=\"{'active': tab.isActive}\"\n      (click)=\"selectTab(tab.id)\"\n    >\n      {{tab.label | translate}}\n    </div>\n  </div>\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\">\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\" translate>title</div>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-action\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n        <div\n          class=\"widget-header-action\"\n          *ngFor=\"let headerAction of headerActionList\"\n          fxLayoutAlign=\"start center\"\n          fxLayoutGap=\"0.5em\"\n          (click)=\"headerAction.action($event)\"\n        >\n          <span translate>{{headerAction.name}}</span>\n          <i class=\"material-icons\">{{headerAction.icon}}</i>\n        </div>\n      </div>\n    </section>\n  </header>\n  <main class=\"widget-content\">\n    <section class=\"table-section\">\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th\n              *ngFor=\"let th of mainThList\"\n              (click)=\"changeSort($event, th)\"\n              [attr.rowspan]=\"th.rowspan\"\n              [attr.colspan]=\"th.colspan\"\n              #tooltip=\"matTooltip\"\n              [matTooltip]=\"th.help\"\n              matTooltipClass=\"tp-service-tooltip\"\n              [ngClass]=\"{'DESC': th.order == 'DESC','ASC': th.order == 'ASC','main': !th.index}\"\n            >\n              <div class=\"th-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <span class=\"th-label\">{{th.label}}</span>\n                <i class=\"th-help material-icons\" *ngIf=\"th.help\">help</i>\n                <i class=\"th-sort material-icons\">arrow_upward</i>\n              </div>\n            </th>\n            <th *ngIf=\"hasCellAction\" rowspan=\"2\" [ngStyle]=\"{'width': actionSize}\"></th>\n          </tr>\n          <tr>\n            <th class=\"sub\" *ngFor=\"let th of subThList\" (click)=\"changeSort($event, th)\" [ngClass]=\"th.order\">\n              <div class=\"th-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <span class=\"th-label\">{{th.label}}</span>\n                <i class=\"th-sort material-icons\">arrow_upward</i>\n              </div>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tr of trList\">\n            <td\n              *ngFor=\"let td of tr.tdList\"\n              [ngStyle]=\"td.style\"\n              [innerHTML]=\"td.value\"\n              (click)=\"td.action && td.action($event)\"\n            ></td>\n            <td *ngIf=\"hasCellAction\" class=\"action\">\n              <div class=\"cell-action-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <i\n                  *ngFor=\"let cellAction of cellActionList\"\n                  class=\"material-icons cell-action\"\n                  (click)=\"cellAction.action($event, tr.index)\"\n                >\n                  {{cellAction.icon}}\n                </i>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </section>\n  </main>\n  <footer class=\"widget-footer\" fxLayoutAlign=\"end center\">\n    <section class=\"page-section\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.5em\">\n      <div class=\"material-icons page-button first-button\" (click)=\"getFirstPage()\">first_page</div>\n      <div class=\"material-icons page-button prev-button\" (click)=\"getPrevPage()\">keyboard_arrow_left</div>\n      <div\n        class=\"page-button page-number-button\"\n        [class.big]=\"page.isBig\"\n        [class.active]=\"page.isActive\"\n        *ngFor=\"let page of pageList\"\n        (click)=\"changePage($event, page)\"\n      >\n        {{page.number}}\n      </div>\n      <div class=\"material-icons page-button next-button\" (click)=\"getNextPage()\">keyboard_arrow_right</div>\n      <div class=\"material-icons page-button last-button\" (click)=\"getLastPage()\">last_page</div>\n    </section>\n  </footer>\n</div>\n",
        "templateCss": "#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n}\n\n.widget-tab {\n  width: 100%;\n  height: 5em;\n  min-height: 30px;\n  background-color: var(--tb-service-background-2);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.tab {\n  min-width: 8em;\n  height: 100%;\n  font-size: 1.4em;\n  font-weight: 500;\n  border-right: 1px solid var(--tb-service-border-1);\n  color: var(--tb-service-font-3);\n  cursor: pointer;\n}\n.tab.active {\n  background-color: var(--tb-service-background-0);\n  color: var(--tb-service-font-5);\n  border-top: 0.2em solid var(--tb-service-accent);\n  border-bottom: 1px solid var(--tb-service-background-0);\n  box-sizing: content-box !important;\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n}\n\n/* widget-header-right-section */\n.widget-header-right-section .widget-header-action {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0.6em 1.2em;\n  cursor: pointer;\n  border: 1px solid var(--tb-service-accent);\n  background-color: var(--tb-service-accent);\n  color: var(--tb-service-font-0);\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .widget-header-action span {\n  font-size: 1.4em;\n  font-weight: bold;\n  white-space: nowrap;\n}\n.widget-header-right-section .widget-header-action i {\n  font-size: 1.4em;\n  font-weight: bold;\n}\n.widget-header-right-section .widget-header-action:hover {\n  border-color: var(--tb-service-accent-hover);\n  background-color: var(--tb-service-accent-hover);\n}\n.widget-header-right-section .widget-header-action:active {\n  border-color: var(--tb-service-accent-pressed);\n  background-color: var(--tb-service-accent-pressed);\n}\n\n/*\n  Widget Content Area\n*/\nmain.widget-content {\n  width: 100%;\n}\n\n/* table-section */\n.table-section {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n.table-section::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n.table-section::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n.table-section::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n.table-section .table {\n  min-width: 100%;\n  border-spacing: 0px;\n  box-sizing: border-box;\n  table-layout: fixed;\n  border-collapse: collapse;\n  white-space: nowrap;\n}\n.table-section thead tr {\n  background-color: var(--tb-service-background-1);\n  border-top: 1px solid var(--tb-service-border-1);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.table-section th {\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  padding: 1.68em;\n  text-align: left;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 1em;\n  line-height: 1;\n  border: 1px solid var(--tb-service-border-1);\n}\n.table-section th:first-child {\n  border-left: none;\n}\n.table-section th:last-child {\n  border-right: none;\n}\n.table-section th.main .th-box {\n  justify-content: center !important;\n}\n.table-section th.sub {\n  background-color: var(--tb-service-background-3);\n  padding: 1em;\n}\n.table-section th .th-label {\n  font-size: 1.2em;\n  margin-right: 0.5em;\n}\n.table-section th.main .th-label {\n  margin-right: 0em;\n}\n.table-section th .th-help {\n  font-size: 1.4em;\n  color: var(--tb-service-font-3);\n}\n.table-section th .th-sort {\n  font-size: 1.4em;\n  opacity: 0;\n  vertical-align: top;\n  transition-property: transform, opacity;\n  transition-duration: var(--tb-config-color-duration);\n  color: var(--tb-service-accent);\n}\n.table-section th:not(.DESC):not(.ASC):hover .th-sort {\n  opacity: 0.4;\n}\n.table-section th.ASC .th-sort {\n  opacity: 1;\n  transform: rotate(0deg);\n}\n.table-section th.DESC .th-sort {\n  opacity: 1;\n  transform: rotate(180deg);\n}\n.table-section th.main .th-sort {\n  display: none;\n}\n.table-section tbody tr {\n  border-bottom: 1px solid var(--tb-service-border-1);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section tbody tr:nth-child(odd) {\n  background-color: var(--tb-service-background-0);\n}\n.table-section tbody tr:nth-child(even) {\n  background-color: var(--tb-service-background-1);\n}\n.table-section td {\n  line-height: 1;\n  border: 1px solid var(--tb-service-border-1);\n}\n.table-section td:first-child {\n  border-left: none;\n}\n.table-section td:last-child {\n  border-right: none;\n}\n.table-section td:not(.action) {\n  color: var(--tb-service-font-4);\n  padding: 1.2em;\n  font-size: 1.4em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  user-select: text;\n}\n.table-section tbody tr:hover {\n  background-color: var(--tb-service-background-2);\n}\n.table-section td.action {\n  font-size: 1em;\n  padding: 0em 1.68em;\n  text-overflow: initial;\n}\n.table-section .cell-action {\n  font-size: 2em;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section .cell-action:hover {\n  color: var(--tb-service-font-5);\n}\n.table-section .cell-action.active {\n  color: var(--tb-service-accent);\n}\n.table-section .activate-switch {\n  position: relative;\n  width: 3.6em;\n  height: 1.6em;\n  border-radius: 0.8em;\n  background-color: var(--tb-service-font-3);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n  margin: auto;\n  cursor: pointer;\n}\n.table-section .activate-switch.active {\n  background-color: var(--tb-service-accent);\n}\n.table-section .activate-switch .ball {\n  position: absolute;\n  top: 50%;\n  left: 0.8em;\n  transform: translate(-50%, -50%);\n  width: 1.2em;\n  height: 1.2em;\n  border-radius: 0.6em;\n  background-color: var(--tb-service-background-0);\n  transition-property: left;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section .activate-switch.active .ball {\n  left: calc(100% - 0.8em);\n}\n\n/*\n  Widget Footer Area\n*/\nfooter.widget-footer {\n  width: 100%;\n  padding: var(--tb-config-padding);\n}\n\n/* page-section */\n.page-section .page-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 2em;\n  min-width: 20px;\n  height: 2em;\n  min-height: 20px;\n  font-size: 1.2em;\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  cursor: pointer;\n  color: var(--tb-service-font-4);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.page-section .first-button,\n.page-section .last-button,\n.page-section .prev-button,\n.page-section .next-button {\n  font-size: 1.6em;\n  width: 1.5em;\n  height: 1.5em;\n}\n.page-section .page-button:not(.active):hover {\n  border: 1px solid var(--tb-service-accent-hover);\n}\n.page-section .page-button:not(.active):active {\n  border: 1px solid var(--tb-service-accent-pressed);\n}\n.page-section .page-button.big-page {\n  width: 3.5em;\n  min-width: 35px;\n}\n.page-section .page-number-button.active {\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-accent);\n}\n",
        "controllerScript": "const ENTITY_TYPE = ['TENANT', 'CUSTOMER_L1', 'CUSTOMER_L2', 'DEVICE'];\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  makeTab();\n  makeHead();\n  initPage();\n  makeBody();\n  self.onResize();\n\n  // Action 파트에서 사용하기 위한 설정\n  if (!custom.isSample) {\n    // 현재 사용자의 Root 엔터티로부터 관계 트리 형성\n    custom.relations[custom.rootEntity.id.id] = {\n      id: custom.rootEntity.id,\n      name: custom.rootEntity.name,\n      parent: '',\n      child: [],\n    };\n    $scope.ownerLevel = await getCurrentLevel();\n    await getCustomer([custom.relations[custom.rootEntity.id.id]]);\n  }\n  custom.isInitialized = true;\n  self.onDataUpdated();\n  self.onResize();\n};\n\nself.onDataUpdated = function () {\n  let { custom } = self.ctx;\n  if (custom.isInitialized && custom.originDataKeys.length > 0) {\n    custom.mainData = preprocessData();\n    sortData();\n    insertData();\n  }\n  self.ctx.detectChanges();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.actionSources = function () {\n  return {\n    widgetHeaderButton: {\n      name: 'Custom Header Button',\n      multiple: true,\n    },\n    actionCellButton: {\n      name: 'widget-action.action-cell-button',\n      multiple: true,\n    },\n    customAction: {\n      name: 'Custom Action',\n      multiple: true,\n    },\n  };\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n  custom.$widgetAction = $('.widget-action', $container);\n  custom.$widgetContent = $('.widget-content', $container);\n  custom.$table = $('.table', $container);\n  custom.$theadTr = $('.table thead tr', $container);\n  custom.$tbody = $('.table tbody', $container);\n  custom.$widgetFooter = $('.widget-footer', $container);\n\n  // Define Scope Variables\n  $scope.tabList = [];\n  $scope.ownerLevel = 2;\n  $scope.filterLevel = self.ctx.settings.widget.filterLevel;\n  $scope.thList = [];\n  $scope.mainThList = [];\n  $scope.subThList = [];\n  $scope.trList = [];\n  $scope.pageList = [];\n  custom.relations = [];\n  $scope.headerActionList = self.ctx.actionsApi.getActionDescriptors('widgetHeaderButton').map(x => {\n    return { name: x.name, icon: x.icon, action: e => handleHeaderAction(x) };\n  });\n  $scope.cellActionList = self.ctx.actionsApi.getActionDescriptors('actionCellButton').map(x => {\n    return { name: x.name, icon: x.icon, action: (e, i) => handleCellAction(x, i) };\n  });\n  $scope.hasCellAction = $scope.cellActionList.length > 0;\n  $scope.actionSize = `${$scope.cellActionList.length * 2 + 3.36 + ($scope.cellActionList.length - 1) * 0.5}em`;\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.mainDatasource = self.ctx.defaultSubscription.configuredDatasources[1];\n  custom.rootEntity = custom.ownerDatasource.entity;\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.hiddenDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.ownerDatasource.entityAliasId);\n  custom.mainDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.mainDatasource.entityAliasId);\n  custom.originDataKeys = self.ctx.defaultSubscription.configuredDatasources[1].dataKeys.filter(\n    x => x.settings.hidden !== true\n  );\n  custom.targetDatasources = [];\n  custom.isInitialized = false;\n  custom.selectedIndex = 0;\n  custom.currentPage = 1;\n  custom.countPerPage = 10;\n  custom.t = t;\n  custom.toTime = toTime;\n  custom.addZero = addZero;\n  custom.headerConfig = {\n    main: self.ctx.settings.widget.mainHeader.split(','),\n    sub: self.ctx.settings.widget.subHeader.split(','),\n  };\n}\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(self.ctx.widget.config.title);\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope } = self.ctx;\n  $scope.selectTab = function (e) {\n    let state = e || 'default';\n    let param = custom.dashboardParams || {};\n    self.ctx.stateController.updateState(state, param, null);\n  };\n  $scope.getPrevPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage--;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getNextPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage++;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getFirstPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage = 1;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getLastPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage = custom.totalPage;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.changePage = function (e, page) {\n    if (!page.isActive) {\n      custom.currentPage = page.number;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.changeSort = function (e, th) {\n    if (!th.index) return;\n    if (th.isAction) return;\n    if (th.index == custom.selectedIndex) {\n      if (th.order != 'ASC') {\n        $scope.thList[th.index].order = 'ASC';\n      } else {\n        $scope.thList[th.index].order = 'DESC';\n      }\n    } else {\n      $scope.thList.forEach(x => (x.order = ''));\n      custom.selectedIndex = th.index;\n      $scope.thList[th.index].order = 'ASC';\n    }\n    initPage();\n    makeBody();\n    sortData();\n    insertData();\n  };\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  let widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (widgetFontSize < 6.25) {\n    widgetFontSize = 6.25;\n  }\n  custom.$widget.css('font-size', `${widgetFontSize}px`);\n\n  // Header와 Footer Height를 제외한 영역을 Main의 Height로 설정\n  let headerHeight = custom.$widgetHeader.outerHeight(true);\n  let footerHeight = custom.$widgetFooter.outerHeight(true);\n  custom.$widgetContent.css('height', `calc(100% - ${headerHeight + footerHeight}px)`);\n}\n\nasync function getCurrentLevel() {\n  let { custom } = self.ctx;\n  if (custom.rootEntity.id.entityType == 'TENANT') {\n    return 0;\n  } else {\n    let result = await self.ctx.attributeService\n      .getEntityAttributes(custom.rootEntity.id, 'SERVER_SCOPE', ['customerType'])\n      .toPromise();\n    if (result && result[0]) {\n      if (result[0].value == 'CUSTOMER_L1') {\n        return 1;\n      } else {\n        return 2;\n      }\n    }\n  }\n}\n\nfunction getCustomer(entities) {\n  return new Promise(resolve => {\n    let { custom } = self.ctx;\n    let promises = [];\n    if (entities.length > 0) {\n      for (let i = 0; i < entities.length; i++) {\n        promises.push(self.ctx.entityRelationService.findInfoByFrom(entities[i].id));\n      }\n      self.ctx.rxjs.forkJoin(promises).subscribe(async childs => {\n        let newChild = [];\n        for (let j = 0; j < childs.length; j++) {\n          for (let k = 0; k < childs[j].length; k++) {\n            custom.relations[childs[j][k].to.id] = {\n              id: childs[j][k].to,\n              name: childs[j][k].toName,\n              parent: entities[j],\n              child: [],\n              type: 'CUSTOMER',\n            };\n            custom.relations[entities[j].id.id].child.push(custom.relations[childs[j][k].to.id]);\n            if (childs[j][k].to.entityType === 'USER') {\n              custom.relations[childs[j][k].to.id].type = 'USER';\n            }\n            if (childs[j][k].to.entityType === 'DEVICE') {\n              custom.relations[childs[j][k].to.id].type = 'DEVICE';\n            }\n            if (childs[j][k].to.entityType === 'ASSET') {\n              custom.relations[childs[j][k].to.id].type = 'ASSET';\n            }\n            if (childs[j][k].to.entityType === 'CUSTOMER') {\n              newChild.push(custom.relations[childs[j][k].to.id]);\n            }\n          }\n        }\n        await getCustomer(newChild);\n        resolve();\n      });\n    } else {\n      distributeLevel();\n      resolve();\n    }\n  });\n}\n\n// hierarchy 레벨에 따라 배열에 따로 저장\nfunction distributeLevel() {\n  let { custom, $scope } = self.ctx;\n  let depth = $scope.ownerLevel;\n  let root = custom.relations[custom.rootEntity.id.id];\n  root.type = ENTITY_TYPE[depth];\n  for (let i in root.child) {\n    if (root.child[i].type == 'CUSTOMER') {\n      root.child[i].type = ENTITY_TYPE[depth + 1];\n    }\n    for (let j in root.child[i].child) {\n      if (root.child[i].child[j].type == 'CUSTOMER') {\n        root.child[i].child[j].type = ENTITY_TYPE[depth + 2];\n      }\n    }\n  }\n  custom.customerL1List = [];\n  custom.customerL2List = [];\n  custom.deviceList = [];\n  custom.userList = [];\n\n  for (let i in custom.relations) {\n    if (custom.relations[i].type == ENTITY_TYPE[1]) {\n      custom.customerL1List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[2]) {\n      custom.customerL2List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[3]) {\n      custom.deviceList.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == 'USER') {\n      custom.userList.push(custom.relations[i]);\n    }\n  }\n\n  getDeviceInfo();\n  getUserInfo();\n  self.ctx.detectChanges();\n}\n\nfunction getDeviceInfo() {\n  let { custom, $scope } = self.ctx;\n  let observables = [];\n  custom.deviceList = [];\n  for (let i in custom.customerL2List) {\n    let customerId = custom.customerL2List[i].id.id;\n    observables.push(self.ctx.http.get(`/api/customer/${customerId}/deviceInfos?pageSize=50000&page=0`));\n  }\n\n  self.ctx.rxjs.forkJoin(observables).subscribe(devices => {\n    for (let i in devices) {\n      for (let j in devices[i].data) {\n        custom.relations[devices[i].data[j].id.id].label =\n          devices[i].data[j].label != '' ? devices[i].data[j].label : devices[i].data[j].name;\n        custom.deviceList.push(custom.relations[devices[i].data[j].id.id]);\n      }\n    }\n\n    insertData();\n    self.ctx.detectChanges();\n  });\n}\n\nfunction getUserInfo() {\n  let { custom, $scope } = self.ctx;\n  let observables = [];\n  for (let i in custom.userList) {\n    let userId = custom.userList[i].id.id;\n    observables.push(self.ctx.http.get(`/api/user/${userId}`));\n  }\n\n  self.ctx.rxjs.forkJoin(observables).subscribe(users => {\n    for (let i in users) {\n      custom.relations[users[i].id.id].details = users[i];\n    }\n  });\n}\n\nfunction filterDatasources() {\n  let { custom, $scope } = self.ctx;\n  custom.mainDatasources = self.ctx.datasources.filter(x => x.entityAliasId !== custom.ownerDatasource.entityAliasId);\n  if ($scope.ownerLevel == 0) {\n    // 상위 검사\n    custom.mainDatasources = custom.mainDatasources.filter(\n      x =>\n        $scope.selectedCustomerL1 == '' ||\n        (custom.relations[x.entityId].parent &&\n          (custom.relations[x.entityId].parent.id.id == $scope.selectedCustomerL1 ||\n            (custom.relations[x.entityId].parent.parent &&\n              custom.relations[x.entityId].parent.parent.id.id == $scope.selectedCustomerL1)))\n    );\n  }\n  if ($scope.filterLevel == 0) {\n    // 하위 검사\n    custom.mainDatasources = custom.mainDatasources.filter(\n      x =>\n        $scope.selectedCustomerL2 == '' ||\n        (custom.relations[x.entityId].parent && custom.relations[x.entityId].parent.id.id == $scope.selectedCustomerL2)\n    );\n  }\n\n  initPage();\n  makeBody();\n  custom.mainData = preprocessData();\n  sortData();\n  insertData();\n  self.ctx.detectChanges();\n}\n\n// 대시보드 상태 탭 생성\nfunction makeTab() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return;\n  $scope.tabList = [];\n  for (let i in self.ctx.stateController.statesValue) {\n    $scope.tabList.push({\n      label: 'thingplus.menu.' + i,\n      id: i,\n      isActive: i == self.ctx.stateController.stateValue,\n    });\n  }\n}\n\n// 헤더 부분 생성\nfunction makeHead() {\n  let { custom, $scope, $container } = self.ctx;\n  $scope.thList = [];\n  $scope.mainThList = [];\n  $scope.subThList = [];\n  for (let i in custom.originDataKeys) {\n    let newTh = {\n      index: i,\n      key: custom.originDataKeys[i].name,\n      label: t(custom.originDataKeys[i].label),\n      order: custom.selectedIndex == i ? 'ASC' : '',\n    };\n    if (custom.originDataKeys[i].label == 'thingplus.label.snooze') {\n      newTh.help = t('thingplus.help.help-snooze');\n    }\n    $scope.thList.push(newTh);\n  }\n  for (let i in $scope.thList) {\n    if (custom.headerConfig.main[i] != 1) {\n      if (custom.headerConfig.main[i]) {\n        let target = custom.headerConfig.main[i].split(':');\n        $scope.mainThList.push({\n          label: t(target[1]),\n          order: '',\n          colspan: target[0],\n          rowspan: 1,\n        });\n      }\n    }\n    if (custom.headerConfig.sub[i] == 0) {\n      $scope.thList[i].colspan = 1;\n      $scope.thList[i].rowspan = 2;\n      $scope.mainThList.push($scope.thList[i]);\n    } else {\n      $scope.thList[i].colspan = 1;\n      $scope.thList[i].rowspan = 1;\n      $scope.subThList.push($scope.thList[i]);\n    }\n  }\n}\n\n// 페이지에 맞는 데이터 출력 및 페이지 표시\nfunction initPage() {\n  let { custom, $scope } = self.ctx;\n  custom.totalPage = Math.ceil(custom.mainDatasources.length / custom.countPerPage);\n  // 현재 페이지 기준 왼쪽이 5개 오른쪽이 4개가 되도록\n  custom.startPage = custom.currentPage - 5;\n  // 6번까지는 왼쪽이 5개 이하이므로 시작을 1로 고정\n  if (custom.currentPage <= 6) {\n    custom.startPage = 1;\n  }\n  // 마지막에서 5칸 아래페이지 부터는 오른쪽이 4개 이하이므로 시작을 마지막에서 9을 뺀것으로 고정\n  if (custom.totalPage >= 10 && custom.currentPage > custom.totalPage - 5) {\n    custom.startPage = custom.totalPage - 9;\n  }\n  custom.endPage = custom.startPage + 9;\n  // 끝 페이지가 총 페이지보다 크면 총페이지를 끝 페이지로\n  if (custom.endPage > custom.totalPage) {\n    custom.endPage = custom.totalPage;\n  }\n\n  // 페이지 리스트 구성\n  $scope.pageList = [];\n  for (let i = custom.startPage; i <= custom.endPage; i++) {\n    $scope.pageList.push({\n      number: i,\n      isBig: i > 99,\n      isActive: custom.currentPage == i,\n    });\n  }\n\n  custom.startIndex = (custom.currentPage - 1) * custom.countPerPage;\n  custom.endIndex = custom.currentPage * custom.countPerPage - 1;\n  // 끝 페이지가 데이터 소스의 길이보다 많으면 데이터 소스의 길이로 변경\n  if (custom.endIndex > custom.mainDatasources.length - 1) {\n    custom.endIndex = custom.mainDatasources.length - 1;\n  }\n  custom.targetDatasources = custom.mainDatasources.slice(custom.startIndex, custom.endIndex + 1);\n}\n\nfunction preprocessData() {\n  let { custom } = self.ctx;\n  let result = [];\n  for (let i in custom.mainDatasources) {\n    result.push({\n      id: custom.mainDatasources[i].entity.id,\n      name: custom.mainDatasources[i].entityName,\n      label: custom.mainDatasources[i].entityLabel,\n    });\n  }\n  for (let i in self.ctx.data) {\n    let target = self.ctx.data[i];\n    if (!_.isNil(target.data[0])) {\n      let entityId = target.datasource.entityId;\n      let name = target.dataKey.name;\n      let data = target.data[0][1];\n      let datasourceIndex = result.findIndex(x => x.id.id == entityId);\n      if (datasourceIndex !== -1) {\n        result[datasourceIndex][name] = data;\n      }\n    }\n  }\n  return result;\n}\n\n// 테이블 바디 생성\nfunction makeBody() {\n  let { custom, $scope } = self.ctx;\n  $scope.trList = [];\n  // 현재 페이지의 데이터 수 만큼 행 출력\n  for (let i = custom.startIndex; i <= custom.endIndex; i++) {\n    let tdList = [];\n    for (let j in custom.originDataKeys) {\n      tdList.push({ index: j, name: custom.originDataKeys[j].name, style: '', value: '' });\n    }\n    $scope.trList.push({\n      index: i,\n      tdList: tdList,\n    });\n  }\n}\n\n// 데이터 재 정렬\nfunction sortData() {\n  let { custom, $scope } = self.ctx;\n  // subscribe하는 데이터 키의 레이블 중 정렬기준으로 선택된 레이블의 인덱스 추출\n  // 정렬에 사용할 객체를 깊은 복사\n  let selectedKey = $scope.thList[custom.selectedIndex].key;\n  let selectedOrder = $scope.thList[custom.selectedIndex].order;\n  if (selectedOrder == 'ASC') {\n    custom.mainData.sort((a, b) => {\n      if (a[selectedKey] > b[selectedKey]) return 1;\n      if (a[selectedKey] < b[selectedKey]) return -1;\n      return 0;\n    });\n  } else {\n    custom.mainData.sort((a, b) => {\n      if (a[selectedKey] > b[selectedKey]) return -1;\n      if (a[selectedKey] < b[selectedKey]) return 1;\n      return 0;\n    });\n  }\n}\n\n// 데이터 삽입\nfunction insertData() {\n  let { custom, $scope } = self.ctx;\n  for (let i = custom.startIndex; i <= custom.endIndex; i++) {\n    for (let j in custom.originDataKeys) {\n      let key = custom.originDataKeys[j].name;\n      let data = custom.mainData[i][key];\n\n      // Apply cell style function\n      if (custom.originDataKeys[j].settings.useCellStyleFunction) {\n        try {\n          let styleFunction = new Function('value', 'ctx', custom.originDataKeys[j].settings.cellStyleFunction);\n          let style = styleFunction(data, self.ctx);\n          $scope.trList[i - custom.startIndex].tdList[j].style = style;\n        } catch (err) {\n          console.error(err);\n        }\n      }\n      // Apply cell action function\n      if (custom.originDataKeys[j].settings.useCellActionFunction) {\n        try {\n          let actionFunction = new Function(\n            'value',\n            'tr',\n            'td',\n            'ctx',\n            custom.originDataKeys[j].settings.cellActionFunction\n          );\n          $scope.trList[i - custom.startIndex].tdList[j].action = function (e) {\n            actionFunction(\n              data,\n              $scope.trList[i - custom.startIndex],\n              $scope.trList[i - custom.startIndex].tdList[j],\n              self.ctx\n            );\n          };\n        } catch (err) {\n          console.error(err);\n        }\n      }\n      // Apply cell content function\n      if (custom.originDataKeys[j].settings.useCellContentFunction) {\n        try {\n          let contentFunction = new Function('value', 'ctx', custom.originDataKeys[j].settings.cellContentFunction);\n          data = contentFunction(data, self.ctx);\n        } catch (err) {\n          console.error(err);\n        }\n      }\n\n      $scope.trList[i - custom.startIndex].tdList[j].value = data;\n    }\n  }\n}\n\nfunction handleHeaderAction(descriptor) {\n  let { custom } = self.ctx;\n  self.ctx.actionsApi.handleWidgetAction(\n    {},\n    descriptor,\n    custom.ownerDatasource.entity.id,\n    custom.ownerDatasource.entityName,\n    {},\n    custom.ownerDatasource.entityLabel\n  );\n}\n\nfunction handleCellAction(descriptor, index) {\n  let { custom, $scope } = self.ctx;\n  let realIndex = $scope.trList[index - custom.startIndex].index;\n  self.ctx.actionsApi.handleWidgetAction(\n    {},\n    descriptor,\n    custom.mainData[realIndex].id,\n    custom.mainData[realIndex].name,\n    custom.mainData[realIndex],\n    custom.mainData[realIndex].label\n  );\n}\n\nfunction toTime(value) {\n  if (isNaN(Number(value))) return '-';\n  if (value > 86400000) {\n    value = 86400000;\n  }\n  let hour = Math.floor(value / 3600000);\n  let temp = value % 3600000;\n  let min = Math.floor(temp / 60000);\n  return addZero(hour, 2) + ':' + addZero(min, 2);\n}\n\nfunction addZero(value, pos) {\n  let result = value.toString();\n  for (let i = result.length; i < pos; i++) {\n    result = '0' + result;\n  }\n  return result;\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          },\n          \"filterLevel\": {\n            \"title\": \"Filter Level\",\n            \"type\": \"number\",\n            \"default\": 2\n          },\n          \"mainHeader\": {\n            \"title\": \"Main Header Config\",\n            \"type\": \"string\",\n            \"default\": \"1,1,1,1,1,7:label,1\"\n          },\n          \"subHeader\": {\n            \"title\": \"Sub Header Config\",\n            \"type\": \"string\",\n            \"default\": \"0,0,0,0,0,1,1,1,1,1,1,1,0\"\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\", \"widget.filterLevel\", \"widget.mainHeader\", \"widget.subHeader\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"title\": \"DataKeySettings\",\n    \"properties\": {\n      \"hidden\": {\n        \"title\": \"Hide from table\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"useCellStyleFunction\": {\n        \"title\": \"Use cell style function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellStyleFunction\": {\n        \"title\": \"Cell style function: f(value, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      },\n      \"useCellContentFunction\": {\n        \"title\": \"Use cell content function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellContentFunction\": {\n        \"title\": \"Cell content function: f(value, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      },\n      \"useCellActionFunction\": {\n        \"title\": \"Use cell action function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellActionFunction\": {\n        \"title\": \"Cell action function: f(value, tr, td, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      }\n    },\n    \"required\": []\n  },\n  \"form\": [\n    \"hidden\",\n    \"useCellStyleFunction\",\n    {\n      \"key\": \"cellStyleFunction\",\n      \"type\": \"javascript\"\n    },\n    \"useCellContentFunction\",\n    {\n      \"key\": \"cellContentFunction\",\n      \"type\": \"javascript\"\n    },\n    \"useCellActionFunction\",\n    {\n      \"key\": \"cellActionFunction\",\n      \"type\": \"javascript\"\n    }\n  ]\n}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#4caf50\",\"settings\":{\"hidden\":false,\"useCellStyleFunction\":false,\"cellStyleFunction\":\"\",\"useCellContentFunction\":false,\"cellContentFunction\":\"\",\"useCellActionFunction\":false,\"cellActionFunction\":\"\"},\"_hash\":0.01387309784328794,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin 2\",\"color\":\"#f44336\",\"settings\":{\"hidden\":false,\"useCellStyleFunction\":false,\"cellStyleFunction\":\"\",\"useCellContentFunction\":false,\"cellContentFunction\":\"\",\"useCellActionFunction\":false,\"cellActionFunction\":\"\"},\"_hash\":0.026603735146824237,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630,\"filterLevel\":2,\"mainHeader\":\"1,1,1,1,1,7:label,1\",\"subHeader\":\"0,0,0,0,0,1,1,1,1,1,1,1,0\"}},\"title\":\"Maintain SMS Alarm\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"1.6em\",\"font-weight\":600,\"letter-spacing\":\"-0.05em\",\"color\":\"var(--tb-service-font-5)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    }
  ]
}