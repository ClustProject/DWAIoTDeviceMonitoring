{
  "widgetsBundle": {
    "alias": "moldmecca_info_widgets",
    "title": "Moldmecca Info Widgets",
    "image": null,
    "description": null
  },
  "widgetTypes": [
    {
      "alias": "state_timeline",
      "name": "State Timeline",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 4.5,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <div class=\"widget-tab\" fxLayoutAlign=\"start center\" *ngIf=\"tabList && tabList.length > 1\">\n    <div\n      class=\"tab\"\n      *ngFor=\"let tab of tabList\"\n      fxLayoutAlign=\"center center\"\n      [ngClass]=\"{'active': tab.isActive}\"\n      (click)=\"selectTab(tab.id)\"\n    >\n      {{tab.label | translate}}\n    </div>\n  </div>\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\">\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\" translate>title</div>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <div class=\"entity-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n        <span class=\"normal-label\" translate>thingplus.selector.device-selection</span>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel == 0\"\n          (ngModelChange)=\"setCustomerL1($event)\"\n          [ngModel]=\"selectedCustomerL1\"\n        >\n          <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n            {{customerL1.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel <= 1\"\n          (ngModelChange)=\"setCustomerL2($event)\"\n          [ngModel]=\"selectedCustomerL2\"\n        >\n          <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n            {{customerL2.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select class=\"entity-selector\" (ngModelChange)=\"setDevice($event)\" [ngModel]=\"selectedDevice\">\n          <mat-option *ngFor=\"let device of deviceList\" [value]=\"device.value\"> {{device.label}} </mat-option>\n        </mat-select>\n      </div>\n      <div class=\"date-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\" fxShow.lt-md=\"false\">\n        <div class=\"normal-label\" translate>thingplus.selector.date-selection</div>\n        <div class=\"date-selector\" fxLayoutAlign=\"space-between center\">\n          <mat-datetimepicker #startDatePicker type=\"date\"></mat-datetimepicker>\n          <input\n            class=\"hidden\"\n            matInput\n            readonly\n            [(ngModel)]=\"startDate\"\n            [max]=\"endDate\"\n            [matDatetimepicker]=\"startDatePicker\"\n            (ngModelChange)=\"setStartDate($event)\"\n          />\n          <input class=\"start-date\" (click)=\"startDatePicker.open()\" [(ngModel)]=\"viewStartDate\" readonly />\n          <div class=\"select-arrow\"></div>\n        </div>\n        <span class=\"normal-label\"> ~ </span>\n        <div class=\"date-selector\" fxLayoutAlign=\"space-between center\">\n          <mat-datetimepicker #endDatePicker type=\"date\"></mat-datetimepicker>\n          <input\n            class=\"hidden\"\n            matInput\n            readonly\n            [(ngModel)]=\"endDate\"\n            [min]=\"startDate\"\n            [max]=\"nowDate\"\n            [matDatetimepicker]=\"endDatePicker\"\n            (ngModelChange)=\"setEndDate($event)\"\n          />\n          <input class=\"end-date\" (click)=\"endDatePicker.open()\" [(ngModel)]=\"viewEndDate\" readonly />\n          <div class=\"select-arrow\"></div>\n        </div>\n      </div>\n      <button class=\"action-btn text-btn\" (click)=\"search($event)\" fxShow.lt-md=\"false\">\n        <span translate>thingplus.action.search</span>\n      </button>\n      <button class=\"action-btn text-btn\" (click)=\"openFilter($event)\" fxShow.gt-sm=\"false\">\n        <span translate>thingplus.action.search</span>\n      </button>\n    </section>\n  </header>\n  <header class=\"widget-sub-header\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\">\n    <section class=\"widget-header-left-section\" fxFlex=\"100\" fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <section class=\"legend-section\" fxLayoutAlign=\"start center\" fxLayoutGap=\"2.4em\">\n        <div\n          class=\"legend-box\"\n          *ngFor=\"let legend of legendList\"\n          fxLayoutAlign=\"start center\"\n          fxLayoutGap=\"0.5em\"\n          (mouseenter)=\"legendEnter($event, legend)\"\n          (mouseleave)=\"legendLeave($event, legend)\"\n        >\n          <div class=\"legend-circle\" [ngStyle]=\"{'color': legend.color}\"></div>\n          <div class=\"legend-label\">{{legend.label}}</div>\n        </div>\n      </section>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex=\"100\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <div class=\"date-range\">{{dateRange}}</div>\n    </section>\n  </header>\n  <main class=\"widget-content\">\n    <section class=\"chart-section\"></section>\n  </main>\n  <footer class=\"widget-footer\" fxLayoutAlign=\"end center\">\n    <section class=\"page-section\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.5em\">\n      <div class=\"material-icons page-button first-button\" (click)=\"getFirstPage()\">first_page</div>\n      <div class=\"material-icons page-button prev-button\" (click)=\"getPrevPage()\">keyboard_arrow_left</div>\n      <div\n        class=\"page-button page-number-button\"\n        [class.big]=\"page.isBig\"\n        [class.active]=\"page.isActive\"\n        *ngFor=\"let page of pageList\"\n        (click)=\"changePage($event, page)\"\n      >\n        {{page.number}}\n      </div>\n      <div class=\"material-icons page-button next-button\" (click)=\"getNextPage()\">keyboard_arrow_right</div>\n      <div class=\"material-icons page-button last-button\" (click)=\"getLastPage()\">last_page</div>\n    </section>\n  </footer>\n</div>\n",
        "templateCss": "@import 'https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0';\n\n#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n  white-space: nowrap;\n}\n\n.widget-tab {\n  width: 100%;\n  height: 5em;\n  min-height: 30px;\n  background-color: var(--tb-service-background-2);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.tab {\n  min-width: 8em;\n  height: 100%;\n  font-size: 1.4em;\n  font-weight: 500;\n  border-right: 1px solid var(--tb-service-border-1);\n  color: var(--tb-service-font-4);\n  cursor: pointer;\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.tab.active {\n  background-color: var(--tb-service-background-0);\n  color: var(--tb-service-font-5);\n  border-top: 0.2em solid var(--tb-service-accent);\n  border-bottom: 1px solid var(--tb-service-background-0);\n  box-sizing: content-box !important;\n}\n.tab:not(.active):hover {\n  color: var(--tb-service-font-4);\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n\n.normal-label {\n  font-size: 1.2em;\n  font-weight: 500;\n  line-height: 1.17;\n  letter-spacing: -0.03em;\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n}\n\n/* widget-header-right-section */\n/* Entity Controller */\n.widget-header-right-section .entity-controller {\n  margin-right: var(--tb-config-padding);\n}\n.widget-header-right-section .mat-select {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .mat-select:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .mat-select-trigger {\n  width: 13em;\n  min-width: 130px;\n  padding: calc(9em / 14);\n  font-size: 1.4em;\n  line-height: 1;\n}\n.widget-header-right-section .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n.widget-header-right-section .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n/* Date Controller */\n.widget-header-right-section .date-controller {\n  margin-right: var(--tb-config-padding);\n}\n.widget-header-right-section .date-selector {\n  position: relative;\n  width: 13em;\n  min-width: 70px;\n  line-height: 1;\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  padding: 0.6em 0.9em;\n  cursor: pointer;\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .date-selector:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .date-selector input {\n  font-family: var(--tb-config-font-family);\n  font-size: 1.4em;\n  font-weight: 300;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  line-height: 1.3;\n}\n.select-arrow {\n  border-left: 0.5em solid transparent;\n  border-right: 0.5em solid transparent;\n  border-top: 0.5em solid;\n  color: var(--tb-service-accent);\n}\n.widget-header-right-section .start-date,\n.widget-header-right-section .end-date {\n  all: unset;\n  width: 100%;\n}\n.widget-header-right-section .hidden {\n  visibility: hidden;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n/* Action Button */\n.widget-header-right-section .action-btn {\n  all: unset;\n  line-height: 1.3;\n  cursor: pointer;\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n  white-space: nowrap;\n}\n.widget-header-right-section .text-btn {\n  padding: 0.6em 1.6em;\n  background-color: var(--tb-service-accent);\n  border: 1px solid var(--tb-service-accent);\n}\n.widget-header-right-section .text-btn:hover {\n  background-color: var(--tb-service-accent-hover);\n  border-color: var(--tb-service-accent-hover);\n}\n.widget-header-right-section .text-btn:active {\n  background-color: var(--tb-service-accent-pressed);\n  border-color: var(--tb-service-accent-pressed);\n}\n.widget-header-right-section .text-btn span {\n  font-size: 1.4em;\n  font-weight: bold;\n  color: var(--tb-service-font-0);\n}\n/*\n  Widget Sub Header Area\n*/\nheader.widget-sub-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n\n/* widget-header-left-section */\nheader.widget-sub-header .widget-header-left-section .legend-circle {\n  width: 0.6em;\n  height: 0.6em;\n  background-color: currentColor;\n}\nheader.widget-sub-header .widget-header-left-section .legend-label {\n  font-size: 1.2em;\n  color: var(--tb-service-font-4);\n}\nheader.widget-sub-header .widget-header-left-section .legend-box.hidden .legend-label {\n  text-decoration: line-through;\n}\n\n/* widget-header-right-section */\nheader.widget-sub-header .widget-header-right-section .date-range {\n  border: 1px solid var(--tb-service-border-0);\n  color: var(--tb-service-font-3);\n  font-size: 1em;\n  padding: 0.4em 0.8em;\n}\nheader.widget-sub-header .widget-header-right-section .action-btn {\n  all: unset;\n  line-height: 1;\n  cursor: pointer;\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n\n/*\n  Widget Content Area\n*/\nmain.widget-content {\n  width: 100%;\n  overflow-y: auto;\n}\nmain.widget-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\nmain.widget-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\nmain.widget-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n/* chart-section */\nsection.chart-section {\n  width: 100%;\n  max-width: 100%;\n  overflow-x: auto;\n}\nsection.chart-section::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\nsection.chart-section::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\nsection.chart-section::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n.chart-section .domain {\n  display: none;\n}\n.chart-section .tooltip:hover {\n  stroke: var(--tb-service-font-5);\n}\n.chart-section svg {\n  width: 100%;\n  height: auto;\n}\n.chart-section .chart-action {\n  cursor: pointer;\n  fill: var(--tb-service-font-3);\n  font-size: 20px;\n  transition-property: fill;\n  transition-duration: var(--tb-config-color-duration);\n}\n.chart-section .chart-action:hover {\n  fill: var(--tb-service-font-5);\n}\n.chart-section .bar-name {\n  font-family: var(--tb-config-font-family);\n  font-size: 14px;\n  fill: var(--tb-service-font-5);\n}\n.chart-section .bar-rect {\n  transition-property: transform, height;\n  transition-duration: var(--tb-config-color-duration);\n}\n.chart-section .bar-rect-active {\n  transform: translateY(2px);\n  height: 6px;\n}\n.chart-section .bar-rect-target {\n  transform: translateY(-2px);\n  height: 14px;\n}\n\n/*\n  Widget Footer Area\n*/\nfooter.widget-footer {\n  width: 100%;\n  padding: var(--tb-config-padding);\n  background-color: var(--tb-service-background-0);\n  border-top: 1px solid var(--tb-service-border-1);\n}\n\n/* page-section */\n.page-section .page-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 2em;\n  min-width: 20px;\n  height: 2em;\n  min-height: 20px;\n  font-size: 1.2em;\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  cursor: pointer;\n  color: var(--tb-service-font-4);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.page-section .first-button,\n.page-section .last-button,\n.page-section .prev-button,\n.page-section .next-button {\n  font-size: 1.6em;\n  width: 1.5em;\n  height: 1.5em;\n}\n.page-section .page-button:not(.active):hover {\n  border: 1px solid var(--tb-service-accent-hover);\n}\n.page-section .page-button:not(.active):active {\n  border: 1px solid var(--tb-service-accent-pressed);\n}\n.page-section .page-button.big-page {\n  width: 3.5em;\n  min-width: 35px;\n}\n.page-section .page-number-button.active {\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-accent);\n}\n\n@media (min-width: 960px) and (max-width: 1280px) {\n  /* chart-section */\n  .chart-section svg {\n    width: 150%;\n    height: auto;\n  }\n}\n\n@media (min-width: 600px) and (max-width: 960px) {\n  /* chart-section */\n  .chart-section svg {\n    width: 225%;\n    height: auto;\n  }\n}\n\n@media (max-width: 599px) {\n  /* chart-section */\n  .chart-section svg {\n    width: 300%;\n    height: auto;\n  }\n}\n",
        "controllerScript": "const ENTITY_TYPE = ['TENANT', 'CUSTOMER_L1', 'CUSTOMER_L2'];\nconst STATUS = {\n  stopped: { priority: 0, content: 'thingplus.state.stopped', color: 'var(--tb-service-state-stopped)' },\n  waiting: { priority: 1, content: 'thingplus.state.waiting', color: 'var(--tb-service-state-waiting)' },\n  working: { priority: 2, content: 'thingplus.state.working', color: 'var(--tb-service-state-working)' },\n  trial: { priority: 3, content: 'thingplus.state.trial', color: 'var(--tb-service-state-trial)' },\n  unconnected: { priority: 4, content: 'thingplus.state.unconnected', color: 'var(--tb-service-state-unconnected)' },\n};\nconst ANALYSIS_MAP = ['stopped', 'waiting', 'working', 'trial', 'unconnected'];\nconst OPERATION_MAP = {\n  WORK: 'working',\n  WAIT: 'waiting',\n  STOP: 'stopped',\n};\nconst STANDARD_WINDOW_SIZE = 1920 / 100;\nconst DAY_MS = 86400000;\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  makeTab();\n  getDashboardParameter();\n  initPage();\n  self.onResize();\n\n  if (!custom.isSample) {\n    // 현재 사용자의 Root 엔터티로부터 관계 트리 형성\n    custom.relations[custom.rootEntity.id.id] = {\n      id: custom.rootEntity.id,\n      name: custom.rootEntity.name,\n      parent: '',\n      child: [],\n    };\n    $scope.ownerLevel = await getCurrentLevel();\n    getCustomer([custom.relations[custom.rootEntity.id.id]]);\n  }\n\n  updateView();\n  self.ctx.detectChanges();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.onDataUpdated = function () {};\n\nself.actionSources = function () {\n  return {\n    toEdit: {\n      name: 'To Edit',\n      multiple: false,\n    },\n    viewChart: {\n      name: 'View Chart',\n      multiple: false,\n    },\n  };\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n  custom.$widgetContent = $('.widget-content', $container);\n  custom.$dateRange = $('.date-range', $container);\n  custom.$chartSection = $('.chart-section', $container);\n  custom.$widgetFooter = $('.widget-footer', $container);\n\n  $scope.tabList = [];\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n  $scope.deviceList = [\n    { name: t('thingplus.selector.entire-device'), label: t('thingplus.selector.entire-device'), value: '' },\n  ];\n  $scope.selectedCustomerL1 = '';\n  $scope.selectedCustomerL2 = '';\n  $scope.selectedDevice = '';\n  $scope.ownerLevel = 2;\n  $scope.legendList = [\n    { key: 'stopped', color: 'var(--tb-service-state-stopped)', label: t('thingplus.state.stopped') },\n    { key: 'waiting', color: 'var(--tb-service-state-waiting)', label: t('thingplus.state.waiting') },\n    { key: 'working', color: 'var(--tb-service-state-working)', label: t('thingplus.state.working') },\n    { key: 'trial', color: 'var(--tb-service-state-trial)', label: t('thingplus.state.trial') },\n    { key: 'unconnected', color: 'var(--tb-service-state-unconnected)', label: t('thingplus.state.unconnected') },\n  ];\n\n  // Define Normal Variables\n  custom.relations = {};\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.rootEntity = custom.ownerDatasource.entity;\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.hiddenDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.ownerDatasource.entityAliasId);\n  custom.mainDatasources = self.ctx.datasources.filter(\n    x => x.entityAliasId !== custom.ownerDatasource.entityAliasId && x.entityType == 'DEVICE'\n  );\n  custom.originDataKeys = self.ctx.defaultSubscription.configuredDatasources[1].dataKeys;\n  custom.targetDatasources = [];\n  custom.t = t;\n  custom.ymdhms = t('thingplus.time-format.ymdhms');\n  custom.ymdhm = t('thingplus.time-format.ymdhm');\n  custom.ymd = t('thingplus.time-format.ymd');\n  custom.currentPage = 1;\n  custom.countPerPage = 10;\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  custom.widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (custom.widgetFontSize < 6.25) {\n    custom.widgetFontSize = 6.25;\n  }\n\n  let now = moment().valueOf();\n  custom.endTs = moment(now).valueOf();\n  custom.startTs = moment(custom.endTs).subtract(7, 'days').valueOf();\n  custom.analysisEndTs = moment(custom.endTs).subtract(1, 'hours').startOf('hours').valueOf();\n  custom.realDataNeeded = true;\n  $scope.dateRange = `${moment(custom.startTs).format(custom.ymdhms)} ~ ${moment(custom.endTs).format(custom.ymdhms)}`;\n  $scope.startDate = moment(custom.startTs).toDate();\n  $scope.endDate = moment(custom.endTs).toDate();\n  $scope.viewStartDate = moment(custom.startTs).format(custom.ymd);\n  $scope.viewEndDate = moment(custom.endTs).format(custom.ymd);\n  $scope.nowDate = moment(custom.endTs).toDate();\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(t(self.ctx.widget.config.title));\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope } = self.ctx;\n  $scope.selectTab = function (e) {\n    let state = e || 'default';\n    let param = custom.dashboardParams || {};\n    self.ctx.stateController.updateState(state, param, null);\n  };\n  $scope.setCustomerL1 = function (e) {\n    $scope.selectedCustomerL1 = e;\n    $scope.selectedCustomerL2 = '';\n    $scope.selectedDevice = '';\n    changeCustomerL2List();\n    changeDeviceList();\n  };\n  $scope.setCustomerL2 = function (e) {\n    $scope.selectedCustomerL2 = e;\n    $scope.selectedDevice = '';\n    changeDeviceList();\n  };\n  $scope.setDevice = function (e) {\n    $scope.selectedDevice = e;\n  };\n  $scope.search = function (e) {\n    updateDashboardState();\n  };\n  $scope.setStartDate = function (e) {\n    $scope.startDate = e;\n    $scope.viewStartDate = moment(e).format(custom.ymd);\n  };\n  $scope.setEndDate = function (e) {\n    $scope.endDate = e;\n    $scope.viewEndDate = moment(e).format(custom.ymd);\n  };\n  $scope.openFilter = function (e) {\n    let descriptor = self.ctx.actionsApi.getActionDescriptors('filterAction')[0];\n    self.ctx.actionsApi.handleWidgetAction(\n      {},\n      descriptor,\n      custom.ownerDatasource.entity.id,\n      custom.ownerDatasource.entityName,\n      {},\n      custom.ownerDatasource.entityLabel\n    );\n  };\n  $scope.legendEnter = function (e, d) {\n    $(`.bar-rect`).addClass('bar-rect-active');\n    $(`.bar-rect-${d.key}`).removeClass('bar-rect-active');\n    $(`.bar-rect-${d.key}`).addClass('bar-rect-target');\n  };\n  $scope.legendLeave = function (e, d) {\n    $(`.bar-rect`).removeClass('bar-rect-active');\n    $(`.bar-rect`).removeClass('bar-rect-target');\n  };\n  $scope.getPrevPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage--;\n      initPage();\n      updateView();\n    }\n  };\n  $scope.getNextPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage++;\n      initPage();\n      updateView();\n    }\n  };\n  $scope.getFirstPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage = 1;\n      initPage();\n      updateView();\n    }\n  };\n  $scope.getLastPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage = custom.totalPage;\n      initPage();\n      updateView();\n    }\n  };\n  $scope.changePage = function (e, page) {\n    if (!page.isActive) {\n      custom.currentPage = page.number;\n      initPage();\n      updateView();\n    }\n  };\n}\n\n// 대시보드 상태 탭 생성\nfunction makeTab() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return;\n  $scope.tabList = [];\n  for (let i in self.ctx.stateController.statesValue) {\n    $scope.tabList.push({\n      label: 'thingplus.menu.' + i,\n      id: i,\n      isActive: i == self.ctx.stateController.stateValue,\n    });\n  }\n}\n\nfunction getDashboardParameter() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return {};\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n  if (custom.dashboardParams) {\n    if (custom.dashboardParams.customerL1) {\n      $scope.selectedCustomerL1 = custom.dashboardParams.customerL1.entityId.id;\n    }\n    if (custom.dashboardParams.customerL2) {\n      $scope.selectedCustomerL2 = custom.dashboardParams.customerL2.entityId.id;\n    }\n    if (custom.dashboardParams.entityId && custom.dashboardParams.entityId.entityType == 'DEVICE') {\n      $scope.selectedDevice = custom.dashboardParams.entityId.id;\n    }\n    if (custom.dashboardParams.startTs) {\n      custom.startTs = custom.dashboardParams.startTs;\n      $scope.startDate = moment(custom.startTs).toDate();\n      $scope.viewStartDate = moment(custom.startTs).format(custom.ymd);\n    }\n    if (custom.dashboardParams.endTs) {\n      custom.endTs = moment(custom.dashboardParams.endTs).endOf('day').valueOf();\n      if (custom.endTs > moment().valueOf()) {\n        custom.endTs = moment().valueOf();\n      }\n      $scope.endDate = moment(custom.endTs).toDate();\n      $scope.viewEndDate = moment(custom.endTs).format(custom.ymd);\n      if (custom.endTs > moment().subtract(1, 'hours').startOf('hours').valueOf()) {\n        custom.realDataNeeded = true;\n        custom.analysisEndTs = moment(custom.endTs).subtract(1, 'hours').startOf('hours').valueOf();\n      } else {\n        custom.realDataNeeded = false;\n        custom.analysisEndTs = custom.endTs;\n      }\n    }\n    $scope.dateRange = `${moment(custom.startTs).format(custom.ymdhms)} ~ ${moment(custom.endTs).format(\n      custom.ymdhms\n    )}`;\n    self.ctx.detectChanges();\n  }\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n    if (self.ctx.width < 600) {\n      originWidth = 600;\n    }\n  }\n\n  custom.widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (custom.widgetFontSize < 6.25) {\n    custom.widgetFontSize = 6.25;\n  }\n  custom.$widget.css('font-size', `${custom.widgetFontSize}px`);\n\n  // Header Height를 제외한 영역을 Main의 Height로 설정\n  let headerHeight = custom.$widgetHeader.outerHeight(true);\n  let footerHeight = custom.$widgetFooter.outerHeight(true);\n  custom.$widgetContent.css('height', `calc(100% - ${headerHeight + footerHeight}px)`);\n\n  self.ctx.detectChanges();\n}\n\n// 페이지에 맞는 데이터 출력 및 페이지 표시\nfunction initPage() {\n  let { custom, $scope } = self.ctx;\n  custom.totalPage = Math.ceil(custom.mainDatasources.length / custom.countPerPage);\n  // 현재 페이지 기준 왼쪽이 5개 오른쪽이 4개가 되도록\n  custom.startPage = custom.currentPage - 5;\n  // 6번까지는 왼쪽이 5개 이하이므로 시작을 1로 고정\n  if (custom.currentPage <= 6) {\n    custom.startPage = 1;\n  }\n  // 마지막에서 5칸 아래페이지 부터는 오른쪽이 4개 이하이므로 시작을 마지막에서 9을 뺀것으로 고정\n  if (custom.totalPage >= 10 && custom.currentPage > custom.totalPage - 5) {\n    custom.startPage = custom.totalPage - 9;\n  }\n  custom.endPage = custom.startPage + 9;\n  // 끝 페이지가 총 페이지보다 크면 총페이지를 끝 페이지로\n  if (custom.endPage > custom.totalPage) {\n    custom.endPage = custom.totalPage;\n  }\n\n  // 페이지 리스트 구성\n  $scope.pageList = [];\n  for (let i = custom.startPage; i <= custom.endPage; i++) {\n    $scope.pageList.push({\n      number: i,\n      isBig: i > 99,\n      isActive: custom.currentPage == i,\n    });\n  }\n\n  custom.startIndex = (custom.currentPage - 1) * custom.countPerPage;\n  custom.endIndex = custom.currentPage * custom.countPerPage - 1;\n  // 끝 페이지가 데이터 소스의 길이보다 많으면 데이터 소스의 길이로 변경\n  if (custom.endIndex > custom.mainDatasources.length - 1) {\n    custom.endIndex = custom.mainDatasources.length - 1;\n  }\n  custom.targetDatasources = custom.mainDatasources.slice(custom.startIndex, custom.endIndex + 1);\n}\n\nasync function getCurrentLevel() {\n  let { custom } = self.ctx;\n  if (custom.rootEntity.id.entityType == 'TENANT') {\n    return 0;\n  } else {\n    let result = await self.ctx.attributeService\n      .getEntityAttributes(custom.rootEntity.id, 'SERVER_SCOPE', ['customerType'])\n      .toPromise();\n    if (result && result[0]) {\n      if (result[0].value == ENTITY_TYPE[1]) {\n        return 1;\n      } else {\n        return 2;\n      }\n    }\n  }\n}\n\nfunction getCustomer(entities) {\n  let { custom } = self.ctx;\n  let promises = [];\n  if (entities.length > 0) {\n    for (let i = 0; i < entities.length; i++) {\n      promises.push(self.ctx.entityRelationService.findInfoByFrom(entities[i].id));\n    }\n    self.ctx.rxjs.forkJoin(promises).subscribe(childs => {\n      let newChild = [];\n      for (let j = 0; j < childs.length; j++) {\n        for (let k = 0; k < childs[j].length; k++) {\n          custom.relations[childs[j][k].to.id] = {\n            id: childs[j][k].to,\n            name: childs[j][k].toName,\n            parent: entities[j],\n            child: [],\n            type: 'CUSTOMER',\n          };\n          custom.relations[entities[j].id.id].child.push(custom.relations[childs[j][k].to.id]);\n          if (childs[j][k].to.entityType === 'USER') {\n            custom.relations[childs[j][k].to.id].type = 'USER';\n          }\n          if (childs[j][k].to.entityType === 'DEVICE') {\n            custom.relations[childs[j][k].to.id].type = 'DEVICE';\n          }\n          if (childs[j][k].to.entityType === 'ASSET') {\n            custom.relations[childs[j][k].to.id].type = 'ASSET';\n          }\n          if (childs[j][k].to.entityType === 'CUSTOMER') {\n            newChild.push(custom.relations[childs[j][k].to.id]);\n          }\n        }\n      }\n      getCustomer(newChild);\n    });\n  } else {\n    distributeLevel();\n  }\n}\n\n// hierarchy 레벨에 따라 배열에 따로 저장\nfunction distributeLevel() {\n  let { custom, $scope } = self.ctx;\n  let depth = $scope.ownerLevel;\n  let root = custom.relations[custom.rootEntity.id.id];\n  root.type = ENTITY_TYPE[depth];\n  for (let i in root.child) {\n    if (root.child[i].type == 'CUSTOMER') {\n      root.child[i].type = ENTITY_TYPE[depth + 1];\n    }\n    for (let j in root.child[i].child) {\n      if (root.child[i].child[j].type == 'CUSTOMER') {\n        root.child[i].child[j].type = ENTITY_TYPE[depth + 2];\n      }\n    }\n  }\n  custom.customerL1List = [];\n  custom.customerL2List = [];\n  custom.deviceList = [];\n\n  for (let i in custom.relations) {\n    if (custom.relations[i].type == ENTITY_TYPE[1]) {\n      custom.customerL1List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[2]) {\n      custom.customerL2List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == 'DEVICE') {\n      custom.deviceList.push(custom.relations[i]);\n    }\n  }\n\n  getDeviceInfo();\n}\n\nfunction getDeviceInfo() {\n  let { custom, $scope } = self.ctx;\n  let observables = [];\n  custom.deviceList = [];\n  for (let i in custom.customerL2List) {\n    let customerId = custom.customerL2List[i].id.id;\n    observables.push(self.ctx.http.get(`/api/customer/${customerId}/deviceInfos?pageSize=50000&page=0`));\n  }\n\n  self.ctx.rxjs.forkJoin(observables).subscribe(devices => {\n    for (let i in devices) {\n      for (let j in devices[i].data) {\n        custom.relations[devices[i].data[j].id.id].label =\n          devices[i].data[j].label != '' ? devices[i].data[j].label : devices[i].data[j].name;\n        custom.deviceList.push(custom.relations[devices[i].data[j].id.id]);\n      }\n    }\n\n    $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n    $scope.customerL1List = $scope.customerL1List.concat(\n      custom.customerL1List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n\n    changeCustomerL2List();\n    changeDeviceList();\n    self.ctx.detectChanges();\n  });\n}\n\n// Customer L2 리스트 갱신\nfunction changeCustomerL2List() {\n  let { custom, $scope } = self.ctx;\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n\n  if ($scope.selectedCustomerL1 === '') {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n  } else {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL1)\n        .map(x => {\n          return { name: x.name, value: x.id.id };\n        })\n    );\n  }\n}\n\n// 디바이스 리스트 갱신\nfunction changeDeviceList() {\n  let { custom, $scope } = self.ctx;\n  $scope.deviceList = [];\n\n  if ($scope.selectedCustomerL2 === '') {\n    if ($scope.selectedCustomerL1 === '') {\n      $scope.deviceList = $scope.deviceList.concat(\n        custom.deviceList.map(x => {\n          return { name: x.name, label: x.label, value: x.id.id };\n        })\n      );\n    } else {\n      $scope.deviceList = $scope.deviceList.concat(\n        custom.deviceList\n          .filter(x => x.parent.parent.id.id === $scope.selectedCustomerL1)\n          .map(x => {\n            return { name: x.name, label: x.label, value: x.id.id };\n          })\n      );\n    }\n  } else {\n    $scope.deviceList = $scope.deviceList.concat(\n      custom.deviceList\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL2)\n        .map(x => {\n          return { name: x.name, label: x.label, value: x.id.id };\n        })\n    );\n  }\n  $scope.deviceList.sort((a, b) => {\n    if (a.label > b.label) return 1;\n    if (a.label < b.label) return -1;\n    return 0;\n  });\n  $scope.deviceList = [\n    { name: t('thingplus.selector.entire-device'), label: t('thingplus.selector.entire-device'), value: '' },\n  ].concat($scope.deviceList);\n}\n\nasync function updateView() {\n  let { custom, $scope } = self.ctx;\n  custom.keyDatas = [];\n  for (let i in custom.targetDatasources) {\n    custom.keyDatas.push({\n      TP_AnalysisState: [{ ts: custom.startTs, value: '4' }],\n      TP_OperationState: [],\n    });\n  }\n  let datas = await getInitialStatus();\n  for (let i in datas) {\n    for (let j in datas[i]) {\n      if (custom.keyDatas[i][j][0]) {\n        custom.keyDatas[i][j][0].value = datas[i][j][0].value;\n      }\n    }\n  }\n  let realTimeData = await getInitialRealTimeStatus();\n  for (let i in realTimeData) {\n    for (let j in realTimeData[i]) {\n      custom.keyDatas[i][j].push(realTimeData[i][j][0]);\n    }\n  }\n  let realDatas = [];\n  if (custom.realDataNeeded) {\n    realDatas = await loadRealTimeData();\n    custom.operationData = [];\n    custom.connectionData = [];\n    for (let i in realDatas) {\n      if (!custom.operationData[i]) {\n        custom.operationData[i] = [];\n      }\n      if (!custom.connectionData[i]) {\n        custom.connectionData[i] = [];\n      }\n      if (realDatas[i].TP_OperationState) {\n        custom.operationData[i] = realDatas[i].TP_OperationState.map(x => {\n          return { ts: x.ts, value: OPERATION_MAP[x.value] };\n        });\n      }\n      if (realDatas[i].TP_ConnectionState) {\n        custom.connectionData[i] = _.cloneDeep(realDatas[i].TP_ConnectionState);\n      }\n    }\n  }\n\n  loadData();\n}\n\nasync function getInitialStatus() {\n  let { custom, $scope } = self.ctx;\n  if (!custom.isSample) {\n    let keys = ['TP_AnalysisState'];\n    let promiseList = [];\n    for (let i in custom.targetDatasources) {\n      let entityId = custom.targetDatasources[i].entityId;\n      promiseList.push(\n        self.ctx.http\n          .get(\n            `/api/plugins/telemetry/DEVICE/${entityId}/values/timeseries?limit=1&agg=NONE&keys=${keys.join(\n              ','\n            )}&startTs=0&endTs=${custom.startTs}`\n          )\n          .toPromise()\n      );\n    }\n    return await Promise.all(promiseList);\n  }\n}\n\nasync function getInitialRealTimeStatus() {\n  let { custom, $scope } = self.ctx;\n  if (!custom.isSample) {\n    let keys = ['TP_OperationState'];\n    let promiseList = [];\n    for (let i in custom.targetDatasources) {\n      let entityId = custom.targetDatasources[i].entityId;\n      promiseList.push(\n        self.ctx.http\n          .get(\n            `/api/plugins/telemetry/DEVICE/${entityId}/values/timeseries?limit=1&agg=NONE&keys=${keys.join(\n              ','\n            )}&startTs=0&endTs=${custom.analysisEndTs}`\n          )\n          .toPromise()\n      );\n    }\n    return await Promise.all(promiseList);\n  }\n}\n\nasync function loadRealTimeData() {\n  let { custom, $scope } = self.ctx;\n  if (!custom.isSample) {\n    let keys = ['TP_OperationState', 'TP_ConnectionState'];\n    let promiseList = [];\n    for (let i in custom.targetDatasources) {\n      let entityId = custom.targetDatasources[i].entityId;\n      promiseList.push(\n        self.ctx.http\n          .get(\n            `/api/plugins/telemetry/DEVICE/${entityId}/values/timeseries?limit=50000&agg=NONE&keys=${keys.join(\n              ','\n            )}&startTs=${custom.analysisEndTs}&endTs=${custom.endTs}`\n          )\n          .toPromise()\n      );\n    }\n    return await Promise.all(promiseList);\n  }\n}\n\nfunction loadData() {\n  let { custom, $scope } = self.ctx;\n  let keys = custom.originDataKeys.map(x => x.name);\n  let promises = [];\n  for (let i in custom.targetDatasources) {\n    let entityId = custom.targetDatasources[i].entityId;\n    promises.push(\n      self.ctx.http.get(\n        `/api/plugins/telemetry/DEVICE/${entityId}/values/timeseries?limit=50000&agg=NONE&keys=${keys.join(\n          ','\n        )}&startTs=${custom.startTs}&endTs=${custom.endTs}`\n      )\n    );\n  }\n  self.ctx.rxjs.forkJoin(promises).subscribe(datas => {\n    custom.analysisData = [];\n    custom.modifiedData = [];\n    for (let i in datas) {\n      if (datas[i].TP_AnalysisState) {\n        custom.analysisData.push(_.cloneDeep(datas[i].TP_AnalysisState));\n      } else {\n        custom.analysisData.push([]);\n      }\n      if (!custom.modifiedData[i]) {\n        custom.modifiedData[i] = [];\n      }\n      custom.analysisData[i].push(custom.keyDatas[i].TP_AnalysisState[0]);\n\n      if (datas[i].TP_ModifiedState) {\n        custom.modifiedData[i] = _.cloneDeep(datas[i].TP_ModifiedState);\n      }\n      for (let j in custom.modifiedData[i]) {\n        custom.modifiedData[i][j] = JSON.parse(custom.modifiedData[i][j].value);\n      }\n    }\n\n    // 레이블 리스트의 틀 마련\n    custom.labelList = [];\n    for (let i in custom.targetDatasources) {\n      custom.labelList.push([]);\n    }\n\n    for (let i in custom.labelList) {\n      if (custom.realDataNeeded) {\n        let lastState = custom.keyDatas[i].TP_OperationState[0].value;\n\n        custom.operationData[i] = custom.operationData[i].concat(custom.connectionData[i]);\n        custom.operationData[i].sort((a, b) => {\n          if (a.ts == b.ts) {\n            if (b.value == 'true' || b.value == 'false') {\n              return 1;\n            } else {\n              return -1;\n            }\n          }\n          return a.ts - b.ts;\n        });\n\n        for (let j = 0; j < custom.operationData[i].length; j++) {\n          if (custom.operationData[i][j].value === 'false') {\n            custom.operationData[i][j].value = 'unconnected';\n            if (custom.operationData[i][j - 1]) {\n              lastState = custom.operationData[i][j - 1].value;\n            }\n          }\n          if (custom.operationData[i][j].value === 'true') {\n            custom.operationData[i][j].value = lastState;\n          }\n        }\n      }\n      for (let j = custom.analysisData[i].length - 1; j >= 0; j--) {\n        custom.labelList[i].push({\n          device: custom.targetDatasources[i],\n          index: j,\n          time: custom.analysisData[i][j].ts,\n          nextTime: custom.analysisData[i][j - 1] ? custom.analysisData[i][j - 1].ts : custom.analysisEndTs,\n          status: ANALYSIS_MAP[custom.analysisData[i][j].value],\n          analysis: true,\n        });\n      }\n      if (custom.realDataNeeded) {\n        // 분석 값의 마지막과 실시간 값의 처음이 같으면 분석 값의 마지막 끝 시간을 실시간 값의 처음 값의 끝 시간으로 변경\n        if (_.isNil(custom.operationData[i][0])) {\n          custom.labelList[i][custom.labelList[i].length - 1].nextTime = custom.endTs;\n        } else if (\n          custom.operationData[i][0].value ==\n          ANALYSIS_MAP[custom.analysisData[i][custom.analysisData[i].length - 1].value]\n        ) {\n          if (custom.operationData[i][1]) {\n            custom.labelList[i][custom.labelList[i].length - 1].nextTime = custom.operationData[i][1].ts;\n          } else {\n            custom.labelList[i][custom.labelList[i].length - 1].nextTime = custom.endTs;\n          }\n        } else {\n          custom.labelList[i][custom.labelList[i].length - 1].nextTime = custom.operationData[i][0].ts;\n        }\n\n        // 남은 실시간 값이 있다면 레이블 리스트에 추가\n        for (let j = 0; j < custom.operationData[i].length; j++) {\n          custom.labelList[i].push({\n            device: custom.targetDatasources[0],\n            index: j,\n            time: custom.operationData[i][j].ts,\n            nextTime: custom.operationData[i][j + 1] ? custom.operationData[i][j + 1].ts : custom.endTs,\n            status: custom.operationData[i][j].value,\n          });\n        }\n      }\n\n      for (let j = 0; j < custom.modifiedData[i].length; j++) {\n        let targetData = custom.modifiedData[i][j];\n\n        let newState = {\n          device: custom.targetDatasources[i],\n          index: 0,\n          time: targetData.startTs,\n          nextTime: targetData.endTs,\n          status: ANALYSIS_MAP[targetData.state],\n        };\n        for (let k = 0; k < custom.labelList[i].length; k++) {\n          if (targetData.startTs > custom.labelList[i][k].time && targetData.endTs < custom.labelList[i][k].nextTime) {\n            // 추가 싱테기 원본 상태 사이에 껴있는경우\n            custom.labelList[i].push({\n              device: custom.targetDatasources[i],\n              index: 0,\n              time: targetData.endTs,\n              nextTime: custom.labelList[i][k].nextTime,\n              status: custom.labelList[i][k].status,\n            });\n            custom.labelList[i][k].nextTime = targetData.startTs;\n          } else if (\n            targetData.startTs == custom.labelList[i][k].time &&\n            targetData.endTs < custom.labelList[i][k].nextTime\n          ) {\n            // 추가 상태와 원본 상태의 시작이 같은 경우 원본 상태의 시작을 추가 상태의 끝으로 변경\n            custom.labelList[i][k].time = targetData.endTs;\n            // 이전 상태와 추가 상태가 같은 경우 이전 상태는 삭제 하고 추가 상태의 시작 시간을 이전 상태의 시작 시간으로 변경\n            if (custom.labelList[i][k - 1] && custom.labelList[i][k - 1].status == targetData.state) {\n              newState.time = custom.labelList[i][k - 1].time;\n              custom.labelList[i].splice(k - 1, 1);\n            }\n          } else if (\n            targetData.startTs > custom.labelList[i][k].time &&\n            targetData.endTs == custom.labelList[i][k].nextTime\n          ) {\n            // 추가 상태와 원본 상태의 끝이 같은 경우 원본 상태의 시작을 추가 상태의 끝으로 변경\n            custom.labelList[i][k].nextTime = targetData.startTs;\n            // 다음 상태와 추가 상태가 같은 경우 다음 상태는 삭제 하고 추가 상태의 끝 시간을 다음 상태의 끝 시간으로 변경\n            if (custom.labelList[i][k + 1] && custom.labelList[i][k + 1].status == targetData.state) {\n              newState.nextTime = custom.labelList[i][k + 1].nextTime;\n              custom.labelList[i].splice(k + 1, 1);\n            }\n          } else if (\n            targetData.startTs == custom.labelList[i][k].time &&\n            targetData.endTs == custom.labelList[i][k].nextTime\n          ) {\n            custom.labelList[i].splice(k, 1);\n            k--;\n          }\n        }\n\n        custom.labelList[i].push(newState);\n        custom.labelList[i].sort((a, b) => {\n          return a.time - b.time;\n        });\n        for (let k in custom.labelList[i]) {\n          if (custom.labelList[i][k - 1] && custom.labelList[i][k].status == custom.labelList[i][k - 1].status) {\n            custom.labelList[i][k].time = custom.labelList[i][k - 1].time;\n            custom.labelList[i].splice(k - 1, 1);\n            k--;\n          }\n        }\n      }\n\n      for (let j in custom.labelList[i]) {\n        custom.labelList[i][j].index = j;\n      }\n    }\n    drawChart();\n  });\n}\n\nfunction drawChart() {\n  let { custom, $scope } = self.ctx;\n  custom.d3Config = {\n    viewWidth: 1920,\n    barHeight: 10,\n    barMargin: 30,\n    margin: {\n      top: 0,\n      right: 96,\n      bottom: 40,\n      left: 230,\n    },\n  };\n  custom.d3Config.viewHeight =\n    custom.d3Config.margin.top +\n    custom.d3Config.margin.bottom +\n    custom.targetDatasources.length * (2 * custom.d3Config.barMargin + custom.d3Config.barHeight);\n\n  custom.$chartSection.empty();\n  // svg 영역 정의\n  custom.$d3 = d3\n    .select(custom.$chartSection[0])\n    .append('svg')\n    .attr('viewBox', `0 0 ${custom.d3Config.viewWidth} ${custom.d3Config.viewHeight}`)\n    .attr('width', custom.d3Config.viewWidth)\n    .attr('height', custom.d3Config.viewHeight);\n\n  drawXAxis();\n  drawBar();\n}\n\nfunction drawXAxis() {\n  let { custom, $scope } = self.ctx;\n  let { viewWidth, viewHeight, margin } = custom.d3Config;\n  const width = viewWidth - margin.left - margin.right;\n  const height = margin.bottom;\n\n  // xAxis 그리기\n  custom.xAxis = d3\n    .scaleTime()\n    .domain(d3.extent([custom.startTs, custom.endTs]))\n    .range([0, width]);\n  custom.$xAxis = custom.$d3\n    .append('g')\n    .attr('class', 'axis')\n    .attr('transform', 'translate(' + margin.left + ', ' + (viewHeight - height) + ')')\n    .style('font-size', '12px')\n    .style('font-family', 'var(--tb-config-font-family)')\n    .style('color', 'var(--tb-service-font-4)')\n    .style('stroke-width', '0.1em')\n    .call(\n      d3\n        .axisBottom(custom.xAxis)\n        .ticks(10)\n        .tickFormat(date => formatDate(date))\n    );\n}\n\nfunction drawBar() {\n  let { custom, $scope, $container } = self.ctx;\n  let { viewWidth, barMargin, barHeight, margin } = custom.d3Config;\n  const x = custom.xAxis;\n\n  let dayLineList = [custom.startTs];\n  let interval = (_.floor((custom.endTs - custom.startTs) / (7 * DAY_MS)) + 1) * DAY_MS;\n  for (let i = custom.startTs; i < moment(custom.endTs).endOf('day').valueOf(); i += interval) {\n    if (moment(i).startOf('day').valueOf() > custom.startTs) {\n      dayLineList.push(moment(i).startOf('day').valueOf());\n    }\n  }\n  dayLineList.sort();\n\n  // 상태 변화 막대 그리기\n  for (let i in custom.targetDatasources) {\n    custom.$d3.append('g').attr('class', `bar-group-${i}`);\n\n    custom.$d3\n      .select(`.bar-group-${i}`)\n      .append('rect')\n      .attr('class', 'background')\n      .attr('width', viewWidth)\n      .attr('height', 2 * barMargin + barHeight)\n      .attr('y', margin.top + i * (2 * barMargin + barHeight))\n      .attr('fill', 'var(--tb-service-background-1)')\n      .attr('stroke', 'var(--tb-service-border-1)');\n\n    custom.$d3\n      .select(`.bar-group-${i}`)\n      .append('g')\n      .attr('class', `day-group-${i}`)\n      .selectAll('g')\n      .data(dayLineList)\n      .enter()\n      .append('rect')\n      .attr('class', 'day-line')\n      .attr('x', d => margin.left + x(d))\n      .attr('width', d => {\n        let endTs = d + interval;\n        if (endTs > custom.endTs) {\n          endTs = custom.endTs;\n        }\n        if (d == custom.startTs) {\n          endTs = moment(d)\n            .add(_.floor(interval / DAY_MS), 'days')\n            .startOf('day')\n            .valueOf();\n        }\n        return x(endTs) - x(d);\n      })\n      .attr('height', 2 * barMargin + barHeight)\n      .attr('y', margin.top + i * (2 * barMargin + barHeight))\n      .attr('fill', (d, i) => {\n        return i % 2 == 0 ? 'var(--tb-service-background-4)' : 'var(--tb-service-background-2)';\n      })\n      .attr('opacity', 0.5)\n      .attr('stroke', 'var(--tb-service-border-1)');\n\n    custom.$d3.select(`.bar-group-${i}`).append('g').attr('class', `bar-${i}`);\n    custom.$d3\n      .select(`.bar-${i}`)\n      .append('g')\n      .selectAll('g')\n      .data([custom.targetDatasources[i]])\n      .enter()\n      .append('text')\n      .text(function (d) {\n        if (d) {\n          return d.entityLabel;\n        }\n        return '';\n      })\n      .attr('class', 'bar-name')\n      .attr('width', margin.left - 40)\n      .attr('x', 20)\n      .attr('y', margin.top + i * (2 * barMargin + barHeight) + barMargin + barHeight / 2 + 4)\n      .call(dotme);\n\n    custom.$d3\n      .select(`.bar-${i}`)\n      .append('g')\n      .selectAll('g')\n      .data(custom.labelList[i])\n      .enter()\n      .append('rect')\n      .attr('class', d => `bar-rect bar-rect-${d.status} tooltip tooltip-${i}-${d.index}`)\n      .attr('fill', d => {\n        if (d.status == 'unconnected' || d.status == 'nodata') {\n          return STATUS.unconnected.color;\n        } else if (d.status == 'stopped') {\n          return STATUS.stopped.color;\n        } else if (d.status == 'waiting') {\n          return STATUS.waiting.color;\n        } else {\n          return STATUS.working.color;\n        }\n      })\n      .attr('x', d => margin.left + x(d.time))\n      .attr('y', margin.top + i * (2 * barMargin + barHeight) + barMargin)\n      .attr('width', d => x(d.nextTime) - x(d.time))\n      .attr('height', barHeight);\n\n    custom.$d3\n      .select(`.bar-${i}`)\n      .append('g')\n      .selectAll('g')\n      .data([custom.targetDatasources[i]])\n      .enter()\n      .append('text')\n      .attr('class', 'chart-action material-icons')\n      .text('edit')\n      .attr('x', viewWidth - margin.right + 22)\n      .attr('y', margin.top + i * (2 * barMargin + barHeight) + barMargin + barHeight / 2 + 10)\n      .on('click', function (e, d, i) {\n        toEdit(d);\n      });\n\n    custom.$d3\n      .select(`.bar-${i}`)\n      .append('g')\n      .selectAll('g')\n      .data([custom.targetDatasources[i]])\n      .enter()\n      .append('text')\n      .attr('class', 'chart-action material-symbols-outlined')\n      .text('earthquake')\n      .attr('x', viewWidth - margin.right + 52)\n      .attr('y', margin.top + i * (2 * barMargin + barHeight) + barMargin + barHeight / 2 + 10)\n      .on('click', function (e, d) {\n        openChart(d, i);\n      });\n\n    for (let j in custom.labelList[i]) {\n      let $content = $('<div></div>');\n      $content.css({\n        color: 'var(--tb-service-font-0)',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        lineHeight: 1.5,\n        borderRadius: `${8 / STANDARD_WINDOW_SIZE}vw`,\n        padding: `${12 / STANDARD_WINDOW_SIZE}vw`,\n      });\n\n      let startTime = moment(custom.labelList[i][j].time).format(custom.ymdhm);\n      let endTime = moment(custom.labelList[i][j].nextTime).format(custom.ymdhm);\n      let $date = $(`<div>${startTime} ~ ${endTime}</div>`);\n      $date.css({\n        textAlign: 'center',\n        fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n      });\n\n      let $description = $(`<div></div>`);\n      if (custom.labelList[i][j].status && custom.labelList[i][j].status !== '') {\n        $description.html(`(${t(STATUS[custom.labelList[i][j].status].content)})`);\n      }\n      $description.css({\n        textAlign: 'center',\n        fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n      });\n\n      $content.append($date);\n      $content.append($description);\n      $(`.tooltip-${i}-${custom.labelList[i][j].index}`, $container).tooltipster({\n        content: $content,\n        interactive: true,\n        theme: 'tooltipster-transparent',\n        trigger: 'hover',\n        delay: 200,\n      });\n    }\n  }\n}\n\nfunction formatDate(date) {\n  if (d3.timeHour(date) < date) {\n    return d3.timeFormat(t('thingplus.time-format.d3-hm'))(date);\n  } else if (d3.timeDay(date) < date) {\n    return d3.timeFormat(t('thingplus.time-format.d3-dh'))(date);\n  } else {\n    return d3.timeFormat(t('thingplus.time-format.d3-md'))(date);\n  }\n}\n\nfunction dotme(text) {\n  text.each(function () {\n    let text = d3.select(this);\n    let words = Array.from(text.text());\n\n    let ellipsis = text.text('').append('tspan').attr('class', 'elip').text('...');\n    let width = parseFloat(text.attr('width')) - ellipsis.node().getComputedTextLength();\n    let numWords = words.length;\n\n    let tspan = text.insert('tspan', ':first-child').text(words.join(''));\n    while (tspan.node().getComputedTextLength() > width && words.length) {\n      words.pop();\n      tspan.text(words.join(''));\n    }\n\n    if (words.length === numWords) {\n      ellipsis.remove();\n    }\n  });\n}\n\nfunction updateDashboardState() {\n  let { custom, $scope } = self.ctx;\n  let target,\n    param = {};\n  if ($scope.selectedDevice != '') {\n    target = custom.relations[$scope.selectedDevice];\n  } else if ($scope.selectedCustomerL2 != '') {\n    target = custom.relations[$scope.selectedCustomerL2];\n  } else if ($scope.selectedCustomerL1 != '') {\n    target = custom.relations[$scope.selectedCustomerL1];\n  }\n  if (target) {\n    param = {\n      entityId: target.id,\n      entityName: target.name,\n      entityLabel: target.label,\n    };\n  }\n  if ($scope.selectedCustomerL1 != '') {\n    let customerL1 = custom.relations[$scope.selectedCustomerL1];\n    param.customerL1 = {\n      entityId: customerL1.id,\n      entityName: customerL1.name,\n      entityLabel: customerL1.label,\n    };\n  }\n  if ($scope.selectedCustomerL2 != '') {\n    let customerL2 = custom.relations[$scope.selectedCustomerL2];\n    param.customerL2 = {\n      entityId: customerL2.id,\n      entityName: customerL2.name,\n      entityLabel: customerL2.label,\n    };\n  }\n  if ($scope.selectedDevice != '') {\n    let device = custom.relations[$scope.selectedDevice];\n    param.device = {\n      entityId: device.id,\n      entityName: device.name,\n      entityLabel: device.label,\n    };\n  }\n  param.startTs = moment($scope.startDate).startOf('day').valueOf();\n  param.endTs = moment($scope.endDate).endOf('day').valueOf();\n  if (param.endTs > moment().valueOf()) {\n    param.endTs = moment().valueOf();\n  }\n  self.ctx.stateController.updateState('state-timeline', param, null);\n  self.ctx.updateAliases();\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n\nfunction toEdit(data) {\n  let { custom, $scope } = self.ctx;\n  let descriptors = self.ctx.actionsApi.getActionDescriptors('toEdit');\n  self.ctx.actionsApi.handleWidgetAction({}, descriptors[0], data.entity.id, data.entityName, custom, data.entityLabel);\n}\n\nfunction openChart(data, index) {\n  let { custom, $scope } = self.ctx;\n  let descriptors = self.ctx.actionsApi.getActionDescriptors('viewChart');\n  data.index = index;\n  self.ctx.actionsApi.handleWidgetAction({}, descriptors[0], data.entity.id, data.entityName, data, data.entityLabel);\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.2819443009295912,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"State Timeline\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\",\"box-shadow\":\"0px 2px 10px 0 rgba(0, 0, 0, 0.04)\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"1.6em\",\"font-weight\":500,\"letter-spacing\":\"var(--tb-config-letter-spacing)\",\"color\":\"var(--tb-service-font-5)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    },
    {
      "alias": "alarm_history",
      "name": "Alarm History",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 6.5,
        "sizeY": 4,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\">\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\">title</div>\n    </section>\n  </header>\n  <main class=\"widget-content\">\n    <section class=\"table-section\">\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th *ngFor=\"let th of thList\" (click)=\"changeSort($event, th)\" [ngClass]=\"th.order\">\n              <div class=\"th-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <span class=\"th-label\">{{th.label}}</span>\n                <i class=\"th-sort material-icons\">arrow_downward</i>\n              </div>\n            </th>\n            <th *ngIf=\"hasCellAction\" [ngStyle]=\"{'width': actionSize}\"></th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tr of trList\">\n            <td\n              *ngFor=\"let td of tr.tdList\"\n              [ngStyle]=\"td.style\"\n              [innerHTML]=\"td.value\"\n              (click)=\"td.action && td.action($event)\"\n            ></td>\n            <td *ngIf=\"hasCellAction\" class=\"action\">\n              <div class=\"cell-action-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <i\n                  *ngFor=\"let cellAction of cellActionList\"\n                  class=\"material-icons cell-action\"\n                  [ngClass]=\"{'disabled': cellAction.name == 'Ack' && tr.acked == 'disabled', 'acked': cellAction.name == 'Ack' && tr.acked == 'acked' }\"\n                  (click)=\"cellAction.action($event, tr.index, tr)\"\n                >\n                  {{cellAction.icon}}\n                </i>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </section>\n  </main>\n  <footer class=\"widget-footer\" fxLayoutAlign=\"end center\">\n    <section class=\"page-section\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.5em\">\n      <div class=\"material-icons page-button first-button\" (click)=\"getFirstPage()\">first_page</div>\n      <div class=\"material-icons page-button prev-button\" (click)=\"getPrevPage()\">keyboard_arrow_left</div>\n      <div\n        class=\"page-button page-number-button\"\n        [class.big]=\"page.isBig\"\n        [class.active]=\"page.isActive\"\n        *ngFor=\"let page of pageList\"\n        (click)=\"changePage($event, page)\"\n      >\n        {{page.number}}\n      </div>\n      <div class=\"material-icons page-button next-button\" (click)=\"getNextPage()\">keyboard_arrow_right</div>\n      <div class=\"material-icons page-button last-button\" (click)=\"getLastPage()\">last_page</div>\n    </section>\n  </footer>\n</div>\n",
        "templateCss": "@import 'https://fonts.googleapis.com/icon?family=Material+Icons+Outlined';\n\n#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n}\n\n/*\n  Widget Content Area\n*/\nmain.widget-content {\n  width: 100%;\n}\n\n/* table-section */\n.table-section {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n}\n.table-section::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n.table-section::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n.table-section::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n.table-section .table {\n  min-width: 100%;\n  border-spacing: 0px;\n  box-sizing: border-box;\n  table-layout: fixed;\n  border-collapse: collapse;\n  white-space: nowrap;\n}\n.table-section thead tr {\n  background-color: var(--tb-service-background-1);\n  border-top: 1px solid var(--tb-service-border-1);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.table-section th {\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  padding: 1.68em;\n  text-align: left;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 1em;\n  line-height: 1;\n}\n.table-section th .th-label {\n  font-size: 1.2em;\n  margin-right: 0.5em;\n}\n.table-section th .th-sort {\n  font-size: 1.4em;\n  opacity: 0;\n  vertical-align: top;\n  transition-property: transform, opacity;\n  transition-duration: var(--tb-config-color-duration);\n  color: var(--tb-service-accent);\n}\n.table-section th:not(.DESC):not(.ASC):hover .th-sort {\n  opacity: 0.4;\n}\n.table-section th.DESC .th-sort {\n  opacity: 1;\n  transform: rotate(0deg);\n}\n.table-section th.ASC .th-sort {\n  opacity: 1;\n  transform: rotate(180deg);\n}\n.table-section tbody tr {\n  border-bottom: 1px solid var(--tb-service-border-1);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section tbody tr:nth-child(odd) {\n  background-color: var(--tb-service-background-0);\n}\n.table-section tbody tr:nth-child(even) {\n  background-color: var(--tb-service-background-1);\n}\n.table-section td {\n  line-height: 1;\n}\n.table-section td:not(.action) {\n  color: var(--tb-service-font-4);\n  padding: 1.2em;\n  font-size: 1.4em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  user-select: text;\n}\n.table-section tbody tr:hover {\n  background-color: var(--tb-service-background-2);\n}\n.table-section td.action {\n  font-size: 1em;\n  padding: 0em 1.68em;\n  text-overflow: initial;\n}\n.table-section .cell-action {\n  font-size: 2em;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section .cell-action.disabled {\n  color: var(--tb-service-font-1);\n  opacity: 0.5;\n  cursor: default;\n}\n.table-section .cell-action.acked {\n  color: var(--tb-service-accent);\n  cursor: default;\n}\n.table-section .cell-action:not(.disabled):not(.acked):hover {\n  color: var(--tb-service-font-5);\n}\n.table-section .cell-action.active:not(.disabled) {\n  color: var(--tb-service-accent);\n}\n.table-section .activate-switch {\n  position: relative;\n  width: 3.6em;\n  height: 1.6em;\n  border-radius: 0.8em;\n  background-color: var(--tb-service-font-3);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n  margin: auto;\n  cursor: pointer;\n}\n.table-section .activate-switch.active {\n  background-color: var(--tb-service-accent);\n}\n.table-section .activate-switch .ball {\n  position: absolute;\n  top: 50%;\n  left: 0.8em;\n  transform: translate(-50%, -50%);\n  width: 1.2em;\n  height: 1.2em;\n  border-radius: 0.6em;\n  background-color: var(--tb-service-background-0);\n  transition-property: left;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section .activate-switch.active .ball {\n  left: calc(100% - 0.8em);\n}\n.severity-box {\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  gap: 0.5em;\n}\n.severity-box i {\n  font-size: 1.4em;\n}\n.severity-box.CRITICAL i {\n  color: var(--tb-alarm-critical);\n}\n.severity-box.MAJOR i {\n  color: var(--tb-alarm-major);\n}\n.severity-box.MINOR i {\n  color: var(--tb-alarm-minor);\n}\n.severity-box.WARNING i {\n  color: var(--tb-alarm-warning);\n}\n.severity-box.INTERMIDIATE i {\n  color: var(--tb-alarm-intermidiate);\n}\n\n/*\n  Widget Footer Area\n*/\nfooter.widget-footer {\n  width: 100%;\n  padding: var(--tb-config-padding);\n}\n\n/* page-section */\n.page-section .page-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 2em;\n  min-width: 20px;\n  height: 2em;\n  min-height: 20px;\n  font-size: 1.2em;\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  cursor: pointer;\n  color: var(--tb-service-font-4);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.page-section .first-button,\n.page-section .last-button,\n.page-section .prev-button,\n.page-section .next-button {\n  font-size: 1.6em;\n  width: 1.5em;\n  height: 1.5em;\n}\n.page-section .page-button:not(.active):hover {\n  border: 1px solid var(--tb-service-accent-hover);\n}\n.page-section .page-button:not(.active):active {\n  border: 1px solid var(--tb-service-accent-pressed);\n}\n.page-section .page-button.big-page {\n  width: 3.5em;\n  min-width: 35px;\n}\n.page-section .page-number-button.active {\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-accent);\n}\n",
        "controllerScript": "const ANALYSIS_MAP = ['stopped', 'waiting', 'working'];\nconst OPERATION_MAP = {\n  STOP: 'stopped',\n  WAIT: 'waiting',\n  WORK: 'working',\n};\n\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  getDashboardParameter();\n  makeHead();\n  self.onResize();\n  if (!custom.isSample) {\n    processData();\n  } else {\n    custom.mainData = [];\n  }\n\n  initPage();\n  makeBody();\n  self.onResize();\n  sortData();\n  insertData();\n  self.ctx.detectChanges();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.actionSources = function () {\n  return {\n    actionCellButton: {\n      name: 'widget-action.action-cell-button',\n      multiple: true,\n    },\n  };\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n  custom.$widgetContent = $('.widget-content', $container);\n  custom.$table = $('.table', $container);\n  custom.$theadTr = $('.table thead tr', $container);\n  custom.$tbody = $('.table tbody', $container);\n  custom.$widgetFooter = $('.widget-footer', $container);\n\n  // Define Scope Variables\n  $scope.thList = [];\n  $scope.trList = [];\n  $scope.pageList = [];\n  $scope.cellActionList = self.ctx.actionsApi.getActionDescriptors('actionCellButton').map(x => {\n    return { name: x.name, icon: x.icon, action: (e, i, tr) => handleCellAction(x, i, tr) };\n  });\n  $scope.hasCellAction = $scope.cellActionList.length > 0;\n  $scope.actionSize = `${$scope.cellActionList.length * 2 + 3.36 + ($scope.cellActionList.length - 1) * 0.5}em`;\n\n  // Define Normal Variables\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.hiddenDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.ownerDatasource.entityAliasId);\n  custom.mainDatasources = self.ctx.datasources.filter(\n    x => x.entityAliasId !== custom.ownerDatasource.entityAliasId && x.entityType == 'DEVICE'\n  );\n  custom.originDataKeys = self.ctx.defaultSubscription.configuredDatasources[1].dataKeys.filter(\n    x => x.settings.hidden !== true\n  );\n  custom.selectedIndex = 0;\n  custom.currentPage = 1;\n  custom.countPerPage = 10;\n  custom.t = t;\n  let now = moment().valueOf();\n  custom.startTs = moment(now).subtract(7, 'days').valueOf();\n  custom.endTs = now;\n  custom.mainData = [];\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom, $scope } = self.ctx;\n  custom.$widgetTitle.html(t(self.ctx.widget.config.title));\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope } = self.ctx;\n  $scope.getPrevPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage--;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getNextPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage++;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getFirstPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage = 1;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getLastPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage = custom.totalPage;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.changePage = function (e, page) {\n    if (!page.isActive) {\n      custom.currentPage = page.number;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.changeSort = function (e, th) {\n    if (th.isAction) return;\n    if (th.index == custom.selectedIndex) {\n      if (th.order != 'DESC') {\n        $scope.thList[th.index].order = 'DESC';\n      } else {\n        $scope.thList[th.index].order = 'ASC';\n      }\n    } else {\n      $scope.thList.forEach(x => (x.order = ''));\n      custom.selectedIndex = th.index;\n      $scope.thList[th.index].order = 'DESC';\n    }\n    initPage();\n    makeBody();\n    sortData();\n    insertData();\n  };\n}\n\nfunction getDashboardParameter() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) {\n    custom.dashboardParams = {};\n    return;\n  }\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n  if (custom.dashboardParams) {\n    if (custom.dashboardParams.startTs) {\n      custom.startTs = custom.dashboardParams.startTs;\n    }\n    if (custom.dashboardParams.endTs) {\n      custom.endTs = custom.dashboardParams.endTs;\n    }\n  }\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  let widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (widgetFontSize < 6.25) {\n    widgetFontSize = 6.25;\n  }\n  custom.$widget.css('font-size', `${widgetFontSize}px`);\n\n  // Header와 Footer Height를 제외한 영역을 Main의 Height로 설정\n  let headerHeight = custom.$widgetHeader.outerHeight(true);\n  let footerHeight = custom.$widgetFooter.outerHeight(true);\n  custom.$widgetContent.css('height', `calc(100% - ${headerHeight + footerHeight}px)`);\n}\n\n// 헤더 부분 생성\nfunction makeHead() {\n  let { custom, $scope } = self.ctx;\n  $scope.thList = [];\n  for (let i in custom.originDataKeys) {\n    $scope.thList.push({\n      index: i,\n      key: custom.originDataKeys[i].name,\n      label: t(custom.originDataKeys[i].label),\n      order: custom.selectedIndex == i ? 'DESC' : '',\n    });\n  }\n}\n\nasync function processData() {\n  let { custom } = self.ctx;\n  let analysisEndTs = moment(custom.endTs).subtract(1, 'hours').startOf('hours').valueOf();\n  let observables = [];\n  for (let i in custom.mainDatasources) {\n    observables.push(\n      self.ctx.rxjs.forkJoin([\n        loadAttributes(custom.mainDatasources[i].entity.id, 'customerL1Name,customerL2Name'),\n        loadTimeseries(custom.mainDatasources[i].entity.id, custom.startTs, analysisEndTs, 'TP_AnalysisState'),\n        loadTimeseries(custom.mainDatasources[i].entity.id, analysisEndTs, custom.endTs, 'TP_OperationState'),\n        loadAlarm(custom.mainDatasources[i].entity.id, custom.startTs, custom.endTs),\n      ])\n    );\n  }\n\n  custom.loadedDatas = await self.ctx.rxjs.forkJoin(observables).toPromise();\n  console.log(custom.loadedDatas);\n  custom.mainData = [];\n  for (let i in custom.loadedDatas) {\n    custom.mainData = custom.mainData.concat(preprocessData(custom.loadedDatas[i]));\n  }\n  custom.mainData.sort((a, b) => a.createdTime - b.createdTime);\n\n  initPage();\n  makeBody();\n  sortData();\n  insertData();\n  // self.onResize();\n  self.ctx.detectChanges();\n}\n\nfunction loadAttributes(entityId, keys) {\n  return self.ctx.http.get(\n    `/api/plugins/telemetry/${entityId.entityType}/${entityId.id}/values/attributes/SERVER_SCOPE?keys=${keys}`\n  );\n}\n\nfunction loadTimeseries(entityId, startTs, endTs, keys) {\n  return self.ctx.http.get(\n    `/api/plugins/telemetry/${entityId.entityType}/${entityId.id}/values/timeseries?keys=${keys}&startTs=${startTs}&endTs=${endTs}&limit=50000&agg=NONE&interval=0&orderBy=ASC&useStrictDataTypes=true`\n  );\n}\n\nfunction loadAlarm(entityId, startTime, endTime) {\n  return self.ctx.http.get(\n    `/api/alarm/${entityId.entityType}/${entityId.id}?searchStatus=ANY&pageSize=50000&page=0&startTime=${startTime}&endTime=${endTime}&fetchOriginator=true`\n  );\n}\n\nfunction preprocessData(loadedDatas) {\n  let { custom } = self.ctx;\n  let result = [];\n  let customerL1NameIndex = loadedDatas[0].findIndex(x => x.key == 'customerL1Name');\n  let customerL1Name = '';\n  if (customerL1NameIndex != -1) {\n    customerL1Name = loadedDatas[0][customerL1NameIndex].value;\n  }\n  let customerL2NameIndex = loadedDatas[0].findIndex(x => x.key == 'customerL2Name');\n  let customerL2Name = '';\n  if (customerL2NameIndex != -1) {\n    customerL2Name = loadedDatas[0][customerL2NameIndex].value;\n  }\n\n  if (loadedDatas[1].TP_AnalysisState) {\n    loadedDatas[1].TP_AnalysisState = loadedDatas[1].TP_AnalysisState.filter(x => x.value <= 2);\n    for (let i in loadedDatas[1].TP_AnalysisState) {\n      result.push({\n        createdTime: loadedDatas[1].TP_AnalysisState[i].ts,\n        customerL1Name: customerL1Name,\n        customerL2Name: customerL2Name,\n        originatorLabel: custom.mainDatasources[0].entityLabel,\n        category: 'state',\n        type: ANALYSIS_MAP[loadedDatas[1].TP_AnalysisState[i].value],\n        severity: 'INTERMIDIATE',\n        ackTs: 0,\n        clearTs: 0,\n      });\n    }\n  }\n  if (loadedDatas[2].TP_OperationState) {\n    for (let i in loadedDatas[2].TP_OperationState) {\n      result.push({\n        createdTime: loadedDatas[2].TP_OperationState[i].ts,\n        customerL1Name: customerL1Name,\n        customerL2Name: customerL2Name,\n        originatorLabel: custom.mainDatasources[0].entityLabel,\n        category: 'state',\n        type: OPERATION_MAP[loadedDatas[2].TP_OperationState[i].value],\n        severity: 'INTERMIDIATE',\n        ackTs: 0,\n        clearTs: 0,\n      });\n    }\n  }\n  for (let i in loadedDatas[3].data) {\n    result.push({\n      createdTime: loadedDatas[3].data[i].createdTime,\n      customerL1Name: customerL1Name,\n      customerL2Name: customerL2Name,\n      originatorLabel: custom.mainDatasources[0].entityLabel,\n      originator: custom.mainDatasources[0].entity.id,\n      category: loadedDatas[3].data[i].details.category,\n      type: loadedDatas[3].data[i].type,\n      severity: loadedDatas[3].data[i].severity,\n      ackTs: loadedDatas[3].data[i].ackTs,\n      clearTs: loadedDatas[3].data[i].clearTs,\n      id: loadedDatas[3].data[i].id,\n    });\n  }\n  return result;\n}\n\n// 페이지에 맞는 데이터 출력 및 페이지 표시\nfunction initPage() {\n  let { custom, $scope } = self.ctx;\n  custom.totalPage = Math.ceil(custom.mainData.length / custom.countPerPage);\n  // 현재 페이지 기준 왼쪽이 5개 오른쪽이 4개가 되도록\n  custom.startPage = custom.currentPage - 5;\n  // 6번까지는 왼쪽이 5개 이하이므로 시작을 1로 고정\n  if (custom.currentPage <= 6) {\n    custom.startPage = 1;\n  }\n  // 마지막에서 5칸 아래페이지 부터는 오른쪽이 4개 이하이므로 시작을 마지막에서 9을 뺀것으로 고정\n  if (custom.totalPage >= 10 && custom.currentPage > custom.totalPage - 5) {\n    custom.startPage = custom.totalPage - 9;\n  }\n  custom.endPage = custom.startPage + 9;\n  // 끝 페이지가 총 페이지보다 크면 총페이지를 끝 페이지로\n  if (custom.endPage > custom.totalPage) {\n    custom.endPage = custom.totalPage;\n  }\n\n  // 페이지 리스트 구성\n  $scope.pageList = [];\n  for (let i = custom.startPage; i <= custom.endPage; i++) {\n    $scope.pageList.push({\n      number: i,\n      isBig: i > 99,\n      isActive: custom.currentPage == i,\n    });\n  }\n\n  custom.startIndex = (custom.currentPage - 1) * custom.countPerPage;\n  custom.endIndex = custom.currentPage * custom.countPerPage - 1;\n  // 끝 페이지가 데이터 소스의 길이보다 많으면 데이터 소스의 길이로 변경\n  if (custom.endIndex > custom.mainData.length - 1) {\n    custom.endIndex = custom.mainData.length - 1;\n  }\n}\n\n// 테이블 바디 생성\nfunction makeBody() {\n  let { custom, $scope } = self.ctx;\n  $scope.trList = [];\n  // 현재 페이지의 데이터 수 만큼 행 출력\n  for (let i = custom.startIndex; i <= custom.endIndex; i++) {\n    let tdList = [];\n    for (let j in custom.originDataKeys) {\n      tdList.push({ index: j, name: custom.originDataKeys[j].name, style: '', value: '' });\n    }\n    $scope.trList.push({\n      index: i,\n      tdList: tdList,\n      acked: '',\n    });\n  }\n}\n\n// 데이터 재 정렬\nfunction sortData() {\n  let { custom, $scope } = self.ctx;\n  let selectedKey = $scope.thList[custom.selectedIndex].key;\n  let selectedOrder = $scope.thList[custom.selectedIndex].order;\n\n  custom.mainData.sort((a, b) => {\n    if (selectedOrder == 'DESC') {\n      if (a[selectedKey] > b[selectedKey]) return -1;\n      if (a[selectedKey] < b[selectedKey]) return 1;\n      return 0;\n    } else {\n      if (a[selectedKey] > b[selectedKey]) return 1;\n      if (a[selectedKey] < b[selectedKey]) return -1;\n      return 0;\n    }\n  });\n}\n\n// 데이터 삽입\nfunction insertData() {\n  let { custom, $scope } = self.ctx;\n  for (let i = custom.startIndex; i <= custom.endIndex; i++) {\n    for (let j in custom.originDataKeys) {\n      let key = custom.originDataKeys[j].name;\n      let data = custom.mainData[i][key];\n\n      if ((key == 'type' && data == 'working') || data == 'waiting' || data == 'stopped') {\n        $scope.trList[i - custom.startIndex].acked = 'disabled';\n      }\n      if (key == 'ackTs' && data != 0) {\n        $scope.trList[i - custom.startIndex].acked = 'acked';\n      }\n\n      if (custom.originDataKeys[j].settings.useCellStyleFunction) {\n        // Apply cell style function\n        try {\n          let styleFunction = new Function('value', 'ctx', custom.originDataKeys[j].settings.cellStyleFunction);\n          let style = styleFunction(data, self.ctx);\n          $scope.trList[i - custom.startIndex].tdList[j].style = style;\n        } catch (err) {\n          console.error(err);\n        }\n      }\n      // Apply cell content function\n      if (custom.originDataKeys[j].settings.useCellContentFunction) {\n        try {\n          let contentFunction = new Function('value', 'ctx', custom.originDataKeys[j].settings.cellContentFunction);\n          data = contentFunction(data, self.ctx);\n        } catch (err) {\n          console.error(err);\n        }\n      }\n\n      $scope.trList[i - custom.startIndex].tdList[j].value = data;\n    }\n  }\n}\n\nfunction handleCellAction(descriptor, index, tr) {\n  let { custom, $scope } = self.ctx;\n  if (descriptor.name == 'Ack' && tr.acked != '') {\n    return;\n  }\n  let realIndex = $scope.trList[index - custom.startIndex].index;\n  self.ctx.actionsApi.handleWidgetAction(\n    {},\n    descriptor,\n    custom.mainData[realIndex].id,\n    '',\n    custom.mainData[realIndex],\n    ''\n  );\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"title\": \"DataKeySettings\",\n    \"properties\": {\n      \"hidden\": {\n        \"title\": \"Hide from table\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"useCellStyleFunction\": {\n        \"title\": \"Use cell style function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellStyleFunction\": {\n        \"title\": \"Cell style function: f(value, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      },\n      \"useCellContentFunction\": {\n        \"title\": \"Use cell content function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellContentFunction\": {\n        \"title\": \"Cell content function: f(value, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      },\n      \"useCellActionFunction\": {\n        \"title\": \"Use cell action function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellActionFunction\": {\n        \"title\": \"Cell action function: f(value, tr, td, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      }\n    },\n    \"required\": []\n  },\n  \"form\": [\n    \"hidden\",\n    \"useCellStyleFunction\",\n    {\n      \"key\": \"cellStyleFunction\",\n      \"type\": \"javascript\"\n    },\n    \"useCellContentFunction\",\n    {\n      \"key\": \"cellContentFunction\",\n      \"type\": \"javascript\"\n    },\n    \"useCellActionFunction\",\n    {\n      \"key\": \"cellActionFunction\",\n      \"type\": \"javascript\"\n    }\n  ]\n}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#4caf50\",\"settings\":{\"hidden\":false,\"useCellStyleFunction\":false,\"cellStyleFunction\":\"\",\"useCellContentFunction\":false,\"cellContentFunction\":\"\"},\"_hash\":0.660664117541435,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"Alarm History\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\",\"box-shadow\":\"0px 2px 10px 0 rgba(0, 0, 0, 0.04)\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"1.6em\",\"font-weight\":500,\"letter-spacing\":\"var(--tb-config-letter-spacing)\",\"color\":\"var(--tb-service-font-5)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    },
    {
      "alias": "change_timeline",
      "name": "Change Timeline",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "timeseries",
        "sizeX": 8,
        "sizeY": 5,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <div class=\"widget-tab\" fxLayoutAlign=\"start center\" *ngIf=\"tabList && tabList.length > 1\">\n    <div\n      class=\"tab\"\n      *ngFor=\"let tab of tabList\"\n      fxLayoutAlign=\"center center\"\n      [ngClass]=\"{'active': tab.isActive}\"\n      (click)=\"selectTab(tab.id)\"\n    >\n      {{tab.label | translate}}\n    </div>\n  </div>\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\">\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\" translate>title</div>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <div class=\"entity-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n        <span class=\"normal-label\" translate>thingplus.selector.device-selection</span>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel == 0\"\n          (ngModelChange)=\"setCustomerL1($event)\"\n          [ngModel]=\"selectedCustomerL1\"\n        >\n          <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n            {{customerL1.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel <= 1\"\n          (ngModelChange)=\"setCustomerL2($event)\"\n          [ngModel]=\"selectedCustomerL2\"\n        >\n          <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n            {{customerL2.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select class=\"entity-selector\" (ngModelChange)=\"setDevice($event)\" [ngModel]=\"selectedDevice\">\n          <mat-option *ngFor=\"let device of deviceList\" [value]=\"device.value\"> {{device.label}} </mat-option>\n        </mat-select>\n      </div>\n      <div class=\"date-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\" fxShow.lt-md=\"false\">\n        <div class=\"normal-label\" translate>thingplus.selector.date-selection</div>\n        <div class=\"date-selector\" fxLayoutAlign=\"space-between center\">\n          <mat-datetimepicker #startDatePicker type=\"date\"></mat-datetimepicker>\n          <input\n            class=\"hidden\"\n            matInput\n            readonly\n            [(ngModel)]=\"startDate\"\n            [max]=\"endDate\"\n            [matDatetimepicker]=\"startDatePicker\"\n            (ngModelChange)=\"setStartDate($event)\"\n          />\n          <input class=\"start-date\" (click)=\"startDatePicker.open()\" [(ngModel)]=\"viewStartDate\" readonly />\n          <div class=\"select-arrow\"></div>\n        </div>\n        <span class=\"normal-label\"> ~ </span>\n        <div class=\"date-selector\" fxLayoutAlign=\"space-between center\">\n          <mat-datetimepicker #endDatePicker type=\"date\"></mat-datetimepicker>\n          <input\n            class=\"hidden\"\n            matInput\n            readonly\n            [(ngModel)]=\"endDate\"\n            [min]=\"startDate\"\n            [max]=\"nowDate\"\n            [matDatetimepicker]=\"endDatePicker\"\n            (ngModelChange)=\"setEndDate($event)\"\n          />\n          <input class=\"end-date\" (click)=\"endDatePicker.open()\" [(ngModel)]=\"viewEndDate\" readonly />\n          <div class=\"select-arrow\"></div>\n        </div>\n      </div>\n      <button class=\"action-btn text-btn\" (click)=\"search($event)\" fxShow.lt-md=\"false\">\n        <span translate>thingplus.action.search</span>\n      </button>\n      <button class=\"action-btn text-btn\" (click)=\"openFilter($event)\" fxShow.gt-sm=\"false\">\n        <span translate>thingplus.action.search</span>\n      </button>\n    </section>\n  </header>\n  <header class=\"widget-sub-header\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\">\n    <section class=\"widget-header-left-section\" fxFlex=\"100\" fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <section class=\"legend-section\" fxLayoutAlign=\"start center\" fxLayoutGap=\"2.4em\">\n        <div\n          class=\"legend-box\"\n          *ngFor=\"let legend of legendList\"\n          fxLayoutAlign=\"start center\"\n          fxLayoutGap=\"0.5em\"\n          (mouseenter)=\"legendEnter($event, legend)\"\n          (mouseleave)=\"legendLeave($event, legend)\"\n        >\n          <div class=\"legend-circle\" [ngStyle]=\"{'color': legend.color}\"></div>\n          <div class=\"legend-label\">{{legend.label}}</div>\n        </div>\n      </section>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex=\"100\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <div class=\"date-range\">{{dateRange}}</div>\n    </section>\n  </header>\n  <main class=\"widget-content\" fxLayout=\"column\">\n    <section class=\"chart-section\"></section>\n    <section class=\"action-section\" fxLayoutAlign=\"space-between center\">\n      <div fxLayoutAlign=\"start center\" fxLayoutGap=\"0.8em\">\n        <div\n          class=\"action-box\"\n          *ngFor=\"let action of actionList\"\n          (click)=\"action.action(action.descriptor)\"\n          fxLayoutAlign=\"center center\"\n          fxLayoutGap=\"0.6em\"\n        >\n          <i class=\"material-icons\">{{action.icon}}</i>\n          <span class=\"action-label\">{{action.label | translate}}</span>\n        </div>\n      </div>\n      <div class=\"action-box\" (click)=\"addModifiedState()\" fxLayoutAlign=\"center center\" fxLayoutGap=\"0.6em\">\n        <i class=\"material-icons\">add</i>\n        <span class=\"action-label\" translate>thingplus.action.modify-state</span>\n      </div>\n    </section>\n    <section class=\"table-section\" fxFlex>\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th *ngFor=\"let th of thList\" (click)=\"changeSort($event, th)\" [ngClass]=\"th.order\">\n              <div class=\"th-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <span class=\"th-label\">{{th.label}}</span>\n                <i class=\"th-sort material-icons\">arrow_upward</i>\n              </div>\n            </th>\n            <th *ngIf=\"hasCellAction\" [ngStyle]=\"{'width': actionSize}\"></th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let tr of trList\">\n            <td\n              *ngFor=\"let td of tr.tdList\"\n              [ngStyle]=\"td.style\"\n              [innerHTML]=\"td.value\"\n              (click)=\"td.action && td.action($event)\"\n            ></td>\n            <td *ngIf=\"hasCellAction\" class=\"action\">\n              <div class=\"cell-action-box\" fxLayoutAlign=\"start center\" fxLayoutGap=\"0.5em\">\n                <i\n                  *ngFor=\"let cellAction of cellActionList\"\n                  class=\"material-icons cell-action\"\n                  (click)=\"cellAction.action($event, tr.index)\"\n                >\n                  {{cellAction.icon}}\n                </i>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </section>\n  </main>\n  <footer class=\"widget-footer\" fxLayoutAlign=\"end center\">\n    <section class=\"page-section\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.5em\">\n      <div class=\"material-icons page-button first-button\" (click)=\"getFirstPage()\">first_page</div>\n      <div class=\"material-icons page-button prev-button\" (click)=\"getPrevPage()\">keyboard_arrow_left</div>\n      <div\n        class=\"page-button page-number-button\"\n        [class.big]=\"page.isBig\"\n        [class.active]=\"page.isActive\"\n        *ngFor=\"let page of pageList\"\n        (click)=\"changePage($event, page)\"\n      >\n        {{page.number}}\n      </div>\n      <div class=\"material-icons page-button next-button\" (click)=\"getNextPage()\">keyboard_arrow_right</div>\n      <div class=\"material-icons page-button last-button\" (click)=\"getLastPage()\">last_page</div>\n    </section>\n  </footer>\n</div>\n",
        "templateCss": "@import 'https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0';\n\n#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n  white-space: nowrap;\n}\n\n.widget-tab {\n  width: 100%;\n  height: 5em;\n  min-height: 30px;\n  background-color: var(--tb-service-background-2);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.tab {\n  min-width: 8em;\n  height: 100%;\n  font-size: 1.4em;\n  font-weight: 500;\n  border-right: 1px solid var(--tb-service-border-1);\n  color: var(--tb-service-font-4);\n  cursor: pointer;\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.tab.active {\n  background-color: var(--tb-service-background-0);\n  color: var(--tb-service-font-5);\n  border-top: 0.2em solid var(--tb-service-accent);\n  border-bottom: 1px solid var(--tb-service-background-0);\n  box-sizing: content-box !important;\n}\n.tab:not(.active):hover {\n  color: var(--tb-service-font-4);\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n\n.normal-label {\n  font-size: 1.2em;\n  font-weight: 500;\n  line-height: 1.17;\n  letter-spacing: -0.03em;\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n}\n\n/* widget-header-right-section */\n/* Entity Controller */\n.widget-header-right-section .entity-controller {\n  margin-right: var(--tb-config-padding);\n}\n.widget-header-right-section .mat-select {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .mat-select:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .mat-select-trigger {\n  width: 13em;\n  min-width: 130px;\n  padding: calc(9em / 14);\n  font-size: 1.4em;\n  line-height: 1;\n}\n.widget-header-right-section .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n.widget-header-right-section .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n/* Date Controller */\n.widget-header-right-section .date-controller {\n  margin-right: var(--tb-config-padding);\n}\n.widget-header-right-section .date-selector {\n  position: relative;\n  width: 13em;\n  min-width: 70px;\n  line-height: 1;\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  padding: 0.6em 0.9em;\n  cursor: pointer;\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .date-selector:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .date-selector input {\n  font-family: var(--tb-config-font-family);\n  font-size: 1.4em;\n  font-weight: 300;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  line-height: 1.3;\n}\n.select-arrow {\n  border-left: 0.5em solid transparent;\n  border-right: 0.5em solid transparent;\n  border-top: 0.5em solid;\n  color: var(--tb-service-accent);\n}\n.widget-header-right-section .start-date,\n.widget-header-right-section .end-date {\n  all: unset;\n  width: 100%;\n}\n.widget-header-right-section .hidden {\n  visibility: hidden;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n/* Action Button */\n.widget-header-right-section .action-btn {\n  all: unset;\n  line-height: 1.3;\n  cursor: pointer;\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n  white-space: nowrap;\n}\n.widget-header-right-section .text-btn {\n  padding: 0.6em 1.6em;\n  background-color: var(--tb-service-accent);\n  border: 1px solid var(--tb-service-accent);\n}\n.widget-header-right-section .text-btn:hover {\n  background-color: var(--tb-service-accent-hover);\n  border-color: var(--tb-service-accent-hover);\n}\n.widget-header-right-section .text-btn:active {\n  background-color: var(--tb-service-accent-pressed);\n  border-color: var(--tb-service-accent-pressed);\n}\n.widget-header-right-section .text-btn span {\n  font-size: 1.4em;\n  font-weight: bold;\n  color: var(--tb-service-font-0);\n}\n/*\n  Widget Sub Header Area\n*/\nheader.widget-sub-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n\n/* widget-header-left-section */\nheader.widget-sub-header .widget-header-left-section .legend-circle {\n  width: 0.6em;\n  height: 0.6em;\n  background-color: currentColor;\n}\nheader.widget-sub-header .widget-header-left-section .legend-label {\n  font-size: 1.2em;\n  color: var(--tb-service-font-4);\n}\nheader.widget-sub-header .widget-header-left-section .legend-box.hidden .legend-label {\n  text-decoration: line-through;\n}\n\n/* widget-header-right-section */\nheader.widget-sub-header .widget-header-right-section .date-range {\n  border: 1px solid var(--tb-service-border-0);\n  color: var(--tb-service-font-3);\n  font-size: 1em;\n  padding: 0.4em 0.8em;\n}\nheader.widget-sub-header .widget-header-right-section .action-btn {\n  all: unset;\n  line-height: 1;\n  cursor: pointer;\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n\n/*\n  Widget Content Area\n*/\nmain.widget-content {\n  width: 100%;\n  overflow-y: auto;\n}\nmain.widget-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\nmain.widget-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\nmain.widget-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n/* chart-section */\nsection.chart-section {\n  width: 100%;\n  max-width: 100%;\n  overflow-x: auto;\n}\nsection.chart-section::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\nsection.chart-section::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\nsection.chart-section::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n.chart-section .domain {\n  display: none;\n}\n.chart-section .tooltip:hover {\n  stroke: var(--tb-service-font-5);\n}\n.chart-section svg {\n  width: 100%;\n  height: auto;\n}\n.chart-section .bar-name {\n  font-family: var(--tb-config-font-family);\n  font-size: 14px;\n  fill: var(--tb-service-font-5);\n}\n.chart-section .bar-label-box {\n  width: 40px;\n  height: 18px;\n  stroke: var(--tb-service-border-1);\n  fill: var(--tb-service-background-0);\n}\n.chart-section .bar-label {\n  width: 40px;\n  font-family: var(--tb-config-font-family);\n  font-size: 10px;\n  fill: var(--tb-service-font-5);\n  text-anchor: middle;\n}\n.chart-section .bar-label.bar-label-modified {\n  fill: var(--tb-service-accent);\n}\n.chart-section .bar-rect {\n  transition-property: transform, height;\n  transition-duration: var(--tb-config-color-duration);\n}\n.chart-section .bar-rect-active {\n  transform: translateY(2px);\n  height: 6px;\n}\n.chart-section .bar-rect-target {\n  transform: translateY(-2px);\n  height: 14px;\n}\n.chart-section .selection {\n  fill: var(--tb-service-accent);\n  opacity: 0.5;\n}\n\n.action-section {\n  width: 100%;\n  padding: 1em 2em;\n  border-top: 1px solid var(--tb-service-border-1);\n}\n.action-section .action-box {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0.6em 1.2em;\n  cursor: pointer;\n  border: 1px solid var(--tb-service-border-0);\n  color: var(--tb-service-font-4);\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.action-section .action-box span {\n  font-size: 1.4em;\n  font-weight: 500;\n  white-space: nowrap;\n}\n.action-section .action-box i {\n  font-size: 1.6em;\n  font-weight: bold;\n  color: var(--tb-service-accent);\n}\n.action-section .action-box:hover {\n  border-color: var(--tb-service-border-3);\n}\n.action-section .action-box:active {\n  border-color: var(--tb-service-accent-pressed);\n}\n\n/* table-section */\n.table-section {\n  width: 100%;\n  overflow: auto;\n}\n.table-section::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n.table-section::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\n.table-section::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n.table-section .table {\n  min-width: 100%;\n  border-spacing: 0px;\n  box-sizing: border-box;\n  table-layout: fixed;\n  border-collapse: collapse;\n  white-space: nowrap;\n}\n.table-section thead tr {\n  background-color: var(--tb-service-background-1);\n  border-top: 1px solid var(--tb-service-border-1);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.table-section th {\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  padding: 1.68em;\n  text-align: left;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 1em;\n  line-height: 1;\n}\n.table-section th .th-label {\n  font-size: 1.2em;\n  margin-right: 0.5em;\n}\n.table-section th .th-sort {\n  font-size: 1.4em;\n  opacity: 0;\n  vertical-align: top;\n  transition-property: transform, opacity;\n  transition-duration: var(--tb-config-color-duration);\n  color: var(--tb-service-accent);\n}\n.table-section th:not(.DESC):not(.ASC):hover .th-sort {\n  opacity: 0.4;\n}\n.table-section th.ASC .th-sort {\n  opacity: 1;\n  transform: rotate(0deg);\n}\n.table-section th.DESC .th-sort {\n  opacity: 1;\n  transform: rotate(180deg);\n}\n.table-section tbody tr {\n  border-bottom: 1px solid var(--tb-service-border-1);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section tbody tr:nth-child(odd) {\n  background-color: var(--tb-service-background-0);\n}\n.table-section tbody tr:nth-child(even) {\n  background-color: var(--tb-service-background-1);\n}\n.table-section td {\n  line-height: 1;\n}\n.table-section td:not(.action) {\n  color: var(--tb-service-font-4);\n  padding: 1.2em;\n  font-size: 1.4em;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  user-select: text;\n}\n.table-section tbody tr:hover {\n  background-color: var(--tb-service-background-2);\n}\n.table-section td.action {\n  font-size: 1em;\n  padding: 0em 1.68em;\n  text-overflow: initial;\n}\n.table-section .cell-action {\n  font-size: 2em;\n  cursor: pointer;\n  color: var(--tb-service-font-3);\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section .cell-action:hover {\n  color: var(--tb-service-font-5);\n}\n.table-section .cell-action.active {\n  color: var(--tb-service-accent);\n}\n.table-section .activate-switch {\n  position: relative;\n  width: 3.6em;\n  height: 1.6em;\n  border-radius: 0.8em;\n  background-color: var(--tb-service-font-3);\n  transition-property: background-color;\n  transition-duration: var(--tb-config-color-duration);\n  margin: auto;\n  cursor: pointer;\n}\n.table-section .activate-switch.active {\n  background-color: var(--tb-service-accent);\n}\n.table-section .activate-switch .ball {\n  position: absolute;\n  top: 50%;\n  left: 0.8em;\n  transform: translate(-50%, -50%);\n  width: 1.2em;\n  height: 1.2em;\n  border-radius: 0.6em;\n  background-color: var(--tb-service-background-0);\n  transition-property: left;\n  transition-duration: var(--tb-config-color-duration);\n}\n.table-section .activate-switch.active .ball {\n  left: calc(100% - 0.8em);\n}\n\n/*\n  Widget Footer Area\n*/\nfooter.widget-footer {\n  width: 100%;\n  padding: var(--tb-config-padding);\n  background-color: var(--tb-service-background-0);\n  border-top: 1px solid var(--tb-service-border-1);\n}\n\n/* page-section */\n.page-section .page-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 2em;\n  min-width: 20px;\n  height: 2em;\n  min-height: 20px;\n  font-size: 1.2em;\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  cursor: pointer;\n  color: var(--tb-service-font-4);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.page-section .first-button,\n.page-section .last-button,\n.page-section .prev-button,\n.page-section .next-button {\n  font-size: 1.6em;\n  width: 1.5em;\n  height: 1.5em;\n}\n.page-section .page-button:not(.active):hover {\n  border: 1px solid var(--tb-service-accent-hover);\n}\n.page-section .page-button:not(.active):active {\n  border: 1px solid var(--tb-service-accent-pressed);\n}\n.page-section .page-button.big-page {\n  width: 3.5em;\n  min-width: 35px;\n}\n.page-section .page-number-button.active {\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-accent);\n}\n\n@media (min-width: 960px) and (max-width: 1280px) {\n  /* chart-section */\n  .chart-section svg {\n    width: 150%;\n    height: auto;\n  }\n}\n\n@media (min-width: 600px) and (max-width: 960px) {\n  /* chart-section */\n  .chart-section svg {\n    width: 225%;\n    height: auto;\n  }\n}\n\n@media (max-width: 599px) {\n  /* chart-section */\n  .chart-section svg {\n    width: 300%;\n    height: auto;\n  }\n}\n",
        "controllerScript": "const ENTITY_TYPE = ['TENANT', 'CUSTOMER_L1', 'CUSTOMER_L2'];\nconst STATUS = {\n  stopped: { priority: 0, content: 'thingplus.state.stopped', color: 'var(--tb-service-state-stopped)' },\n  waiting: { priority: 1, content: 'thingplus.state.waiting', color: 'var(--tb-service-state-waiting)' },\n  working: { priority: 2, content: 'thingplus.state.working', color: 'var(--tb-service-state-working)' },\n  trial: { priority: 3, content: 'thingplus.state.trial', color: 'var(--tb-service-state-trial)' },\n  unconnected: {\n    priority: 4,\n    content: 'thingplus.state.unconnected',\n    color: 'var(--tb-service-state-unconnected)',\n  },\n};\nconst ANALYSIS_MAP = ['stopped', 'waiting', 'working', 'trial', 'unconnected'];\nconst OPERATION_MAP = {\n  WORK: 'working',\n  WAIT: 'waiting',\n  STOP: 'stopped',\n};\nconst STANDARD_WINDOW_SIZE = 1920 / 100;\nconst DAY_MS = 86400000;\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  makeTab();\n  getDashboardParameter();\n  makeHead();\n\n  self.onResize();\n\n  if (!custom.isSample) {\n    // 현재 사용자의 Root 엔터티로부터 관계 트리 형성\n    custom.relations[custom.rootEntity.id.id] = {\n      id: custom.rootEntity.id,\n      name: custom.rootEntity.name,\n      parent: '',\n      child: [],\n    };\n    $scope.ownerLevel = await getCurrentLevel();\n    getCustomer([custom.relations[custom.rootEntity.id.id]]);\n    updateView();\n  }\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.onDataUpdated = function () {};\n\nself.actionSources = function () {\n  return {\n    actionCellButton: {\n      name: 'widget-action.action-cell-button',\n      multiple: true,\n    },\n    customAction: {\n      name: 'Custom Action',\n      multiple: true,\n    },\n    addModifiedState: {\n      name: 'Add Modified State',\n      multiple: false,\n    },\n  };\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n  custom.$widgetContent = $('.widget-content', $container);\n  custom.$dateRange = $('.date-range', $container);\n  custom.$chartSection = $('.chart-section', $container);\n  custom.$widgetFooter = $('.widget-footer', $container);\n\n  $scope.tabList = [];\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n  $scope.deviceList = [\n    { name: t('thingplus.selector.entire-device'), label: t('thingplus.selector.entire-device'), value: '' },\n  ];\n  $scope.selectedCustomerL1 = '';\n  $scope.selectedCustomerL2 = '';\n  $scope.selectedDevice = '';\n  $scope.ownerLevel = 2;\n  $scope.legendList = [\n    { key: 'stopped', color: 'var(--tb-service-state-stopped)', label: t('thingplus.state.stopped') },\n    { key: 'waiting', color: 'var(--tb-service-state-waiting)', label: t('thingplus.state.waiting') },\n    { key: 'working', color: 'var(--tb-service-state-working)', label: t('thingplus.state.working') },\n    { key: 'trial', color: 'var(--tb-service-state-trial)', label: t('thingplus.state.trial') },\n    { key: 'unconnected', color: 'var(--tb-service-state-unconnected)', label: t('thingplus.state.unconnected') },\n  ];\n\n  // Define Normal Variables\n  custom.relations = {};\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.rootEntity = custom.ownerDatasource.entity;\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.hiddenDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.ownerDatasource.entityAliasId);\n  custom.mainDatasources = self.ctx.datasources.filter(\n    x => x.entityAliasId !== custom.ownerDatasource.entityAliasId && x.entityType == 'DEVICE'\n  );\n  custom.mainData = [];\n\n  custom.targetDatasources = [self.ctx.defaultSubscription.configuredDatasources[1]];\n  custom.originDataKeys = custom.targetDatasources[0].dataKeys;\n  custom.t = t;\n  custom.ymdhms = t('thingplus.time-format.ymdhms');\n  custom.ymdhm = t('thingplus.time-format.ymdhm');\n  custom.ymd = t('thingplus.time-format.ymd');\n  custom.currentPage = 1;\n  custom.countPerPage = 10;\n  custom.isUpdated = false;\n  custom.selectedIndex = 0;\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  custom.widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (custom.widgetFontSize < 6.25) {\n    custom.widgetFontSize = 6.25;\n  }\n  custom.headColomns = self.ctx.defaultSubscription.configuredDatasources[1].dataKeys;\n\n  let now = moment().valueOf();\n  custom.endTs = moment(now).valueOf();\n  custom.startTs = moment(custom.endTs).subtract(7, 'days').valueOf();\n  custom.analysisEndTs = moment(custom.endTs).subtract(1, 'hours').startOf('hours').valueOf();\n  custom.realDataNeeded = true;\n  $scope.dateRange = `${moment(custom.startTs).format(custom.ymdhms)} ~ ${moment(custom.endTs).format(custom.ymdhms)}`;\n  $scope.startDate = moment(custom.startTs).toDate();\n  $scope.endDate = moment(custom.endTs).toDate();\n  $scope.viewStartDate = moment(custom.startTs).format(custom.ymd);\n  $scope.viewEndDate = moment(custom.endTs).format(custom.ymd);\n  $scope.nowDate = moment(custom.endTs).toDate();\n  custom.dateSelection = [custom.startTs, custom.endTs];\n  $scope.actionList = [];\n  let descriptors = self.ctx.actionsApi.getActionDescriptors('customAction');\n  for (let i in descriptors) {\n    $scope.actionList.push({\n      icon: descriptors[i].icon,\n      label: t(descriptors[i].name),\n      action: handleCustomAction,\n      descriptor: descriptors[i],\n    });\n  }\n  $scope.cellActionList = self.ctx.actionsApi.getActionDescriptors('actionCellButton').map(x => {\n    return { name: x.name, icon: x.icon, action: (e, i) => handleCellAction(x, i) };\n  });\n  $scope.hasCellAction = $scope.cellActionList.length > 0;\n  $scope.actionSize = `${$scope.cellActionList.length * 2 + 3.36 + ($scope.cellActionList.length - 1) * 0.5}em`;\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(t(self.ctx.widget.config.title));\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope } = self.ctx;\n  $scope.selectTab = function (e) {\n    let state = e || 'default';\n    let param = custom.dashboardParams || {};\n    self.ctx.stateController.updateState(state, param, null);\n  };\n  $scope.setCustomerL1 = function (e) {\n    $scope.selectedCustomerL1 = e;\n    $scope.selectedCustomerL2 = '';\n    $scope.selectedDevice = '';\n    changeCustomerL2List();\n    changeDeviceList();\n  };\n  $scope.setCustomerL2 = function (e) {\n    $scope.selectedCustomerL2 = e;\n    $scope.selectedDevice = '';\n    changeDeviceList();\n  };\n  $scope.setDevice = function (e) {\n    $scope.selectedDevice = e;\n  };\n  $scope.search = function (e) {\n    updateDashboardState();\n  };\n  $scope.setStartDate = function (e) {\n    $scope.startDate = e;\n    $scope.viewStartDate = moment(e).format(custom.ymd);\n  };\n  $scope.setEndDate = function (e) {\n    $scope.endDate = e;\n    $scope.viewEndDate = moment(e).format(custom.ymd);\n  };\n  $scope.addModifiedState = function (e) {\n    let isExistUnconnected = false;\n    for (let i = 0; i < custom.labelList[1].length; i++) {\n      if (\n        custom.labelList[1][i].status == 'unconnected' &&\n        ((custom.labelList[1][i].time >= custom.dateSelection[0] &&\n          custom.labelList[1][i].time < custom.dateSelection[1]) ||\n          (custom.labelList[1][i].time < custom.dateSelection[0] &&\n            custom.labelList[1][i].nextTime > custom.dateSelection[0]))\n      ) {\n        isExistUnconnected = true;\n      }\n    }\n    if (isExistUnconnected) {\n      let descriptor = self.ctx.actionsApi.getActionDescriptors('addModifiedState');\n      handleCustomAction(descriptor[0]);\n    } else {\n      window.alert(t('thingplus.help.no-unconnected'));\n    }\n  };\n  $scope.openFilter = function (e) {\n    let descriptor = self.ctx.actionsApi.getActionDescriptors('filterAction')[0];\n    self.ctx.actionsApi.handleWidgetAction(\n      {},\n      descriptor,\n      custom.ownerDatasource.entity.id,\n      custom.ownerDatasource.entityName,\n      {},\n      custom.ownerDatasource.entityLabel\n    );\n  };\n  $scope.legendEnter = function (e, d) {\n    $(`.bar-rect`).addClass('bar-rect-active');\n    $(`.bar-rect-${d.key}`).removeClass('bar-rect-active');\n    $(`.bar-rect-${d.key}`).addClass('bar-rect-target');\n  };\n  $scope.legendLeave = function (e, d) {\n    $(`.bar-rect`).removeClass('bar-rect-active');\n    $(`.bar-rect`).removeClass('bar-rect-target');\n  };\n  $scope.getPrevPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage--;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getNextPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage++;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getFirstPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage = 1;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.getLastPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage = custom.totalPage;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.changePage = function (e, page) {\n    if (!page.isActive) {\n      custom.currentPage = page.number;\n      initPage();\n      makeBody();\n      insertData();\n    }\n  };\n  $scope.changeSort = function (e, th) {\n    if (th.isAction) return;\n    if (th.index == custom.selectedIndex) {\n      if (th.order != 'ASC') {\n        $scope.thList[th.index].order = 'ASC';\n      } else {\n        $scope.thList[th.index].order = 'DESC';\n      }\n    } else {\n      $scope.thList.forEach(x => (x.order = ''));\n      custom.selectedIndex = th.index;\n      $scope.thList[th.index].order = 'ASC';\n    }\n    initPage();\n    makeBody();\n    sortData();\n    insertData();\n  };\n}\n\n// 대시보드 상태 탭 생성\nfunction makeTab() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return;\n  $scope.tabList = [];\n  for (let i in self.ctx.stateController.statesValue) {\n    $scope.tabList.push({\n      label: 'thingplus.menu.' + i,\n      id: i,\n      isActive: i == self.ctx.stateController.stateValue,\n    });\n  }\n}\n\nfunction getDashboardParameter() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return {};\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n  if (custom.dashboardParams) {\n    if (custom.dashboardParams.customerL1) {\n      $scope.selectedCustomerL1 = custom.dashboardParams.customerL1.entityId.id;\n    }\n    if (custom.dashboardParams.customerL2) {\n      $scope.selectedCustomerL2 = custom.dashboardParams.customerL2.entityId.id;\n    }\n    if (custom.dashboardParams.entityId && custom.dashboardParams.entityId.entityType == 'DEVICE') {\n      $scope.selectedDevice = custom.dashboardParams.entityId.id;\n    }\n    if (custom.dashboardParams.startTs) {\n      custom.startTs = custom.dashboardParams.startTs;\n      $scope.startDate = moment(custom.startTs).toDate();\n      $scope.viewStartDate = moment(custom.startTs).format(custom.ymd);\n    }\n    if (custom.dashboardParams.endTs) {\n      custom.endTs = moment(custom.dashboardParams.endTs).endOf('day').valueOf();\n      if (custom.endTs > moment().valueOf()) {\n        custom.endTs = moment().valueOf();\n      }\n      $scope.endDate = moment(custom.endTs).toDate();\n      $scope.viewEndDate = moment(custom.endTs).format(custom.ymd);\n      if (custom.endTs > moment().subtract(1, 'hours').startOf('hours').valueOf()) {\n        custom.realDataNeeded = true;\n        custom.analysisEndTs = moment(custom.endTs).subtract(1, 'hours').startOf('hours').valueOf();\n      } else {\n        custom.realDataNeeded = false;\n        custom.analysisEndTs = custom.endTs;\n      }\n    }\n    $scope.dateRange = `${moment(custom.startTs).format(custom.ymdhms)} ~ ${moment(custom.endTs).format(\n      custom.ymdhms\n    )}`;\n    custom.dateSelection = [custom.startTs, custom.endTs];\n    self.ctx.detectChanges();\n  }\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n    if (self.ctx.width < 600) {\n      originWidth = 600;\n    }\n  }\n\n  custom.widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (custom.widgetFontSize < 6.25) {\n    custom.widgetFontSize = 6.25;\n  }\n  custom.$widget.css('font-size', `${custom.widgetFontSize}px`);\n\n  // Header Height를 제외한 영역을 Main의 Height로 설정\n  let headerHeight = custom.$widgetHeader.outerHeight(true);\n  let footerHeight = custom.$widgetFooter.outerHeight(true);\n  custom.$widgetContent.css('height', `calc(100% - ${headerHeight + footerHeight}px)`);\n\n  self.ctx.detectChanges();\n}\n\n// 헤더 부분 생성\nfunction makeHead() {\n  let { custom, $scope } = self.ctx;\n  $scope.thList = [];\n  for (let i in custom.headColomns) {\n    $scope.thList.push({\n      index: i,\n      key: custom.headColomns[i].name,\n      label: t(custom.headColomns[i].label),\n      order: custom.selectedIndex == i ? 'ASC' : '',\n    });\n  }\n}\n\n// 페이지에 맞는 데이터 출력 및 페이지 표시\nfunction initPage() {\n  let { custom, $scope } = self.ctx;\n  custom.totalPage = Math.ceil(custom.mainData.length / custom.countPerPage);\n  // 현재 페이지 기준 왼쪽이 5개 오른쪽이 4개가 되도록\n  custom.startPage = custom.currentPage - 5;\n  // 6번까지는 왼쪽이 5개 이하이므로 시작을 1로 고정\n  if (custom.currentPage <= 6) {\n    custom.startPage = 1;\n  }\n  // 마지막에서 5칸 아래페이지 부터는 오른쪽이 4개 이하이므로 시작을 마지막에서 9을 뺀것으로 고정\n  if (custom.totalPage >= 10 && custom.currentPage > custom.totalPage - 5) {\n    custom.startPage = custom.totalPage - 9;\n  }\n  custom.endPage = custom.startPage + 9;\n  // 끝 페이지가 총 페이지보다 크면 총페이지를 끝 페이지로\n  if (custom.endPage > custom.totalPage) {\n    custom.endPage = custom.totalPage;\n  }\n\n  // 페이지 리스트 구성\n  $scope.pageList = [];\n  for (let i = custom.startPage; i <= custom.endPage; i++) {\n    $scope.pageList.push({\n      number: i,\n      isBig: i > 99,\n      isActive: custom.currentPage == i,\n    });\n  }\n\n  custom.startIndex = (custom.currentPage - 1) * custom.countPerPage;\n  custom.endIndex = custom.currentPage * custom.countPerPage - 1;\n  // 끝 페이지가 데이터 소스의 길이보다 많으면 데이터 소스의 길이로 변경\n  if (custom.endIndex > custom.mainData.length - 1) {\n    custom.endIndex = custom.mainData.length - 1;\n  }\n  custom.targetData = custom.mainData.slice(custom.startIndex, custom.endIndex + 1);\n}\n\n// 데이터 재 정렬\nfunction sortData() {\n  let { custom, $scope } = self.ctx;\n  // subscribe하는 데이터 키의 레이블 중 정렬기준으로 선택된 레이블의 인덱스 추출\n  // 정렬에 사용할 객체를 깊은 복사\n  let selectedKey = $scope.thList[custom.selectedIndex].key;\n  let selectedOrder = $scope.thList[custom.selectedIndex].order;\n  if (selectedOrder == 'ASC') {\n    custom.mainData.sort((a, b) => {\n      if (a[selectedKey] > b[selectedKey]) return 1;\n      if (a[selectedKey] < b[selectedKey]) return -1;\n      return 0;\n    });\n  } else {\n    custom.mainData.sort((a, b) => {\n      if (a[selectedKey] > b[selectedKey]) return -1;\n      if (a[selectedKey] < b[selectedKey]) return 1;\n      return 0;\n    });\n  }\n}\n\n// 테이블 바디 생성\nfunction makeBody() {\n  let { custom, $scope } = self.ctx;\n  $scope.trList = [];\n  // 현재 페이지의 데이터 수 만큼 행 출력\n  for (let i = custom.startIndex; i <= custom.endIndex; i++) {\n    let tdList = [];\n    for (let j in custom.headColomns) {\n      tdList.push({ index: j, name: custom.headColomns[j].name, style: '', value: '' });\n    }\n    $scope.trList.push({\n      index: i,\n      tdList: tdList,\n    });\n  }\n}\n\n// 데이터 삽입\nfunction insertData() {\n  let { custom, $scope } = self.ctx;\n  for (let i = custom.startIndex; i <= custom.endIndex; i++) {\n    for (let j in custom.headColomns) {\n      let key = custom.headColomns[j].name;\n      let data = custom.mainData[i][key];\n\n      // Apply cell style function\n      if (custom.headColomns[j].settings.useCellStyleFunction) {\n        try {\n          let styleFunction = new Function('value', 'ctx', custom.headColomns[j].settings.cellStyleFunction);\n          let style = styleFunction(data, self.ctx);\n          $scope.trList[i - custom.startIndex].tdList[j].style = style;\n        } catch (err) {\n          console.error(err);\n        }\n      }\n      // Apply cell action function\n      if (custom.headColomns[j].settings.useCellActionFunction) {\n        try {\n          let actionFunction = new Function(\n            'value',\n            'tr',\n            'td',\n            'ctx',\n            custom.headColomns[j].settings.cellActionFunction\n          );\n          $scope.trList[i - custom.startIndex].tdList[j].action = function (e) {\n            actionFunction(\n              data,\n              $scope.trList[i - custom.startIndex],\n              $scope.trList[i - custom.startIndex].tdList[j],\n              self.ctx\n            );\n          };\n        } catch (err) {\n          console.error(err);\n        }\n      }\n      // Apply cell content function\n      if (custom.headColomns[j].settings.useCellContentFunction) {\n        try {\n          let contentFunction = new Function('value', 'ctx', custom.headColomns[j].settings.cellContentFunction);\n          data = contentFunction(data, self.ctx);\n        } catch (err) {\n          console.error(err);\n        }\n      }\n\n      $scope.trList[i - custom.startIndex].tdList[j].value = data;\n    }\n  }\n  self.ctx.detectChanges();\n}\n\nasync function getCurrentLevel() {\n  let { custom } = self.ctx;\n  if (custom.rootEntity.id.entityType == 'TENANT') {\n    return 0;\n  } else {\n    let result = await self.ctx.attributeService\n      .getEntityAttributes(custom.rootEntity.id, 'SERVER_SCOPE', ['customerType'])\n      .toPromise();\n    if (result && result[0]) {\n      if (result[0].value == ENTITY_TYPE[1]) {\n        return 1;\n      } else {\n        return 2;\n      }\n    }\n  }\n}\n\nfunction getCustomer(entities) {\n  let { custom } = self.ctx;\n  let promises = [];\n  if (entities.length > 0) {\n    for (let i = 0; i < entities.length; i++) {\n      promises.push(self.ctx.entityRelationService.findInfoByFrom(entities[i].id));\n    }\n    self.ctx.rxjs.forkJoin(promises).subscribe(childs => {\n      let newChild = [];\n      for (let j = 0; j < childs.length; j++) {\n        for (let k = 0; k < childs[j].length; k++) {\n          custom.relations[childs[j][k].to.id] = {\n            id: childs[j][k].to,\n            name: childs[j][k].toName,\n            parent: entities[j],\n            child: [],\n            type: 'CUSTOMER',\n          };\n          custom.relations[entities[j].id.id].child.push(custom.relations[childs[j][k].to.id]);\n          if (childs[j][k].to.entityType === 'USER') {\n            custom.relations[childs[j][k].to.id].type = 'USER';\n          }\n          if (childs[j][k].to.entityType === 'DEVICE') {\n            custom.relations[childs[j][k].to.id].type = 'DEVICE';\n          }\n          if (childs[j][k].to.entityType === 'ASSET') {\n            custom.relations[childs[j][k].to.id].type = 'ASSET';\n          }\n          if (childs[j][k].to.entityType === 'CUSTOMER') {\n            newChild.push(custom.relations[childs[j][k].to.id]);\n          }\n        }\n      }\n      getCustomer(newChild);\n    });\n  } else {\n    distributeLevel();\n  }\n}\n\n// hierarchy 레벨에 따라 배열에 따로 저장\nfunction distributeLevel() {\n  let { custom, $scope } = self.ctx;\n  let depth = $scope.ownerLevel;\n  let root = custom.relations[custom.rootEntity.id.id];\n  root.type = ENTITY_TYPE[depth];\n  for (let i in root.child) {\n    if (root.child[i].type == 'CUSTOMER') {\n      root.child[i].type = ENTITY_TYPE[depth + 1];\n    }\n    for (let j in root.child[i].child) {\n      if (root.child[i].child[j].type == 'CUSTOMER') {\n        root.child[i].child[j].type = ENTITY_TYPE[depth + 2];\n      }\n    }\n  }\n  custom.customerL1List = [];\n  custom.customerL2List = [];\n  custom.deviceList = [];\n\n  for (let i in custom.relations) {\n    if (custom.relations[i].type == ENTITY_TYPE[1]) {\n      custom.customerL1List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[2]) {\n      custom.customerL2List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == 'DEVICE') {\n      custom.deviceList.push(custom.relations[i]);\n    }\n  }\n\n  getDeviceInfo();\n}\n\nfunction getDeviceInfo() {\n  let { custom, $scope } = self.ctx;\n  let observables = [];\n  custom.deviceList = [];\n  for (let i in custom.customerL2List) {\n    let customerId = custom.customerL2List[i].id.id;\n    observables.push(self.ctx.http.get(`/api/customer/${customerId}/deviceInfos?pageSize=50000&page=0`));\n  }\n\n  self.ctx.rxjs.forkJoin(observables).subscribe(devices => {\n    for (let i in devices) {\n      for (let j in devices[i].data) {\n        custom.relations[devices[i].data[j].id.id].label =\n          devices[i].data[j].label != '' ? devices[i].data[j].label : devices[i].data[j].name;\n        custom.deviceList.push(custom.relations[devices[i].data[j].id.id]);\n      }\n    }\n\n    $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n    $scope.customerL1List = $scope.customerL1List.concat(\n      custom.customerL1List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n\n    changeCustomerL2List();\n    changeDeviceList();\n    self.ctx.detectChanges();\n  });\n}\n\n// Customer L2 리스트 갱신\nfunction changeCustomerL2List() {\n  let { custom, $scope } = self.ctx;\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n\n  if ($scope.selectedCustomerL1 === '') {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n  } else {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL1)\n        .map(x => {\n          return { name: x.name, value: x.id.id };\n        })\n    );\n  }\n}\n\n// 디바이스 리스트 갱신\nfunction changeDeviceList() {\n  let { custom, $scope } = self.ctx;\n  $scope.deviceList = [];\n\n  if ($scope.selectedCustomerL2 === '') {\n    if ($scope.selectedCustomerL1 === '') {\n      $scope.deviceList = $scope.deviceList.concat(\n        custom.deviceList.map(x => {\n          return { name: x.name, label: x.label, value: x.id.id };\n        })\n      );\n    } else {\n      $scope.deviceList = $scope.deviceList.concat(\n        custom.deviceList\n          .filter(x => x.parent.parent.id.id === $scope.selectedCustomerL1)\n          .map(x => {\n            return { name: x.name, label: x.label, value: x.id.id };\n          })\n      );\n    }\n  } else {\n    $scope.deviceList = $scope.deviceList.concat(\n      custom.deviceList\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL2)\n        .map(x => {\n          return { name: x.name, label: x.label, value: x.id.id };\n        })\n    );\n  }\n  $scope.deviceList.sort((a, b) => {\n    if (a.label > b.label) return 1;\n    if (a.label < b.label) return -1;\n    return 0;\n  });\n  $scope.deviceList = [\n    { name: t('thingplus.selector.entire-device'), label: t('thingplus.selector.entire-device'), value: '' },\n  ].concat($scope.deviceList);\n}\n\nasync function updateView() {\n  let { custom, $scope } = self.ctx;\n  if (custom.targetDatasources[0].entityType == 'DEVICE') {\n    custom.keyDatas = {\n      TP_AnalysisState: [{ ts: custom.startTs, value: '4' }],\n      TP_OperationState: [],\n    };\n\n    let datas = await getInitialStatus();\n    for (let i in datas) {\n      custom.keyDatas[i][0].value = datas[i][0].value;\n    }\n    let realTimeData = await getInitialRealTimeStatus();\n    for (let i in realTimeData) {\n      custom.keyDatas[i].push(realTimeData[i][0]);\n    }\n\n    let realDatas = [];\n    if (custom.realDataNeeded) {\n      realDatas = await loadRealTimeData();\n      custom.operationData = [];\n      custom.connectionData = [];\n      if (realDatas.TP_OperationState) {\n        custom.operationData = realDatas.TP_OperationState.map(x => {\n          return { ts: x.ts, value: OPERATION_MAP[x.value] };\n        });\n      }\n      if (realDatas.TP_ConnectionState) {\n        custom.connectionData = _.cloneDeep(realDatas.TP_ConnectionState);\n      }\n    }\n\n    loadData();\n  }\n}\n\nasync function getInitialStatus() {\n  let { custom, $scope } = self.ctx;\n  if (!custom.isSample) {\n    let keys = ['TP_AnalysisState'];\n    let entityId = custom.targetDatasources[0].entityId;\n\n    return await self.ctx.http\n      .get(\n        `/api/plugins/telemetry/DEVICE/${entityId}/values/timeseries?limit=1&agg=NONE&keys=${keys.join(\n          ','\n        )}&startTs=0&endTs=${custom.startTs}`\n      )\n      .toPromise();\n  }\n}\n\nasync function getInitialRealTimeStatus() {\n  let { custom, $scope } = self.ctx;\n  if (!custom.isSample) {\n    let keys = ['TP_OperationState'];\n    let entityId = custom.targetDatasources[0].entityId;\n\n    return await self.ctx.http\n      .get(\n        `/api/plugins/telemetry/DEVICE/${entityId}/values/timeseries?limit=1&agg=NONE&keys=${keys.join(\n          ','\n        )}&startTs=0&endTs=${custom.analysisEndTs}`\n      )\n      .toPromise();\n  }\n}\n\nasync function loadRealTimeData() {\n  let { custom, $scope } = self.ctx;\n  if (!custom.isSample) {\n    let keys = ['TP_OperationState', 'TP_ConnectionState'];\n    let entityId = custom.targetDatasources[0].entityId;\n\n    return await self.ctx.http\n      .get(\n        `/api/plugins/telemetry/DEVICE/${entityId}/values/timeseries?limit=50000&agg=NONE&keys=${keys.join(\n          ','\n        )}&startTs=${custom.analysisEndTs}&endTs=${custom.endTs}`\n      )\n      .toPromise();\n  }\n}\n\nfunction loadData() {\n  let { custom, $scope } = self.ctx;\n  let keys = ['TP_AnalysisState', 'TP_ModifiedState'];\n  let entityId = custom.targetDatasources[0].entityId;\n\n  self.ctx.http\n    .get(\n      `/api/plugins/telemetry/DEVICE/${entityId}/values/timeseries?limit=50000&agg=NONE&keys=${keys.join(\n        ','\n      )}&startTs=${custom.startTs}&endTs=${custom.endTs}`\n    )\n    .subscribe(datas => {\n      if (datas.TP_AnalysisState) {\n        custom.analysisData = _.cloneDeep(datas.TP_AnalysisState);\n      } else {\n        custom.analysisData = [];\n      }\n      custom.analysisData.push(custom.keyDatas.TP_AnalysisState[0]);\n      custom.modifiedData = _.cloneDeep(datas.TP_ModifiedState);\n      if (!custom.modifiedData) {\n        custom.modifiedData = [];\n      }\n      for (let i in custom.modifiedData) {\n        custom.modifiedData[i] = JSON.parse(custom.modifiedData[i].value);\n      }\n      delete datas.TP_AnalysisState;\n      delete datas.TP_ModifiedState;\n\n      // 레이블 리스트의 틀 마련\n      custom.labelList = [[]];\n\n      let newDatasource = _.cloneDeep(custom.targetDatasources[0]);\n      newDatasource.tag = 'modified';\n      custom.targetDatasources.push(newDatasource);\n\n      if (custom.realDataNeeded) {\n        let lastState = custom.keyDatas['TP_OperationState'][0].value;\n\n        custom.operationData = custom.operationData.concat(custom.connectionData);\n        custom.operationData.sort((a, b) => {\n          if (a.ts == b.ts) {\n            if (b.value == 'true' || b.value == 'false') {\n              return 1;\n            } else {\n              return -1;\n            }\n          }\n          return a.ts - b.ts;\n        });\n\n        for (let i = 0; i < custom.operationData.length; i++) {\n          if (custom.operationData[i].value === 'false') {\n            custom.operationData[i].value = 'unconnected';\n            if (custom.operationData[i - 1]) {\n              lastState = custom.operationData[i - 1].value;\n            }\n          }\n          if (custom.operationData[i].value === 'true') {\n            custom.operationData[i].value = lastState;\n          }\n        }\n      }\n\n      for (let i = custom.analysisData.length - 1; i >= 0; i--) {\n        custom.labelList[0].push({\n          device: custom.targetDatasources[0],\n          index: i,\n          time: custom.analysisData[i].ts,\n          nextTime: custom.analysisData[i - 1] ? custom.analysisData[i - 1].ts : custom.endTs,\n          status: ANALYSIS_MAP[custom.analysisData[i].value],\n        });\n      }\n      if (custom.realDataNeeded) {\n        // 분석 값의 마지막과 실시간 값의 처음이 같으면 분석 값의 마지막 끝 시간을 실시간 값의 처음 값의 끝 시간으로 변경\n        if (_.isNil(custom.operationData[0])) {\n          custom.labelList[0][custom.labelList[0].length - 1].nextTime = custom.endTs;\n        } else if (\n          custom.operationData[0].value == ANALYSIS_MAP[custom.analysisData[custom.analysisData.length - 1].value]\n        ) {\n          if (custom.operationData[1]) {\n            custom.labelList[0][custom.labelList[0].length - 1].nextTime = custom.operationData[1].ts;\n          } else {\n            custom.labelList[0][custom.labelList[0].length - 1].nextTime = custom.endTs;\n          }\n        } else {\n          custom.labelList[0][custom.labelList[0].length - 1].nextTime = custom.operationData[0].ts;\n        }\n\n        // 남은 실시간 값이 있다면 레이블 리스트에 추가\n        for (let i = 0; i < custom.operationData.length; i++) {\n          custom.labelList[0].push({\n            device: custom.targetDatasources[0],\n            index: i,\n            time: custom.operationData[i].ts,\n            nextTime: custom.operationData[i + 1] ? custom.operationData[i + 1].ts : custom.endTs,\n            status: custom.operationData[i].value,\n          });\n        }\n      }\n\n      for (let i in custom.labelList[0]) {\n        custom.labelList[0][i].index = i;\n      }\n\n      custom.labelList.push(_.cloneDeep(custom.labelList[0]));\n\n      // TP_ModifiedState를 이용해서 custom.labelList[1]에 레이블값 기입\n      custom.mainData = [];\n      for (let i = custom.modifiedData.length - 1; i >= 0; i--) {\n        let targetData = custom.modifiedData[i];\n\n        custom.mainData.push({\n          range:\n            moment(targetData.startTs).format('YYYY-MM-DD HH:mm') +\n            ' ~ ' +\n            moment(targetData.endTs).format('YYYY-MM-DD HH:mm'),\n          state: t(`thingplus.state.${ANALYSIS_MAP[targetData.state]}`),\n          author: targetData.author,\n          phone: targetData.phone,\n          modifiedTs: moment(targetData.modifiedTs).format('YYYY-MM-DD HH:mm'),\n          targetData: targetData,\n        });\n\n        let newState = {\n          device: custom.targetDatasources[0],\n          index: 0,\n          time: targetData.startTs,\n          nextTime: targetData.endTs,\n          status: ANALYSIS_MAP[targetData.state],\n        };\n\n        for (let j = 0; j < custom.labelList[1].length; j++) {\n          if (targetData.startTs > custom.labelList[1][j].time && targetData.endTs < custom.labelList[1][j].nextTime) {\n            // 추가 싱테기 원본 상태 사이에 껴있는경우\n            custom.labelList[1].push({\n              device: custom.targetDatasources[0],\n              index: 0,\n              time: targetData.endTs,\n              nextTime: custom.labelList[1][j].nextTime,\n              status: custom.labelList[1][j].status,\n            });\n            custom.labelList[1][j].nextTime = targetData.startTs;\n          } else if (\n            targetData.startTs == custom.labelList[1][j].time &&\n            targetData.endTs < custom.labelList[1][j].nextTime\n          ) {\n            // 추가 상태와 원본 상태의 시작이 같은 경우 원본 상태의 시작을 추가 상태의 끝으로 변경\n            custom.labelList[1][j].time = targetData.endTs;\n            // 이전 상태와 추가 상태가 같은 경우 이전 상태는 삭제 하고 추가 상태의 시작 시간을 이전 상태의 시작 시간으로 변경\n            if (custom.labelList[1][j - 1] && custom.labelList[1][j - 1].status == targetData.state) {\n              newState.time = custom.labelList[1][j - 1].time;\n              custom.labelList[1].splice(j - 1, 1);\n            }\n          } else if (\n            targetData.startTs > custom.labelList[1][j].time &&\n            targetData.endTs == custom.labelList[1][j].nextTime\n          ) {\n            // 추가 상태와 원본 상태의 끝이 같은 경우 원본 상태의 시작을 추가 상태의 끝으로 변경\n            custom.labelList[1][j].nextTime = targetData.startTs;\n            // 다음 상태와 추가 상태가 같은 경우 다음 상태는 삭제 하고 추가 상태의 끝 시간을 다음 상태의 끝 시간으로 변경\n            if (custom.labelList[1][j + 1] && custom.labelList[1][j + 1].status == targetData.state) {\n              newState.nextTime = custom.labelList[1][j + 1].nextTime;\n              custom.labelList[1].splice(j + 1, 1);\n            }\n          } else if (\n            targetData.startTs == custom.labelList[1][j].time &&\n            targetData.endTs == custom.labelList[1][j].nextTime\n          ) {\n            custom.labelList[1].splice(j, 1);\n            j--;\n          }\n        }\n\n        custom.labelList[1].push(newState);\n        custom.labelList[1].sort((a, b) => {\n          return a.time - b.time;\n        });\n        for (let j in custom.labelList[1]) {\n          if (custom.labelList[1][j - 1] && custom.labelList[1][j].status == custom.labelList[1][j - 1].status) {\n            custom.labelList[1][j].time = custom.labelList[1][j - 1].time;\n            custom.labelList[1].splice(j - 1, 1);\n            j--;\n          }\n        }\n      }\n\n      $scope.isExistUnconnected = false;\n      for (let i = 0; i < custom.labelList[1].length; i++) {\n        // index 정리\n        custom.labelList[1][i].index = i;\n        if (custom.labelList[1][i].status == 'unconnected') {\n          $scope.isExistUnconnected = true;\n        }\n      }\n\n      initPage();\n      makeBody();\n      sortData();\n      insertData();\n      drawChart();\n    });\n}\n\nfunction drawChart() {\n  let { custom, $scope } = self.ctx;\n  custom.d3Config = {\n    viewWidth: 1920,\n    barHeight: 10,\n    barMargin: 30,\n    margin: {\n      top: 0,\n      right: 20,\n      bottom: 40,\n      left: 300,\n    },\n  };\n  custom.d3Config.viewHeight =\n    custom.d3Config.margin.top +\n    custom.d3Config.margin.bottom +\n    2 * (2 * custom.d3Config.barMargin + custom.d3Config.barHeight);\n\n  custom.$chartSection.empty();\n\n  // svg 영역 정의\n  custom.$d3 = d3\n    .select(custom.$chartSection[0])\n    .append('svg')\n    .attr('viewBox', `0 0 ${custom.d3Config.viewWidth} ${custom.d3Config.viewHeight}`)\n    .attr('width', custom.d3Config.viewWidth)\n    .attr('height', custom.d3Config.viewHeight);\n\n  drawXAxis();\n  drawBar();\n\n  custom.brushExtent = [];\n  let brush = d3\n    .brushX()\n    .extent([\n      [custom.d3Config.margin.left, custom.d3Config.margin.top],\n      [\n        custom.d3Config.viewWidth - custom.d3Config.margin.right,\n        custom.d3Config.viewHeight - custom.d3Config.margin.bottom,\n      ],\n    ])\n    .on('start brush', handleBrush);\n\n  custom.$d3.call(brush);\n}\n\nfunction drawXAxis() {\n  let { custom, $scope } = self.ctx;\n  let { viewWidth, viewHeight, margin } = custom.d3Config;\n  const width = viewWidth - margin.left - margin.right;\n  const height = margin.bottom;\n\n  // xAxis 그리기\n  custom.xAxis = d3\n    .scaleTime()\n    .domain(d3.extent([custom.startTs, custom.endTs]))\n    .range([0, width]);\n  custom.$xAxis = custom.$d3\n    .append('g')\n    .attr('class', 'axis')\n    .attr('transform', 'translate(' + margin.left + ', ' + (viewHeight - height) + ')')\n    .style('font-size', '12px')\n    .style('font-family', 'var(--tb-config-font-family)')\n    .style('color', 'var(--tb-service-font-4)')\n    .style('stroke-width', '0.1em')\n    .call(\n      d3\n        .axisBottom(custom.xAxis)\n        .ticks(10)\n        .tickFormat(date => formatDate(date))\n    );\n}\n\nfunction drawBar() {\n  let { custom, $scope, $container } = self.ctx;\n  let { viewWidth, barMargin, barHeight, margin } = custom.d3Config;\n  const x = custom.xAxis;\n\n  let dayLineList = [custom.startTs];\n  let interval = (_.floor((custom.endTs - custom.startTs) / (7 * DAY_MS)) + 1) * DAY_MS;\n  for (let i = custom.startTs; i < moment(custom.endTs).endOf('day').valueOf(); i += interval) {\n    if (moment(i).startOf('day').valueOf() > custom.startTs) {\n      dayLineList.push(moment(i).startOf('day').valueOf());\n    }\n  }\n  dayLineList.sort();\n\n  // 상태 변화 막대 그리기\n  for (let i in custom.targetDatasources) {\n    custom.$d3.append('g').attr('class', `bar-group-${i}`);\n\n    custom.$d3\n      .select(`.bar-group-${i}`)\n      .append('rect')\n      .attr('class', 'background')\n      .attr('width', viewWidth)\n      .attr('height', 2 * barMargin + barHeight)\n      .attr('y', margin.top + i * (2 * barMargin + barHeight))\n      .attr('fill', 'var(-tb-service-background-2)')\n      .attr('stroke', 'var(--tb-service-border-1)');\n\n    custom.$d3\n      .select(`.bar-group-${i}`)\n      .append('g')\n      .attr('class', `day-group-${i}`)\n      .selectAll('g')\n      .data(dayLineList)\n      .enter()\n      .append('rect')\n      .attr('class', 'day-line')\n      .attr('x', d => margin.left + x(d))\n      .attr('width', d => {\n        let endTs = d + interval;\n        if (endTs > custom.endTs) {\n          endTs = custom.endTs;\n        }\n        if (d == custom.startTs) {\n          endTs = moment(d)\n            .add(_.floor(interval / DAY_MS), 'days')\n            .startOf('day')\n            .valueOf();\n        }\n        return x(endTs) - x(d);\n      })\n      .attr('height', 2 * barMargin + barHeight)\n      .attr('y', margin.top + i * (2 * barMargin + barHeight))\n      .attr('fill', (d, i) => {\n        return i % 2 == 0 ? 'var(--tb-service-background-4)' : 'var(--tb-service-background-2)';\n      })\n      .attr('opacity', 0.5)\n      .attr('stroke', 'var(--tb-service-border-1)');\n\n    custom.$d3.select(`.bar-group-${i}`).append('g').attr('class', `bar-${i}`);\n    custom.$d3\n      .select(`.bar-${i}`)\n      .append('g')\n      .selectAll('g')\n      .data([custom.targetDatasources[i]])\n      .enter()\n      .append('text')\n      .text(function (d) {\n        if (d) {\n          return d.entityLabel;\n        }\n        return '';\n      })\n      .attr('class', 'bar-name')\n      .attr('width', margin.left - 90)\n      .attr('x', 20)\n      .attr('y', margin.top + i * (2 * barMargin + barHeight) + barMargin + barHeight / 2 + 4)\n      .call(dotme);\n\n    custom.$d3\n      .select(`.bar-${i}`)\n      .append('g')\n      .selectAll('g')\n      .data([custom.targetDatasources[i]])\n      .enter()\n      .append('rect')\n      .attr('class', `bar-label-box`)\n      .attr('x', margin.left - 60)\n      .attr('y', margin.top + i * (2 * barMargin + barHeight) + barMargin + barHeight / 2 - 9);\n\n    custom.$d3\n      .select(`.bar-${i}`)\n      .append('g')\n      .selectAll('g')\n      .data([custom.targetDatasources[i]])\n      .enter()\n      .append('text')\n      .text(function (d) {\n        if (d.tag && d.tag == 'modified') {\n          return t('thingplus.page.state-timeline.modified');\n        } else {\n          return t('thingplus.page.state-timeline.origin');\n        }\n      })\n      .attr('class', d => {\n        if (d.tag && d.tag == 'modified') {\n          return 'bar-label bar-label-modified';\n        } else {\n          return 'bar-label bar-label-origin';\n        }\n      })\n      .attr('x', margin.left - 40)\n      .attr('y', margin.top + i * (2 * barMargin + barHeight) + barMargin + barHeight / 2 + 4);\n\n    custom.$d3\n      .select(`.bar-${i}`)\n      .append('g')\n      .selectAll('g')\n      .data(custom.labelList[i])\n      .enter()\n      .append('rect')\n      .attr('class', d => `bar-rect bar-rect-${d.status} tooltip tooltip-${i}-${d.index}`)\n      .attr('fill', d => {\n        if (d.status == 'unconnected' || d.status == 'nodata') {\n          return STATUS.unconnected.color;\n        } else if (d.status == 'stopped') {\n          return STATUS.stopped.color;\n        } else if (d.status == 'waiting') {\n          return STATUS.waiting.color;\n        } else {\n          return STATUS.working.color;\n        }\n      })\n      .attr('x', d => margin.left + x(d.time))\n      .attr('y', margin.top + i * (2 * barMargin + barHeight) + barMargin)\n      .attr('width', d => x(d.nextTime) - x(d.time))\n      .attr('height', barHeight);\n\n    for (let j in custom.labelList[i]) {\n      let $content = $('<div></div>');\n      $content.css({\n        color: 'var(--tb-service-font-0)',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        lineHeight: 1.5,\n        borderRadius: `${8 / STANDARD_WINDOW_SIZE}vw`,\n        padding: `${12 / STANDARD_WINDOW_SIZE}vw`,\n      });\n\n      let startTime = moment(custom.labelList[i][j].time).format(custom.ymdhm);\n      let endTime = moment(custom.labelList[i][j].nextTime).format(custom.ymdhm);\n      let $date = $(`<div>${startTime} ~ ${endTime}</div>`);\n      $date.css({\n        textAlign: 'center',\n        fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n      });\n\n      let $description = $(`<div></div>`);\n      if (custom.labelList[i][j].status && custom.labelList[i][j].status !== '') {\n        $description.html(`(${t(STATUS[custom.labelList[i][j].status].content)})`);\n      }\n      $description.css({\n        textAlign: 'center',\n        fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n      });\n\n      $content.append($date);\n      $content.append($description);\n\n      $(`.tooltip-${i}-${custom.labelList[i][j].index}`, $container).tooltipster({\n        content: $content,\n        interactive: true,\n        theme: 'tooltipster-transparent',\n        trigger: 'hover',\n        delay: 200,\n      });\n    }\n  }\n}\n\nfunction formatDate(date) {\n  if (d3.timeHour(date) < date) {\n    return d3.timeFormat(t('thingplus.time-format.d3-hm'))(date);\n  } else if (d3.timeDay(date) < date) {\n    return d3.timeFormat(t('thingplus.time-format.d3-dh'))(date);\n  } else {\n    return d3.timeFormat(t('thingplus.time-format.d3-md'))(date);\n  }\n}\n\nfunction dotme(text) {\n  text.each(function () {\n    let text = d3.select(this);\n    let words = Array.from(text.text());\n\n    let ellipsis = text.text('').append('tspan').attr('class', 'elip').text('...');\n    let width = parseFloat(text.attr('width')) - ellipsis.node().getComputedTextLength();\n    let numWords = words.length;\n\n    let tspan = text.insert('tspan', ':first-child').text(words.join(''));\n    while (tspan.node().getComputedTextLength() > width && words.length) {\n      words.pop();\n      tspan.text(words.join(''));\n    }\n\n    if (words.length === numWords) {\n      ellipsis.remove();\n    }\n  });\n}\n\nfunction openChart(e, d, i) {\n  let { custom, $scope } = self.ctx;\n  let descriptors = self.ctx.actionsApi.getActionDescriptors('viewChart');\n  self.ctx.actionsApi.handleWidgetAction({}, descriptors[0], d.entity.id, d.entityName, custom, d.entityLabel);\n}\n\nfunction updateDashboardState() {\n  let { custom, $scope } = self.ctx;\n  let target,\n    param = {};\n  if ($scope.selectedDevice != '') {\n    target = custom.relations[$scope.selectedDevice];\n  } else {\n    window.alert(t('thingplus.help.select-equipment-1'));\n    return;\n  }\n  if (target) {\n    param = {\n      entityId: target.id,\n      entityName: target.name,\n      entityLabel: target.label,\n    };\n  }\n  if ($scope.selectedCustomerL1 != '') {\n    let customerL1 = custom.relations[$scope.selectedCustomerL1];\n    param.customerL1 = {\n      entityId: customerL1.id,\n      entityName: customerL1.name,\n      entityLabel: customerL1.label,\n    };\n  }\n  if ($scope.selectedCustomerL2 != '') {\n    let customerL2 = custom.relations[$scope.selectedCustomerL2];\n    param.customerL2 = {\n      entityId: customerL2.id,\n      entityName: customerL2.name,\n      entityLabel: customerL2.label,\n    };\n  }\n  if ($scope.selectedDevice != '') {\n    let device = custom.relations[$scope.selectedDevice];\n    param.device = {\n      entityId: device.id,\n      entityName: device.name,\n      entityLabel: device.label,\n    };\n  }\n  param.startTs = moment($scope.startDate).startOf('day').valueOf();\n  param.endTs = moment($scope.endDate).endOf('day').valueOf();\n  if (param.endTs > moment().valueOf()) {\n    param.endTs = moment().valueOf();\n  }\n  self.ctx.stateController.updateState('change-timeline', param, null);\n  self.ctx.updateAliases();\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n\nfunction handleCustomAction(descriptor) {\n  let { custom, $scope } = self.ctx;\n  self.ctx.actionsApi.handleWidgetAction(\n    {},\n    descriptor,\n    custom.targetDatasources[0].entity.id,\n    custom.targetDatasources[0].entityName,\n    custom,\n    custom.targetDatasources[0].entityLabel\n  );\n}\n\nfunction handleCellAction(descriptor, index) {\n  let { custom, $scope } = self.ctx;\n  let realIndex = $scope.trList[index - custom.startIndex].index;\n  self.ctx.actionsApi.handleWidgetAction(\n    {},\n    descriptor,\n    custom.targetDatasources[0].entity.id,\n    custom.targetDatasources[0].entityName,\n    custom.mainData[realIndex],\n    custom.targetDatasources[0].entityLabel\n  );\n}\n\nfunction handleBrush(e) {\n  let { custom, $scope } = self.ctx;\n  custom.brushExtent = e.selection;\n  let xRange = [\n    custom.brushExtent[0] - custom.d3Config.margin.left,\n    custom.brushExtent[1] - custom.d3Config.margin.left,\n  ];\n  custom.dateSelection = [\n    moment(custom.xAxis.invert(xRange[0])).valueOf(),\n    moment(custom.xAxis.invert(xRange[1])).valueOf(),\n  ];\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{\n  \"schema\": {\n    \"type\": \"object\",\n    \"title\": \"DataKeySettings\",\n    \"properties\": {\n      \"hidden\": {\n        \"title\": \"Hide from table\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"useCellStyleFunction\": {\n        \"title\": \"Use cell style function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellStyleFunction\": {\n        \"title\": \"Cell style function: f(value, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      },\n      \"useCellContentFunction\": {\n        \"title\": \"Use cell content function\",\n        \"type\": \"boolean\",\n        \"default\": false\n      },\n      \"cellContentFunction\": {\n        \"title\": \"Cell content function: f(value, ctx)\",\n        \"type\": \"string\",\n        \"default\": \"\"\n      }\n    },\n    \"required\": []\n  },\n  \"form\": [\n    \"hidden\",\n    \"useCellStyleFunction\",\n    {\n      \"key\": \"cellStyleFunction\",\n      \"type\": \"javascript\"\n    },\n    \"useCellContentFunction\",\n    {\n      \"key\": \"cellContentFunction\",\n      \"type\": \"javascript\"\n    }\n  ]\n}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"showLines\":true,\"fillLines\":false,\"showPoints\":false},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#f44336\",\"settings\":{},\"_hash\":0.3839044650345651,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"Change Timeline\",\"dropShadow\":false,\"enableFullscreen\":false,\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"1.6em\",\"font-weight\":500,\"letter-spacing\":\"var(--tb-config-letter-spacing)\",\"color\":\"var(--tb-service-font-5)\"},\"mobileHeight\":null,\"showTitleIcon\":false,\"titleTooltip\":\"\",\"widgetStyle\":{\"cursor\":\"default\",\"box-shadow\":\"0px 2px 10px 0 rgba(0, 0, 0, 0.04)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false,\"useDashboardTimewindow\":true}"
      }
    },
    {
      "alias": "state_timeline2",
      "name": "State Timeline T",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 4.5,
        "resources": [],
        "templateHtml": "<div id=\"widget\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <div class=\"widget-tab\" fxLayoutAlign=\"start center\" *ngIf=\"tabList && tabList.length > 1\">\n    <div\n      class=\"tab\"\n      *ngFor=\"let tab of tabList\"\n      fxLayoutAlign=\"center center\"\n      [ngClass]=\"{'active': tab.isActive}\"\n      (click)=\"selectTab(tab.id)\"\n    >\n      {{tab.label | translate}}\n    </div>\n  </div>\n  <header class=\"widget-header\" fxLayoutAlign=\"space-between center\">\n    <section class=\"widget-header-left-section\" fxFlex fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <div class=\"widget-title\" translate>title</div>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <div class=\"entity-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n        <span class=\"normal-label\" translate>thingplus.selector.device-selection</span>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel == 0\"\n          (ngModelChange)=\"setCustomerL1($event)\"\n          [ngModel]=\"selectedCustomerL1\"\n        >\n          <mat-option *ngFor=\"let customerL1 of customerL1List\" [value]=\"customerL1.value\">\n            {{customerL1.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select\n          class=\"entity-selector\"\n          [fxShow]=\"ownerLevel <= 1\"\n          (ngModelChange)=\"setCustomerL2($event)\"\n          [ngModel]=\"selectedCustomerL2\"\n        >\n          <mat-option *ngFor=\"let customerL2 of customerL2List\" [value]=\"customerL2.value\">\n            {{customerL2.name}}\n          </mat-option>\n        </mat-select>\n        <mat-select class=\"entity-selector\" (ngModelChange)=\"setDevice($event)\" [ngModel]=\"selectedDevice\">\n          <mat-option *ngFor=\"let device of deviceList\" [value]=\"device.value\"> {{device.label}} </mat-option>\n        </mat-select>\n      </div>\n      <div class=\"date-controller\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\" fxShow.lt-md=\"false\">\n        <div class=\"normal-label\" translate>thingplus.selector.date-selection</div>\n        <div class=\"date-selector\" fxLayoutAlign=\"space-between center\">\n          <mat-datetimepicker #startDatePicker type=\"date\"></mat-datetimepicker>\n          <input\n            class=\"hidden\"\n            matInput\n            readonly\n            [(ngModel)]=\"startDate\"\n            [max]=\"endDate\"\n            [matDatetimepicker]=\"startDatePicker\"\n            (ngModelChange)=\"setStartDate($event)\"\n          />\n          <input class=\"start-date\" (click)=\"startDatePicker.open()\" [(ngModel)]=\"viewStartDate\" readonly />\n          <div class=\"select-arrow\"></div>\n        </div>\n        <span class=\"normal-label\"> ~ </span>\n        <div class=\"date-selector\" fxLayoutAlign=\"space-between center\">\n          <mat-datetimepicker #endDatePicker type=\"date\"></mat-datetimepicker>\n          <input\n            class=\"hidden\"\n            matInput\n            readonly\n            [(ngModel)]=\"endDate\"\n            [min]=\"startDate\"\n            [max]=\"nowDate\"\n            [matDatetimepicker]=\"endDatePicker\"\n            (ngModelChange)=\"setEndDate($event)\"\n          />\n          <input class=\"end-date\" (click)=\"endDatePicker.open()\" [(ngModel)]=\"viewEndDate\" readonly />\n          <div class=\"select-arrow\"></div>\n        </div>\n      </div>\n      <button class=\"action-btn text-btn\" (click)=\"search($event)\" fxShow.lt-md=\"false\">\n        <span translate>thingplus.action.search</span>\n      </button>\n      <button class=\"action-btn text-btn\" (click)=\"openFilter($event)\" fxShow.gt-sm=\"false\">\n        <span translate>thingplus.action.search</span>\n      </button>\n    </section>\n  </header>\n  <header class=\"widget-sub-header\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"1em\">\n    <section class=\"widget-header-left-section\" fxFlex=\"100\" fxLayoutAlign=\"start center\" fxLayoutGap=\"1em\">\n      <section class=\"legend-section\" fxLayoutAlign=\"start center\" fxLayoutGap=\"2.4em\">\n        <div\n          class=\"legend-box\"\n          *ngFor=\"let legend of legendList\"\n          fxLayoutAlign=\"start center\"\n          fxLayoutGap=\"0.5em\"\n          (mouseenter)=\"legendEnter($event, legend)\"\n          (mouseleave)=\"legendLeave($event, legend)\"\n        >\n          <div class=\"legend-circle\" [ngStyle]=\"{'color': legend.color}\"></div>\n          <div class=\"legend-label\">{{legend.label}}</div>\n        </div>\n      </section>\n    </section>\n    <section class=\"widget-header-right-section\" fxFlex=\"100\" fxLayoutAlign=\"end center\" fxLayoutGap=\"1em\">\n      <div class=\"date-range\">{{dateRange}}</div>\n    </section>\n  </header>\n  <main class=\"widget-content\">\n    <section class=\"chart-section\"></section>\n  </main>\n  <footer class=\"widget-footer\" fxLayoutAlign=\"end center\">\n    <section class=\"page-section\" fxLayoutAlign=\"end center\" fxLayoutGap=\"0.5em\">\n      <div class=\"material-icons page-button first-button\" (click)=\"getFirstPage()\">first_page</div>\n      <div class=\"material-icons page-button prev-button\" (click)=\"getPrevPage()\">keyboard_arrow_left</div>\n      <div\n        class=\"page-button page-number-button\"\n        [class.big]=\"page.isBig\"\n        [class.active]=\"page.isActive\"\n        *ngFor=\"let page of pageList\"\n        (click)=\"changePage($event, page)\"\n      >\n        {{page.number}}\n      </div>\n      <div class=\"material-icons page-button next-button\" (click)=\"getNextPage()\">keyboard_arrow_right</div>\n      <div class=\"material-icons page-button last-button\" (click)=\"getLastPage()\">last_page</div>\n    </section>\n  </footer>\n</div>\n",
        "templateCss": "@import 'https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0';\n\n#widget {\n  width: 100%;\n  height: 100%;\n  font-size: 10px;\n  font-family: var(--tb-config-font-family);\n  user-select: none;\n  white-space: nowrap;\n}\n\n.widget-tab {\n  width: 100%;\n  height: 5em;\n  min-height: 30px;\n  background-color: var(--tb-service-background-2);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n.tab {\n  min-width: 8em;\n  height: 100%;\n  font-size: 1.4em;\n  font-weight: 500;\n  border-right: 1px solid var(--tb-service-border-1);\n  color: var(--tb-service-font-4);\n  cursor: pointer;\n  transition-property: color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.tab.active {\n  background-color: var(--tb-service-background-0);\n  color: var(--tb-service-font-5);\n  border-top: 0.2em solid var(--tb-service-accent);\n  border-bottom: 1px solid var(--tb-service-background-0);\n  box-sizing: content-box !important;\n}\n.tab:not(.active):hover {\n  color: var(--tb-service-font-4);\n}\n\n/*\n  Widget Header Area\n*/\nheader.widget-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n\n.normal-label {\n  font-size: 1.2em;\n  font-weight: 500;\n  line-height: 1.17;\n  letter-spacing: -0.03em;\n  color: var(--tb-service-font-3);\n  white-space: nowrap;\n}\n\n/* widget-header-right-section */\n/* Entity Controller */\n.widget-header-right-section .entity-controller {\n  margin-right: var(--tb-config-padding);\n}\n.widget-header-right-section .mat-select {\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .mat-select:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .mat-select-trigger {\n  width: 13em;\n  min-width: 130px;\n  padding: calc(9em / 14);\n  font-size: 1.4em;\n  line-height: 1;\n}\n.widget-header-right-section .mat-select-value {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  font-size: 1em;\n  color: var(--tb-service-font-5);\n}\n.widget-header-right-section .mat-select-arrow {\n  font-family: var(--tb-config-font-family);\n  font-weight: 300;\n  border-left: 0.4em solid transparent;\n  border-right: 0.4em solid transparent;\n  border-top: 0.4em solid;\n  color: var(--tb-service-accent);\n}\n/* Date Controller */\n.widget-header-right-section .date-controller {\n  margin-right: var(--tb-config-padding);\n}\n.widget-header-right-section .date-selector {\n  position: relative;\n  width: 13em;\n  min-width: 70px;\n  line-height: 1;\n  color: var(--tb-service-font-5);\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  padding: 0.6em 0.9em;\n  cursor: pointer;\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.widget-header-right-section .date-selector:hover {\n  border-color: var(--tb-service-border-3);\n}\n.widget-header-right-section .date-selector input {\n  font-family: var(--tb-config-font-family);\n  font-size: 1.4em;\n  font-weight: 300;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  line-height: 1.3;\n}\n.select-arrow {\n  border-left: 0.5em solid transparent;\n  border-right: 0.5em solid transparent;\n  border-top: 0.5em solid;\n  color: var(--tb-service-accent);\n}\n.widget-header-right-section .start-date,\n.widget-header-right-section .end-date {\n  all: unset;\n  width: 100%;\n}\n.widget-header-right-section .hidden {\n  visibility: hidden;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n/* Action Button */\n.widget-header-right-section .action-btn {\n  all: unset;\n  line-height: 1.3;\n  cursor: pointer;\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n  white-space: nowrap;\n}\n.widget-header-right-section .text-btn {\n  padding: 0.6em 1.6em;\n  background-color: var(--tb-service-accent);\n  border: 1px solid var(--tb-service-accent);\n}\n.widget-header-right-section .text-btn:hover {\n  background-color: var(--tb-service-accent-hover);\n  border-color: var(--tb-service-accent-hover);\n}\n.widget-header-right-section .text-btn:active {\n  background-color: var(--tb-service-accent-pressed);\n  border-color: var(--tb-service-accent-pressed);\n}\n.widget-header-right-section .text-btn span {\n  font-size: 1.4em;\n  font-weight: bold;\n  color: var(--tb-service-font-0);\n}\n/*\n  Widget Sub Header Area\n*/\nheader.widget-sub-header {\n  width: 100%;\n  padding: var(--tb-config-padding);\n  border-bottom: 1px solid var(--tb-service-border-1);\n}\n\n/* widget-header-left-section */\nheader.widget-sub-header .widget-header-left-section .legend-circle {\n  width: 0.6em;\n  height: 0.6em;\n  background-color: currentColor;\n}\nheader.widget-sub-header .widget-header-left-section .legend-label {\n  font-size: 1.2em;\n  color: var(--tb-service-font-4);\n}\nheader.widget-sub-header .widget-header-left-section .legend-box.hidden .legend-label {\n  text-decoration: line-through;\n}\n\n/* widget-header-right-section */\nheader.widget-sub-header .widget-header-right-section .date-range {\n  border: 1px solid var(--tb-service-border-0);\n  color: var(--tb-service-font-3);\n  font-size: 1em;\n  padding: 0.4em 0.8em;\n}\nheader.widget-sub-header .widget-header-right-section .action-btn {\n  all: unset;\n  line-height: 1;\n  cursor: pointer;\n  transition-property: background-color, border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n\n/*\n  Widget Content Area\n*/\nmain.widget-content {\n  width: 100%;\n  overflow-y: auto;\n}\nmain.widget-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\nmain.widget-content::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\nmain.widget-content::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n/* chart-section */\nsection.chart-section {\n  width: 100%;\n  max-width: 100%;\n  overflow-x: auto;\n}\nsection.chart-section::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\nsection.chart-section::-webkit-scrollbar-thumb {\n  border: 2px solid #00000000;\n  background-clip: padding-box;\n  background-color: var(--tb-service-accent);\n}\nsection.chart-section::-webkit-scrollbar-thumb:hover {\n  border: 1px solid #00000000;\n}\n\n.chart-section .domain {\n  display: none;\n}\n.chart-section .tooltip:hover {\n  stroke: var(--tb-service-font-5);\n}\n.chart-section svg {\n  width: 100%;\n  height: auto;\n}\n.chart-section .chart-action {\n  cursor: pointer;\n  fill: var(--tb-service-font-3);\n  font-size: 20px;\n  transition-property: fill;\n  transition-duration: var(--tb-config-color-duration);\n}\n.chart-section .chart-action:hover {\n  fill: var(--tb-service-font-5);\n}\n.chart-section .bar-name {\n  font-family: var(--tb-config-font-family);\n  font-size: 14px;\n  fill: var(--tb-service-font-5);\n}\n.chart-section .bar-rect {\n  transition-property: transform, height;\n  transition-duration: var(--tb-config-color-duration);\n}\n.chart-section .bar-rect-active {\n  transform: translateY(2px);\n  height: 6px;\n}\n.chart-section .bar-rect-target {\n  transform: translateY(-2px);\n  height: 14px;\n}\n\n/*\n  Widget Footer Area\n*/\nfooter.widget-footer {\n  width: 100%;\n  padding: var(--tb-config-padding);\n  background-color: var(--tb-service-background-0);\n  border-top: 1px solid var(--tb-service-border-1);\n}\n\n/* page-section */\n.page-section .page-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 2em;\n  min-width: 20px;\n  height: 2em;\n  min-height: 20px;\n  font-size: 1.2em;\n  background-color: var(--tb-service-background-0);\n  border: 1px solid var(--tb-service-border-0);\n  cursor: pointer;\n  color: var(--tb-service-font-4);\n  transition-property: border-color;\n  transition-duration: var(--tb-config-color-duration);\n}\n.page-section .first-button,\n.page-section .last-button,\n.page-section .prev-button,\n.page-section .next-button {\n  font-size: 1.6em;\n  width: 1.5em;\n  height: 1.5em;\n}\n.page-section .page-button:not(.active):hover {\n  border: 1px solid var(--tb-service-accent-hover);\n}\n.page-section .page-button:not(.active):active {\n  border: 1px solid var(--tb-service-accent-pressed);\n}\n.page-section .page-button.big-page {\n  width: 3.5em;\n  min-width: 35px;\n}\n.page-section .page-number-button.active {\n  border: 1px solid var(--tb-service-accent);\n  color: var(--tb-service-accent);\n}\n\n@media (min-width: 960px) and (max-width: 1280px) {\n  /* chart-section */\n  .chart-section svg {\n    width: 150%;\n    height: auto;\n  }\n}\n\n@media (min-width: 600px) and (max-width: 960px) {\n  /* chart-section */\n  .chart-section svg {\n    width: 225%;\n    height: auto;\n  }\n}\n\n@media (max-width: 599px) {\n  /* chart-section */\n  .chart-section svg {\n    width: 300%;\n    height: auto;\n  }\n}\n",
        "controllerScript": "const ENTITY_TYPE = ['TENANT', 'CUSTOMER_L1', 'CUSTOMER_L2'];\nconst STATUS = {\n  stopped: { priority: 0, content: 'thingplus.state.stopped', color: 'var(--tb-service-state-stopped)' },\n  waiting: { priority: 1, content: 'thingplus.state.waiting', color: 'var(--tb-service-state-waiting)' },\n  working: { priority: 2, content: 'thingplus.state.working', color: 'var(--tb-service-state-working)' },\n  trial: { priority: 3, content: 'thingplus.state.trial', color: 'var(--tb-service-state-trial)' },\n  unconnected: { priority: 4, content: 'thingplus.state.unconnected', color: 'var(--tb-service-state-unconnected)' },\n};\nconst ANALYSIS_MAP = ['stopped', 'waiting', 'working', 'trial', 'unconnected'];\nconst OPERATION_MAP = {\n  WORK: 'working',\n  WAIT: 'waiting',\n  STOP: 'stopped',\n};\nconst STANDARD_WINDOW_SIZE = 1920 / 100;\nconst DAY_MS = 86400000;\nself.onInit = async function () {\n  self.ctx.custom = {};\n  let { custom, $scope } = self.ctx;\n  defineVariables();\n  setTitle();\n  linkEvent();\n  makeTab();\n  getDashboardParameter();\n  initPage();\n  self.onResize();\n\n  if (!custom.isSample) {\n    // 현재 사용자의 Root 엔터티로부터 관계 트리 형성\n    custom.relations[custom.rootEntity.id.id] = {\n      id: custom.rootEntity.id,\n      name: custom.rootEntity.name,\n      parent: '',\n      child: [],\n    };\n    $scope.ownerLevel = await getCurrentLevel();\n    getCustomer([custom.relations[custom.rootEntity.id.id]]);\n  }\n\n  updateView();\n  self.ctx.detectChanges();\n};\n\nself.onResize = function () {\n  self.ctx.custom.resizeThrottle();\n};\n\nself.onDataUpdated = function () {};\n\nself.actionSources = function () {\n  return {\n    toEdit: {\n      name: 'To Edit',\n      multiple: false,\n    },\n    viewChart: {\n      name: 'View Chart',\n      multiple: false,\n    },\n  };\n};\n\nself.typeParameters = function () {\n  return {\n    maxDatasources: -1,\n    maxDataKeys: -1,\n    dataKeysOptional: true,\n  };\n};\n\n// Define Variables\nfunction defineVariables() {\n  let { custom, $scope, $container } = self.ctx;\n\n  // Define Tags\n  custom.$widget = $('#widget', $container);\n  custom.$widgetHeader = $('.widget-header', $container);\n  custom.$widgetTitle = $('.widget-title', $container);\n  custom.$widgetContent = $('.widget-content', $container);\n  custom.$dateRange = $('.date-range', $container);\n  custom.$chartSection = $('.chart-section', $container);\n  custom.$widgetFooter = $('.widget-footer', $container);\n\n  $scope.tabList = [];\n  $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n  $scope.deviceList = [\n    { name: t('thingplus.selector.entire-device'), label: t('thingplus.selector.entire-device'), value: '' },\n  ];\n  $scope.selectedCustomerL1 = '';\n  $scope.selectedCustomerL2 = '';\n  $scope.selectedDevice = '';\n  $scope.ownerLevel = 2;\n  $scope.legendList = [\n    { key: 'stopped', color: 'var(--tb-service-state-stopped)', label: t('thingplus.state.stopped') },\n    { key: 'waiting', color: 'var(--tb-service-state-waiting)', label: t('thingplus.state.waiting') },\n    { key: 'working', color: 'var(--tb-service-state-working)', label: t('thingplus.state.working') },\n    { key: 'trial', color: 'var(--tb-service-state-trial)', label: t('thingplus.state.trial') },\n    { key: 'unconnected', color: 'var(--tb-service-state-unconnected)', label: t('thingplus.state.unconnected') },\n  ];\n\n  // Define Normal Variables\n  custom.relations = {};\n  custom.resizeThrottle = _.throttle(resize, 200, { trailing: true });\n  custom.ownerDatasource = self.ctx.defaultSubscription.configuredDatasources[0];\n  custom.rootEntity = custom.ownerDatasource.entity;\n  custom.isSample = custom.ownerDatasource.type == 'function';\n  custom.hiddenDatasources = self.ctx.datasources.filter(x => x.entityAliasId === custom.ownerDatasource.entityAliasId);\n  custom.mainDatasources = self.ctx.datasources.filter(\n    x => x.entityAliasId !== custom.ownerDatasource.entityAliasId && x.entityType == 'DEVICE'\n  );\n  custom.originDataKeys = self.ctx.defaultSubscription.configuredDatasources[1].dataKeys;\n  custom.targetDatasources = [];\n  custom.t = t;\n  custom.ymdhms = t('thingplus.time-format.ymdhms');\n  custom.ymdhm = t('thingplus.time-format.ymdhm');\n  custom.ymd = t('thingplus.time-format.ymd');\n  custom.currentPage = 1;\n  custom.countPerPage = 10;\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n  }\n  custom.widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (custom.widgetFontSize < 6.25) {\n    custom.widgetFontSize = 6.25;\n  }\n\n  let now = moment().valueOf();\n  custom.endTs = moment(now).valueOf();\n  custom.startTs = moment(custom.endTs).subtract(7, 'days').valueOf();\n  custom.analysisEndTs = moment(custom.endTs).subtract(1, 'hours').startOf('hours').valueOf();\n  custom.realDataNeeded = true;\n  $scope.dateRange = `${moment(custom.startTs).format(custom.ymdhms)} ~ ${moment(custom.endTs).format(custom.ymdhms)}`;\n  $scope.startDate = moment(custom.startTs).toDate();\n  $scope.endDate = moment(custom.endTs).toDate();\n  $scope.viewStartDate = moment(custom.startTs).format(custom.ymd);\n  $scope.viewEndDate = moment(custom.endTs).format(custom.ymd);\n  $scope.nowDate = moment(custom.endTs).toDate();\n}\n\n// Create Widget Title\nfunction setTitle() {\n  let { custom } = self.ctx;\n  custom.$widgetTitle.html(t(self.ctx.widget.config.title));\n  custom.$widgetTitle.css(self.ctx.widget.config.titleStyle);\n}\n\nfunction linkEvent() {\n  let { custom, $scope } = self.ctx;\n  $scope.selectTab = function (e) {\n    let state = e || 'default';\n    let param = custom.dashboardParams || {};\n    self.ctx.stateController.updateState(state, param, null);\n  };\n  $scope.setCustomerL1 = function (e) {\n    $scope.selectedCustomerL1 = e;\n    $scope.selectedCustomerL2 = '';\n    $scope.selectedDevice = '';\n    changeCustomerL2List();\n    changeDeviceList();\n  };\n  $scope.setCustomerL2 = function (e) {\n    $scope.selectedCustomerL2 = e;\n    $scope.selectedDevice = '';\n    changeDeviceList();\n  };\n  $scope.setDevice = function (e) {\n    $scope.selectedDevice = e;\n  };\n  $scope.search = function (e) {\n    updateDashboardState();\n  };\n  $scope.setStartDate = function (e) {\n    $scope.startDate = e;\n    $scope.viewStartDate = moment(e).format(custom.ymd);\n  };\n  $scope.setEndDate = function (e) {\n    $scope.endDate = e;\n    $scope.viewEndDate = moment(e).format(custom.ymd);\n  };\n  $scope.openFilter = function (e) {\n    let descriptor = self.ctx.actionsApi.getActionDescriptors('filterAction')[0];\n    self.ctx.actionsApi.handleWidgetAction(\n      {},\n      descriptor,\n      custom.ownerDatasource.entity.id,\n      custom.ownerDatasource.entityName,\n      {},\n      custom.ownerDatasource.entityLabel\n    );\n  };\n  $scope.legendEnter = function (e, d) {\n    $(`.bar-rect`).addClass('bar-rect-active');\n    $(`.bar-rect-${d.key}`).removeClass('bar-rect-active');\n    $(`.bar-rect-${d.key}`).addClass('bar-rect-target');\n  };\n  $scope.legendLeave = function (e, d) {\n    $(`.bar-rect`).removeClass('bar-rect-active');\n    $(`.bar-rect`).removeClass('bar-rect-target');\n  };\n  $scope.getPrevPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage--;\n      initPage();\n      updateView();\n    }\n  };\n  $scope.getNextPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage++;\n      initPage();\n      updateView();\n    }\n  };\n  $scope.getFirstPage = function () {\n    if (custom.currentPage > 1) {\n      custom.currentPage = 1;\n      initPage();\n      updateView();\n    }\n  };\n  $scope.getLastPage = function () {\n    if (custom.currentPage < custom.totalPage) {\n      custom.currentPage = custom.totalPage;\n      initPage();\n      updateView();\n    }\n  };\n  $scope.changePage = function (e, page) {\n    if (!page.isActive) {\n      custom.currentPage = page.number;\n      initPage();\n      updateView();\n    }\n  };\n}\n\n// 대시보드 상태 탭 생성\nfunction makeTab() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return;\n  $scope.tabList = [];\n  for (let i in self.ctx.stateController.statesValue) {\n    $scope.tabList.push({\n      label: 'thingplus.menu.' + i,\n      id: i,\n      isActive: i == self.ctx.stateController.stateValue,\n    });\n  }\n}\n\nfunction getDashboardParameter() {\n  let { custom, $scope } = self.ctx;\n  if (custom.isSample) return {};\n  custom.dashboardParams = self.ctx.stateController.getStateParams();\n  if (custom.dashboardParams) {\n    if (custom.dashboardParams.customerL1) {\n      $scope.selectedCustomerL1 = custom.dashboardParams.customerL1.entityId.id;\n    }\n    if (custom.dashboardParams.customerL2) {\n      $scope.selectedCustomerL2 = custom.dashboardParams.customerL2.entityId.id;\n    }\n    if (custom.dashboardParams.entityId && custom.dashboardParams.entityId.entityType == 'DEVICE') {\n      $scope.selectedDevice = custom.dashboardParams.entityId.id;\n    }\n    if (custom.dashboardParams.startTs) {\n      custom.startTs = custom.dashboardParams.startTs;\n      $scope.startDate = moment(custom.startTs).toDate();\n      $scope.viewStartDate = moment(custom.startTs).format(custom.ymd);\n    }\n    if (custom.dashboardParams.endTs) {\n      custom.endTs = moment(custom.dashboardParams.endTs).endOf('day').valueOf();\n      if (custom.endTs > moment().valueOf()) {\n        custom.endTs = moment().valueOf();\n      }\n      $scope.endDate = moment(custom.endTs).toDate();\n      $scope.viewEndDate = moment(custom.endTs).format(custom.ymd);\n      if (custom.endTs > moment().subtract(1, 'hours').startOf('hours').valueOf()) {\n        custom.realDataNeeded = true;\n        custom.analysisEndTs = moment(custom.endTs).subtract(1, 'hours').startOf('hours').valueOf();\n      } else {\n        custom.realDataNeeded = false;\n        custom.analysisEndTs = custom.endTs;\n      }\n    }\n    $scope.dateRange = `${moment(custom.startTs).format(custom.ymdhms)} ~ ${moment(custom.endTs).format(\n      custom.ymdhms\n    )}`;\n    self.ctx.detectChanges();\n  }\n}\n\nfunction resize() {\n  let { custom } = self.ctx;\n  // 위젯 전체 크기 조절\n  let originWidth = self.ctx.settings.widget.originWidth;\n  if (self.ctx.isMobile) {\n    originWidth = 960;\n    if (self.ctx.width < 600) {\n      originWidth = 600;\n    }\n  }\n\n  custom.widgetFontSize = _.round((self.ctx.width / originWidth) * 10, 2);\n  if (custom.widgetFontSize < 6.25) {\n    custom.widgetFontSize = 6.25;\n  }\n  custom.$widget.css('font-size', `${custom.widgetFontSize}px`);\n\n  // Header Height를 제외한 영역을 Main의 Height로 설정\n  let headerHeight = custom.$widgetHeader.outerHeight(true);\n  let footerHeight = custom.$widgetFooter.outerHeight(true);\n  custom.$widgetContent.css('height', `calc(100% - ${headerHeight + footerHeight}px)`);\n\n  self.ctx.detectChanges();\n}\n\n// 페이지에 맞는 데이터 출력 및 페이지 표시\nfunction initPage() {\n  let { custom, $scope } = self.ctx;\n  custom.totalPage = Math.ceil(custom.mainDatasources.length / custom.countPerPage);\n  // 현재 페이지 기준 왼쪽이 5개 오른쪽이 4개가 되도록\n  custom.startPage = custom.currentPage - 5;\n  // 6번까지는 왼쪽이 5개 이하이므로 시작을 1로 고정\n  if (custom.currentPage <= 6) {\n    custom.startPage = 1;\n  }\n  // 마지막에서 5칸 아래페이지 부터는 오른쪽이 4개 이하이므로 시작을 마지막에서 9을 뺀것으로 고정\n  if (custom.totalPage >= 10 && custom.currentPage > custom.totalPage - 5) {\n    custom.startPage = custom.totalPage - 9;\n  }\n  custom.endPage = custom.startPage + 9;\n  // 끝 페이지가 총 페이지보다 크면 총페이지를 끝 페이지로\n  if (custom.endPage > custom.totalPage) {\n    custom.endPage = custom.totalPage;\n  }\n\n  // 페이지 리스트 구성\n  $scope.pageList = [];\n  for (let i = custom.startPage; i <= custom.endPage; i++) {\n    $scope.pageList.push({\n      number: i,\n      isBig: i > 99,\n      isActive: custom.currentPage == i,\n    });\n  }\n\n  custom.startIndex = (custom.currentPage - 1) * custom.countPerPage;\n  custom.endIndex = custom.currentPage * custom.countPerPage - 1;\n  // 끝 페이지가 데이터 소스의 길이보다 많으면 데이터 소스의 길이로 변경\n  if (custom.endIndex > custom.mainDatasources.length - 1) {\n    custom.endIndex = custom.mainDatasources.length - 1;\n  }\n  custom.targetDatasources = custom.mainDatasources.slice(custom.startIndex, custom.endIndex + 1);\n}\n\nasync function getCurrentLevel() {\n  let { custom } = self.ctx;\n  if (custom.rootEntity.id.entityType == 'TENANT') {\n    return 0;\n  } else {\n    let result = await self.ctx.attributeService\n      .getEntityAttributes(custom.rootEntity.id, 'SERVER_SCOPE', ['customerType'])\n      .toPromise();\n    if (result && result[0]) {\n      if (result[0].value == ENTITY_TYPE[1]) {\n        return 1;\n      } else {\n        return 2;\n      }\n    }\n  }\n}\n\nfunction getCustomer(entities) {\n  let { custom } = self.ctx;\n  let promises = [];\n  if (entities.length > 0) {\n    for (let i = 0; i < entities.length; i++) {\n      promises.push(self.ctx.entityRelationService.findInfoByFrom(entities[i].id));\n    }\n    self.ctx.rxjs.forkJoin(promises).subscribe(childs => {\n      let newChild = [];\n      for (let j = 0; j < childs.length; j++) {\n        for (let k = 0; k < childs[j].length; k++) {\n          custom.relations[childs[j][k].to.id] = {\n            id: childs[j][k].to,\n            name: childs[j][k].toName,\n            parent: entities[j],\n            child: [],\n            type: 'CUSTOMER',\n          };\n          custom.relations[entities[j].id.id].child.push(custom.relations[childs[j][k].to.id]);\n          if (childs[j][k].to.entityType === 'USER') {\n            custom.relations[childs[j][k].to.id].type = 'USER';\n          }\n          if (childs[j][k].to.entityType === 'DEVICE') {\n            custom.relations[childs[j][k].to.id].type = 'DEVICE';\n          }\n          if (childs[j][k].to.entityType === 'ASSET') {\n            custom.relations[childs[j][k].to.id].type = 'ASSET';\n          }\n          if (childs[j][k].to.entityType === 'CUSTOMER') {\n            newChild.push(custom.relations[childs[j][k].to.id]);\n          }\n        }\n      }\n      getCustomer(newChild);\n    });\n  } else {\n    distributeLevel();\n  }\n}\n\n// hierarchy 레벨에 따라 배열에 따로 저장\nfunction distributeLevel() {\n  let { custom, $scope } = self.ctx;\n  let depth = $scope.ownerLevel;\n  let root = custom.relations[custom.rootEntity.id.id];\n  root.type = ENTITY_TYPE[depth];\n  for (let i in root.child) {\n    if (root.child[i].type == 'CUSTOMER') {\n      root.child[i].type = ENTITY_TYPE[depth + 1];\n    }\n    for (let j in root.child[i].child) {\n      if (root.child[i].child[j].type == 'CUSTOMER') {\n        root.child[i].child[j].type = ENTITY_TYPE[depth + 2];\n      }\n    }\n  }\n  custom.customerL1List = [];\n  custom.customerL2List = [];\n  custom.deviceList = [];\n\n  for (let i in custom.relations) {\n    if (custom.relations[i].type == ENTITY_TYPE[1]) {\n      custom.customerL1List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == ENTITY_TYPE[2]) {\n      custom.customerL2List.push(custom.relations[i]);\n    }\n    if (custom.relations[i].type == 'DEVICE') {\n      custom.deviceList.push(custom.relations[i]);\n    }\n  }\n\n  getDeviceInfo();\n}\n\nfunction getDeviceInfo() {\n  let { custom, $scope } = self.ctx;\n  let observables = [];\n  custom.deviceList = [];\n  for (let i in custom.customerL2List) {\n    let customerId = custom.customerL2List[i].id.id;\n    observables.push(self.ctx.http.get(`/api/customer/${customerId}/deviceInfos?pageSize=50000&page=0`));\n  }\n\n  self.ctx.rxjs.forkJoin(observables).subscribe(devices => {\n    for (let i in devices) {\n      for (let j in devices[i].data) {\n        custom.relations[devices[i].data[j].id.id].label =\n          devices[i].data[j].label != '' ? devices[i].data[j].label : devices[i].data[j].name;\n        custom.deviceList.push(custom.relations[devices[i].data[j].id.id]);\n      }\n    }\n\n    $scope.customerL1List = [{ name: t('thingplus.selector.entire-customerL1'), value: '' }];\n    $scope.customerL1List = $scope.customerL1List.concat(\n      custom.customerL1List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n\n    changeCustomerL2List();\n    changeDeviceList();\n    self.ctx.detectChanges();\n  });\n}\n\n// Customer L2 리스트 갱신\nfunction changeCustomerL2List() {\n  let { custom, $scope } = self.ctx;\n  $scope.customerL2List = [{ name: t('thingplus.selector.entire-customerL2'), value: '' }];\n\n  if ($scope.selectedCustomerL1 === '') {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List.map(x => {\n        return { name: x.name, value: x.id.id };\n      })\n    );\n  } else {\n    $scope.customerL2List = $scope.customerL2List.concat(\n      custom.customerL2List\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL1)\n        .map(x => {\n          return { name: x.name, value: x.id.id };\n        })\n    );\n  }\n}\n\n// 디바이스 리스트 갱신\nfunction changeDeviceList() {\n  let { custom, $scope } = self.ctx;\n  $scope.deviceList = [];\n\n  if ($scope.selectedCustomerL2 === '') {\n    if ($scope.selectedCustomerL1 === '') {\n      $scope.deviceList = $scope.deviceList.concat(\n        custom.deviceList.map(x => {\n          return { name: x.name, label: x.label, value: x.id.id };\n        })\n      );\n    } else {\n      $scope.deviceList = $scope.deviceList.concat(\n        custom.deviceList\n          .filter(x => x.parent.parent.id.id === $scope.selectedCustomerL1)\n          .map(x => {\n            return { name: x.name, label: x.label, value: x.id.id };\n          })\n      );\n    }\n  } else {\n    $scope.deviceList = $scope.deviceList.concat(\n      custom.deviceList\n        .filter(x => x.parent.id.id === $scope.selectedCustomerL2)\n        .map(x => {\n          return { name: x.name, label: x.label, value: x.id.id };\n        })\n    );\n  }\n  $scope.deviceList.sort((a, b) => {\n    if (a.label > b.label) return 1;\n    if (a.label < b.label) return -1;\n    return 0;\n  });\n  $scope.deviceList = [\n    { name: t('thingplus.selector.entire-device'), label: t('thingplus.selector.entire-device'), value: '' },\n  ].concat($scope.deviceList);\n}\n\nasync function updateView() {\n  let { custom, $scope } = self.ctx;\n  custom.keyDatas = [];\n  for (let i in custom.targetDatasources) {\n    custom.keyDatas.push({\n      TEST_AnalysisState: [{ ts: custom.startTs, value: '4' }],\n      TP_OperationState: [],\n    });\n  }\n  let datas = await getInitialStatus();\n  for (let i in datas) {\n    for (let j in datas[i]) {\n      if (custom.keyDatas[i][j][0]) {\n        custom.keyDatas[i][j][0].value = datas[i][j][0].value;\n      }\n    }\n  }\n  let realTimeData = await getInitialRealTimeStatus();\n  for (let i in realTimeData) {\n    for (let j in realTimeData[i]) {\n      custom.keyDatas[i][j].push(realTimeData[i][j][0]);\n    }\n  }\n  let realDatas = [];\n  if (custom.realDataNeeded) {\n    realDatas = await loadRealTimeData();\n    custom.operationData = [];\n    custom.connectionData = [];\n    for (let i in realDatas) {\n      if (!custom.operationData[i]) {\n        custom.operationData[i] = [];\n      }\n      if (!custom.connectionData[i]) {\n        custom.connectionData[i] = [];\n      }\n      if (realDatas[i].TP_OperationState) {\n        custom.operationData[i] = realDatas[i].TP_OperationState.map(x => {\n          return { ts: x.ts, value: OPERATION_MAP[x.value] };\n        });\n      }\n      if (realDatas[i].TP_ConnectionState) {\n        custom.connectionData[i] = _.cloneDeep(realDatas[i].TP_ConnectionState);\n      }\n    }\n  }\n\n  loadData();\n}\n\nasync function getInitialStatus() {\n  let { custom, $scope } = self.ctx;\n  if (!custom.isSample) {\n    let keys = ['TEST_AnalysisState'];\n    let promiseList = [];\n    for (let i in custom.targetDatasources) {\n      let entityId = custom.targetDatasources[i].entityId;\n      promiseList.push(\n        self.ctx.http\n          .get(\n            `/api/plugins/telemetry/DEVICE/${entityId}/values/timeseries?limit=1&agg=NONE&keys=${keys.join(\n              ','\n            )}&startTs=0&endTs=${custom.startTs}`\n          )\n          .toPromise()\n      );\n    }\n    return await Promise.all(promiseList);\n  }\n}\n\nasync function getInitialRealTimeStatus() {\n  let { custom, $scope } = self.ctx;\n  if (!custom.isSample) {\n    let keys = ['TP_OperationState'];\n    let promiseList = [];\n    for (let i in custom.targetDatasources) {\n      let entityId = custom.targetDatasources[i].entityId;\n      promiseList.push(\n        self.ctx.http\n          .get(\n            `/api/plugins/telemetry/DEVICE/${entityId}/values/timeseries?limit=1&agg=NONE&keys=${keys.join(\n              ','\n            )}&startTs=0&endTs=${custom.analysisEndTs}`\n          )\n          .toPromise()\n      );\n    }\n    return await Promise.all(promiseList);\n  }\n}\n\nasync function loadRealTimeData() {\n  let { custom, $scope } = self.ctx;\n  if (!custom.isSample) {\n    let keys = ['TP_OperationState', 'TP_ConnectionState'];\n    let promiseList = [];\n    for (let i in custom.targetDatasources) {\n      let entityId = custom.targetDatasources[i].entityId;\n      promiseList.push(\n        self.ctx.http\n          .get(\n            `/api/plugins/telemetry/DEVICE/${entityId}/values/timeseries?limit=50000&agg=NONE&keys=${keys.join(\n              ','\n            )}&startTs=${custom.analysisEndTs}&endTs=${custom.endTs}`\n          )\n          .toPromise()\n      );\n    }\n    return await Promise.all(promiseList);\n  }\n}\n\nfunction loadData() {\n  let { custom, $scope } = self.ctx;\n  let keys = custom.originDataKeys.map(x => x.name);\n  let promises = [];\n  for (let i in custom.targetDatasources) {\n    let entityId = custom.targetDatasources[i].entityId;\n    promises.push(\n      self.ctx.http.get(\n        `/api/plugins/telemetry/DEVICE/${entityId}/values/timeseries?limit=50000&agg=NONE&keys=${keys.join(\n          ','\n        )}&startTs=${custom.startTs}&endTs=${custom.endTs}`\n      )\n    );\n  }\n  self.ctx.rxjs.forkJoin(promises).subscribe(datas => {\n    custom.analysisData = [];\n    custom.modifiedData = [];\n    for (let i in datas) {\n      if (datas[i].TEST_AnalysisState) {\n        custom.analysisData.push(_.cloneDeep(datas[i].TEST_AnalysisState));\n      } else {\n        custom.analysisData.push([]);\n      }\n      if (!custom.modifiedData[i]) {\n        custom.modifiedData[i] = [];\n      }\n      custom.analysisData[i].push(custom.keyDatas[i].TEST_AnalysisState[0]);\n\n      if (datas[i].TP_ModifiedState) {\n        custom.modifiedData[i] = _.cloneDeep(datas[i].TP_ModifiedState);\n      }\n      for (let j in custom.modifiedData[i]) {\n        custom.modifiedData[i][j] = JSON.parse(custom.modifiedData[i][j].value);\n      }\n    }\n\n    // 레이블 리스트의 틀 마련\n    custom.labelList = [];\n    for (let i in custom.targetDatasources) {\n      custom.labelList.push([]);\n    }\n\n    for (let i in custom.labelList) {\n      if (custom.realDataNeeded) {\n        let lastState = custom.keyDatas[i].TP_OperationState[0].value;\n\n        custom.operationData[i] = custom.operationData[i].concat(custom.connectionData[i]);\n        custom.operationData[i].sort((a, b) => {\n          if (a.ts == b.ts) {\n            if (b.value == 'true' || b.value == 'false') {\n              return 1;\n            } else {\n              return -1;\n            }\n          }\n          return a.ts - b.ts;\n        });\n\n        for (let j = 0; j < custom.operationData[i].length; j++) {\n          if (custom.operationData[i][j].value === 'false') {\n            custom.operationData[i][j].value = 'unconnected';\n            if (custom.operationData[i][j - 1]) {\n              lastState = custom.operationData[i][j - 1].value;\n            }\n          }\n          if (custom.operationData[i][j].value === 'true') {\n            custom.operationData[i][j].value = lastState;\n          }\n        }\n      }\n      for (let j = custom.analysisData[i].length - 1; j >= 0; j--) {\n        custom.labelList[i].push({\n          device: custom.targetDatasources[i],\n          index: j,\n          time: custom.analysisData[i][j].ts,\n          nextTime: custom.analysisData[i][j - 1] ? custom.analysisData[i][j - 1].ts : custom.analysisEndTs,\n          status: ANALYSIS_MAP[custom.analysisData[i][j].value],\n          analysis: true,\n        });\n      }\n      if (custom.realDataNeeded) {\n        // 분석 값의 마지막과 실시간 값의 처음이 같으면 분석 값의 마지막 끝 시간을 실시간 값의 처음 값의 끝 시간으로 변경\n        if (_.isNil(custom.operationData[i][0])) {\n          custom.labelList[i][custom.labelList[i].length - 1].nextTime = custom.endTs;\n        } else if (\n          custom.operationData[i][0].value ==\n          ANALYSIS_MAP[custom.analysisData[i][custom.analysisData[i].length - 1].value]\n        ) {\n          if (custom.operationData[i][1]) {\n            custom.labelList[i][custom.labelList[i].length - 1].nextTime = custom.operationData[i][1].ts;\n          } else {\n            custom.labelList[i][custom.labelList[i].length - 1].nextTime = custom.endTs;\n          }\n        } else {\n          custom.labelList[i][custom.labelList[i].length - 1].nextTime = custom.operationData[i][0].ts;\n        }\n\n        // 남은 실시간 값이 있다면 레이블 리스트에 추가\n        for (let j = 0; j < custom.operationData[i].length; j++) {\n          custom.labelList[i].push({\n            device: custom.targetDatasources[0],\n            index: j,\n            time: custom.operationData[i][j].ts,\n            nextTime: custom.operationData[i][j + 1] ? custom.operationData[i][j + 1].ts : custom.endTs,\n            status: custom.operationData[i][j].value,\n          });\n        }\n      }\n\n      for (let j = 0; j < custom.modifiedData[i].length; j++) {\n        let targetData = custom.modifiedData[i][j];\n\n        let newState = {\n          device: custom.targetDatasources[i],\n          index: 0,\n          time: targetData.startTs,\n          nextTime: targetData.endTs,\n          status: ANALYSIS_MAP[targetData.state],\n        };\n        for (let k = 0; k < custom.labelList[i].length; k++) {\n          if (targetData.startTs > custom.labelList[i][k].time && targetData.endTs < custom.labelList[i][k].nextTime) {\n            // 추가 싱테기 원본 상태 사이에 껴있는경우\n            custom.labelList[i].push({\n              device: custom.targetDatasources[i],\n              index: 0,\n              time: targetData.endTs,\n              nextTime: custom.labelList[i][k].nextTime,\n              status: custom.labelList[i][k].status,\n            });\n            custom.labelList[i][k].nextTime = targetData.startTs;\n          } else if (\n            targetData.startTs == custom.labelList[i][k].time &&\n            targetData.endTs < custom.labelList[i][k].nextTime\n          ) {\n            // 추가 상태와 원본 상태의 시작이 같은 경우 원본 상태의 시작을 추가 상태의 끝으로 변경\n            custom.labelList[i][k].time = targetData.endTs;\n            // 이전 상태와 추가 상태가 같은 경우 이전 상태는 삭제 하고 추가 상태의 시작 시간을 이전 상태의 시작 시간으로 변경\n            if (custom.labelList[i][k - 1] && custom.labelList[i][k - 1].status == targetData.state) {\n              newState.time = custom.labelList[i][k - 1].time;\n              custom.labelList[i].splice(k - 1, 1);\n            }\n          } else if (\n            targetData.startTs > custom.labelList[i][k].time &&\n            targetData.endTs == custom.labelList[i][k].nextTime\n          ) {\n            // 추가 상태와 원본 상태의 끝이 같은 경우 원본 상태의 시작을 추가 상태의 끝으로 변경\n            custom.labelList[i][k].nextTime = targetData.startTs;\n            // 다음 상태와 추가 상태가 같은 경우 다음 상태는 삭제 하고 추가 상태의 끝 시간을 다음 상태의 끝 시간으로 변경\n            if (custom.labelList[i][k + 1] && custom.labelList[i][k + 1].status == targetData.state) {\n              newState.nextTime = custom.labelList[i][k + 1].nextTime;\n              custom.labelList[i].splice(k + 1, 1);\n            }\n          } else if (\n            targetData.startTs == custom.labelList[i][k].time &&\n            targetData.endTs == custom.labelList[i][k].nextTime\n          ) {\n            custom.labelList[i].splice(k, 1);\n            k--;\n          }\n        }\n\n        custom.labelList[i].push(newState);\n        custom.labelList[i].sort((a, b) => {\n          return a.time - b.time;\n        });\n        for (let k in custom.labelList[i]) {\n          if (custom.labelList[i][k - 1] && custom.labelList[i][k].status == custom.labelList[i][k - 1].status) {\n            custom.labelList[i][k].time = custom.labelList[i][k - 1].time;\n            custom.labelList[i].splice(k - 1, 1);\n            k--;\n          }\n        }\n      }\n\n      for (let j in custom.labelList[i]) {\n        custom.labelList[i][j].index = j;\n      }\n    }\n    drawChart();\n  });\n}\n\nfunction drawChart() {\n  let { custom, $scope } = self.ctx;\n  custom.d3Config = {\n    viewWidth: 1920,\n    barHeight: 10,\n    barMargin: 30,\n    margin: {\n      top: 0,\n      right: 96,\n      bottom: 40,\n      left: 230,\n    },\n  };\n  custom.d3Config.viewHeight =\n    custom.d3Config.margin.top +\n    custom.d3Config.margin.bottom +\n    custom.targetDatasources.length * (2 * custom.d3Config.barMargin + custom.d3Config.barHeight);\n\n  custom.$chartSection.empty();\n  // svg 영역 정의\n  custom.$d3 = d3\n    .select(custom.$chartSection[0])\n    .append('svg')\n    .attr('viewBox', `0 0 ${custom.d3Config.viewWidth} ${custom.d3Config.viewHeight}`)\n    .attr('width', custom.d3Config.viewWidth)\n    .attr('height', custom.d3Config.viewHeight);\n\n  drawXAxis();\n  drawBar();\n}\n\nfunction drawXAxis() {\n  let { custom, $scope } = self.ctx;\n  let { viewWidth, viewHeight, margin } = custom.d3Config;\n  const width = viewWidth - margin.left - margin.right;\n  const height = margin.bottom;\n\n  // xAxis 그리기\n  custom.xAxis = d3\n    .scaleTime()\n    .domain(d3.extent([custom.startTs, custom.endTs]))\n    .range([0, width]);\n  custom.$xAxis = custom.$d3\n    .append('g')\n    .attr('class', 'axis')\n    .attr('transform', 'translate(' + margin.left + ', ' + (viewHeight - height) + ')')\n    .style('font-size', '12px')\n    .style('font-family', 'var(--tb-config-font-family)')\n    .style('color', 'var(--tb-service-font-4)')\n    .style('stroke-width', '0.1em')\n    .call(\n      d3\n        .axisBottom(custom.xAxis)\n        .ticks(10)\n        .tickFormat(date => formatDate(date))\n    );\n}\n\nfunction drawBar() {\n  let { custom, $scope, $container } = self.ctx;\n  let { viewWidth, barMargin, barHeight, margin } = custom.d3Config;\n  const x = custom.xAxis;\n\n  let dayLineList = [custom.startTs];\n  let interval = (_.floor((custom.endTs - custom.startTs) / (7 * DAY_MS)) + 1) * DAY_MS;\n  for (let i = custom.startTs; i < moment(custom.endTs).endOf('day').valueOf(); i += interval) {\n    if (moment(i).startOf('day').valueOf() > custom.startTs) {\n      dayLineList.push(moment(i).startOf('day').valueOf());\n    }\n  }\n  dayLineList.sort();\n\n  // 상태 변화 막대 그리기\n  for (let i in custom.targetDatasources) {\n    custom.$d3.append('g').attr('class', `bar-group-${i}`);\n\n    custom.$d3\n      .select(`.bar-group-${i}`)\n      .append('rect')\n      .attr('class', 'background')\n      .attr('width', viewWidth)\n      .attr('height', 2 * barMargin + barHeight)\n      .attr('y', margin.top + i * (2 * barMargin + barHeight))\n      .attr('fill', 'var(--tb-service-background-1)')\n      .attr('stroke', 'var(--tb-service-border-1)');\n\n    custom.$d3\n      .select(`.bar-group-${i}`)\n      .append('g')\n      .attr('class', `day-group-${i}`)\n      .selectAll('g')\n      .data(dayLineList)\n      .enter()\n      .append('rect')\n      .attr('class', 'day-line')\n      .attr('x', d => margin.left + x(d))\n      .attr('width', d => {\n        let endTs = d + interval;\n        if (endTs > custom.endTs) {\n          endTs = custom.endTs;\n        }\n        if (d == custom.startTs) {\n          endTs = moment(d)\n            .add(_.floor(interval / DAY_MS), 'days')\n            .startOf('day')\n            .valueOf();\n        }\n        return x(endTs) - x(d);\n      })\n      .attr('height', 2 * barMargin + barHeight)\n      .attr('y', margin.top + i * (2 * barMargin + barHeight))\n      .attr('fill', (d, i) => {\n        return i % 2 == 0 ? 'var(--tb-service-background-4)' : 'var(--tb-service-background-2)';\n      })\n      .attr('opacity', 0.5)\n      .attr('stroke', 'var(--tb-service-border-1)');\n\n    custom.$d3.select(`.bar-group-${i}`).append('g').attr('class', `bar-${i}`);\n    custom.$d3\n      .select(`.bar-${i}`)\n      .append('g')\n      .selectAll('g')\n      .data([custom.targetDatasources[i]])\n      .enter()\n      .append('text')\n      .text(function (d) {\n        if (d) {\n          return d.entityLabel;\n        }\n        return '';\n      })\n      .attr('class', 'bar-name')\n      .attr('width', margin.left - 40)\n      .attr('x', 20)\n      .attr('y', margin.top + i * (2 * barMargin + barHeight) + barMargin + barHeight / 2 + 4)\n      .call(dotme);\n\n    custom.$d3\n      .select(`.bar-${i}`)\n      .append('g')\n      .selectAll('g')\n      .data(custom.labelList[i])\n      .enter()\n      .append('rect')\n      .attr('class', d => `bar-rect bar-rect-${d.status} tooltip tooltip-${i}-${d.index}`)\n      .attr('fill', d => {\n        if (d.status == 'unconnected' || d.status == 'nodata') {\n          return STATUS.unconnected.color;\n        } else if (d.status == 'stopped') {\n          return STATUS.stopped.color;\n        } else if (d.status == 'waiting') {\n          return STATUS.waiting.color;\n        } else {\n          return STATUS.working.color;\n        }\n      })\n      .attr('x', d => margin.left + x(d.time))\n      .attr('y', margin.top + i * (2 * barMargin + barHeight) + barMargin)\n      .attr('width', d => x(d.nextTime) - x(d.time))\n      .attr('height', barHeight);\n\n    custom.$d3\n      .select(`.bar-${i}`)\n      .append('g')\n      .selectAll('g')\n      .data([custom.targetDatasources[i]])\n      .enter()\n      .append('text')\n      .attr('class', 'chart-action material-icons')\n      .text('edit')\n      .attr('x', viewWidth - margin.right + 22)\n      .attr('y', margin.top + i * (2 * barMargin + barHeight) + barMargin + barHeight / 2 + 10)\n      .on('click', function (e, d, i) {\n        toEdit(d);\n      });\n\n    custom.$d3\n      .select(`.bar-${i}`)\n      .append('g')\n      .selectAll('g')\n      .data([custom.targetDatasources[i]])\n      .enter()\n      .append('text')\n      .attr('class', 'chart-action material-symbols-outlined')\n      .text('earthquake')\n      .attr('x', viewWidth - margin.right + 52)\n      .attr('y', margin.top + i * (2 * barMargin + barHeight) + barMargin + barHeight / 2 + 10)\n      .on('click', function (e, d) {\n        openChart(d, i);\n      });\n\n    for (let j in custom.labelList[i]) {\n      let $content = $('<div></div>');\n      $content.css({\n        color: 'var(--tb-service-font-0)',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        lineHeight: 1.5,\n        borderRadius: `${8 / STANDARD_WINDOW_SIZE}vw`,\n        padding: `${12 / STANDARD_WINDOW_SIZE}vw`,\n      });\n\n      let startTime = moment(custom.labelList[i][j].time).format(custom.ymdhm);\n      let endTime = moment(custom.labelList[i][j].nextTime).format(custom.ymdhm);\n      let $date = $(`<div>${startTime} ~ ${endTime}</div>`);\n      $date.css({\n        textAlign: 'center',\n        fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n      });\n\n      let $description = $(`<div></div>`);\n      if (custom.labelList[i][j].status && custom.labelList[i][j].status !== '') {\n        $description.html(`(${t(STATUS[custom.labelList[i][j].status].content)})`);\n      }\n      $description.css({\n        textAlign: 'center',\n        fontSize: `${12 / STANDARD_WINDOW_SIZE}vw`,\n      });\n\n      $content.append($date);\n      $content.append($description);\n      $(`.tooltip-${i}-${custom.labelList[i][j].index}`, $container).tooltipster({\n        content: $content,\n        interactive: true,\n        theme: 'tooltipster-transparent',\n        trigger: 'hover',\n        delay: 200,\n      });\n    }\n  }\n}\n\nfunction formatDate(date) {\n  if (d3.timeHour(date) < date) {\n    return d3.timeFormat(t('thingplus.time-format.d3-hm'))(date);\n  } else if (d3.timeDay(date) < date) {\n    return d3.timeFormat(t('thingplus.time-format.d3-dh'))(date);\n  } else {\n    return d3.timeFormat(t('thingplus.time-format.d3-md'))(date);\n  }\n}\n\nfunction dotme(text) {\n  text.each(function () {\n    let text = d3.select(this);\n    let words = Array.from(text.text());\n\n    let ellipsis = text.text('').append('tspan').attr('class', 'elip').text('...');\n    let width = parseFloat(text.attr('width')) - ellipsis.node().getComputedTextLength();\n    let numWords = words.length;\n\n    let tspan = text.insert('tspan', ':first-child').text(words.join(''));\n    while (tspan.node().getComputedTextLength() > width && words.length) {\n      words.pop();\n      tspan.text(words.join(''));\n    }\n\n    if (words.length === numWords) {\n      ellipsis.remove();\n    }\n  });\n}\n\nfunction updateDashboardState() {\n  let { custom, $scope } = self.ctx;\n  let target,\n    param = {};\n  if ($scope.selectedDevice != '') {\n    target = custom.relations[$scope.selectedDevice];\n  } else if ($scope.selectedCustomerL2 != '') {\n    target = custom.relations[$scope.selectedCustomerL2];\n  } else if ($scope.selectedCustomerL1 != '') {\n    target = custom.relations[$scope.selectedCustomerL1];\n  }\n  if (target) {\n    param = {\n      entityId: target.id,\n      entityName: target.name,\n      entityLabel: target.label,\n    };\n  }\n  if ($scope.selectedCustomerL1 != '') {\n    let customerL1 = custom.relations[$scope.selectedCustomerL1];\n    param.customerL1 = {\n      entityId: customerL1.id,\n      entityName: customerL1.name,\n      entityLabel: customerL1.label,\n    };\n  }\n  if ($scope.selectedCustomerL2 != '') {\n    let customerL2 = custom.relations[$scope.selectedCustomerL2];\n    param.customerL2 = {\n      entityId: customerL2.id,\n      entityName: customerL2.name,\n      entityLabel: customerL2.label,\n    };\n  }\n  if ($scope.selectedDevice != '') {\n    let device = custom.relations[$scope.selectedDevice];\n    param.device = {\n      entityId: device.id,\n      entityName: device.name,\n      entityLabel: device.label,\n    };\n  }\n  param.startTs = moment($scope.startDate).startOf('day').valueOf();\n  param.endTs = moment($scope.endDate).endOf('day').valueOf();\n  if (param.endTs > moment().valueOf()) {\n    param.endTs = moment().valueOf();\n  }\n  self.ctx.stateController.updateState('state-timeline', param, null);\n  self.ctx.updateAliases();\n}\n\nfunction t(key, data) {\n  let defaultKey = key;\n  if (typeof key === 'string') {\n    let keyArr = key.split('.');\n    defaultKey = keyArr[keyArr.length - 1];\n  }\n  let result = self.ctx.translate.instant(key, data);\n  if (result == key) {\n    return defaultKey;\n  }\n  return result;\n}\n\nfunction toEdit(data) {\n  let { custom, $scope } = self.ctx;\n  let descriptors = self.ctx.actionsApi.getActionDescriptors('toEdit');\n  self.ctx.actionsApi.handleWidgetAction({}, descriptors[0], data.entity.id, data.entityName, custom, data.entityLabel);\n}\n\nfunction openChart(data, index) {\n  let { custom, $scope } = self.ctx;\n  let descriptors = self.ctx.actionsApi.getActionDescriptors('viewChart');\n  data.index = index;\n  self.ctx.actionsApi.handleWidgetAction({}, descriptors[0], data.entity.id, data.entityName, data, data.entityLabel);\n}\n",
        "settingsSchema": "{\n  \"schema\": {\n    \"title\": \"Settings\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"widget\": {\n        \"type\": \"object\",\n        \"required\": [\"originWidth\"],\n        \"properties\": {\n          \"originWidth\": {\n            \"title\": \"Origin Widget Width\",\n            \"type\": \"number\",\n            \"default\": 1630\n          }\n        }\n      }\n    }\n  },\n  \"form\": [[\"widget.originWidth\"]],\n  \"groupInfoes\": [\n    {\n      \"formIndex\": 0,\n      \"GroupTitle\": \"Widget\"\n    }\n  ]\n}\n",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.2819443009295912,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"widget\":{\"originWidth\":1630}},\"title\":\"State Timeline T\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\",\"box-shadow\":\"0px 2px 10px 0 rgba(0, 0, 0, 0.04)\"},\"titleStyle\":{\"font-family\":\"var(--tb-config-font-family)\",\"font-size\":\"1.6em\",\"font-weight\":500,\"letter-spacing\":\"var(--tb-config-letter-spacing)\",\"color\":\"var(--tb-service-font-5)\"},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
      }
    }
  ]
}